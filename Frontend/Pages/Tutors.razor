@page "/topichub/tutors"
@layout TopicHubLayout
@using Frontend.Services
@inject NavigationManager Nav
@inject SubjectTutorService SubjectTutorService
@inject SubjectService SubjectService
@inject AuthService AuthService

<section class="tutors-scope">
    <div class="head-row">
        <h1 class="title"><span class="code">@(currentSubject?.SubjectCode?.ToUpper() ?? "SUBJECT")</span> • <span class="emph">Tutors</span></h1>

        <label class="search">
            <svg class="icon" viewBox="0 0 24 24" width="18" height="18" aria-hidden="true">
                <circle cx="10" cy="10" r="6" stroke="currentColor" stroke-width="2" fill="none" />
                <line x1="14" y1="14" x2="20" y2="20" stroke="currentColor" stroke-width="2" />
            </svg>
            <input type="text" placeholder="Search tutors…" @bind="query" @bind:event="oninput" />
        </label>
    </div>

    <div class="card-grid">
        @foreach (var t in Filtered)
        {
            <div class="tutor-card" @onclick="@(() => OpenProfile(t))">
                <div class="row-top">
                    <div class="avatar">
                        @if (!string.IsNullOrWhiteSpace(t.ProfilePicturePath))
                        {
                            <img src="@t.ProfilePicturePath" alt="@t.FullName" />
                        }
                        else
                        {
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                <circle cx="12" cy="7" r="4"></circle>
                            </svg>
                        }
                    </div>
                    <div class="who">
                        <div class="name" title="@t.FullName">@t.FullName</div>
                        <div class="meta"><span class="role">Tutor</span> • @t.SubjectName</div>
                    </div>
                </div>

                <div class="row-bottom" @onclick:stopPropagation="true">
                    <span class="pill">@t.SubjectCode</span>
                    <button class="follow @(t.Following ? "on" : "off")" @onclick="@(() => ToggleFollow(t))">
                        @(t.Following ? "Following" : "Follow")
                    </button>
                </div>
            </div>
        }
    </div>
</section>

@code {
    private string query = "";
    private List<SubjectTutorVM> tutors = new();
    private SubjectVM? currentSubject;
    private int? currentSubjectId;

    protected override async Task OnInitializedAsync()
    {
        // Get subject ID from query parameters
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var queryString = uri.Query;
        
        if (!string.IsNullOrEmpty(queryString) && queryString.Contains("subjectId="))
        {
            try
            {
                var cleanQuery = queryString.TrimStart('?');
                var subjectIdParam = cleanQuery.Split('&')
                    .FirstOrDefault(p => p.StartsWith("subjectId="))
                    ?.Split('=')[1];
                
                if (!string.IsNullOrEmpty(subjectIdParam) && int.TryParse(subjectIdParam, out int subjectId))
                {
                    currentSubjectId = subjectId;
                    await LoadSubjectAndTutors();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[Tutors] Error parsing subjectId from URL: {ex.Message}");
            }
        }
    }

    private async Task LoadSubjectAndTutors()
    {
        if (currentSubjectId == null) return;
        
        try
        {
            // Load subject details
            currentSubject = await SubjectService.GetSubjectByIdAsync(currentSubjectId.Value);
            
            // Get current user ID for following status
            var currentUser = await AuthService.GetCurrentUserAsync();
            int? currentUserId = currentUser?.UserId;
            
            // Load tutors for this subject with following status
            tutors = await SubjectTutorService.GetTutorsForSubjectAsync(currentSubjectId.Value, currentUserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Tutors] Error loading subject and tutors: {ex.Message}");
            tutors = new List<SubjectTutorVM>();
        }
    }

    private IEnumerable<SubjectTutorVM> Filtered =>
        string.IsNullOrWhiteSpace(query)
            ? tutors
            : tutors.Where(t =>
                t.FullName.Contains(query, StringComparison.OrdinalIgnoreCase) ||
                t.SubjectName.Contains(query, StringComparison.OrdinalIgnoreCase) ||
                t.SubjectCode.Contains(query, StringComparison.OrdinalIgnoreCase));

    private void ToggleFollow(SubjectTutorVM t)
    {
        t.Following = !t.Following;
        // TODO: Implement follow/unfollow API call
    }

    private void OpenProfile(SubjectTutorVM t) => Nav.NavigateTo(t.ProfileRoute);
}

<style>
    .tutors-scope {
        padding: 10px 0;
        overflow-x: hidden
    }

    .head-row {
        display: grid;
        grid-template-columns: auto 1fr;
        align-items: end;
        gap: 16px;
        margin-bottom: 10px
    }

    .title {
        margin: 0;
        font-weight: 900;
        letter-spacing: .2px;
        font-size: clamp(28px,3.6vw,40px)
    }

        .title .emph {
            background: linear-gradient(90deg,#B14CF4,#FFA3F9);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent
        }

    .search {
        justify-self: start;
        display: flex;
        align-items: center;
        gap: 10px;
        background: #fff;
        border: 1px solid var(--ring-soft);
        border-radius: 999px;
        padding: 10px 14px;
        color: #9aa0a6;
        min-width: clamp(260px,40vw,520px);
        box-shadow: inset 0 0 0 1px rgba(0,0,0,.03)
    }

        .search input {
            border: 0;
            outline: 0;
            background: transparent;
            color: #111;
            width: 100%
        }

    .card-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill,minmax(280px,1fr));
        gap: 18px;
        padding-bottom: 16px
    }

    .tutor-card {
        background: var(--panel);
        border: 1px solid var(--ring-soft);
        border-radius: 18px;
        box-shadow: var(--shadow);
        padding: 14px;
        display: grid;
        gap: 10px;
        cursor: pointer;
        transition: transform .14s ease, box-shadow .18s ease, border-color .18s ease;
        min-width: 0
    }

        .tutor-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 14px 36px rgba(0,0,0,.14)
        }

    .row-top {
        display: flex;
        align-items: center;
        gap: 12px
    }

    .avatar {
        width: 56px;
        height: 56px;
        display: grid;
        place-items: center;
        border-radius: 999px;
        background: #fff;
        border: 1px solid var(--ring-soft)
    }

        .avatar svg {
            width: 28px;
            height: 28px;
            stroke-width: 1.8
        }

        .avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 999px;
        }

    .who {
        min-width: 0
    }

    .name {
        font-weight: 900;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis
    }

    .meta {
        color: #6B7280;
        font-weight: 800
    }

    .role {
        text-transform: capitalize
    }

    .row-bottom {
        display: flex;
        align-items: center;
        gap: 10px
    }

    .pill {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        background: #EEF2FF;
        color: #4338CA;
        font-weight: 900;
        font-size: .85rem;
        line-height: 1;
        padding: 8px 12px;
        border-radius: 999px;
        border: 1px solid color-mix(in oklab,#4338CA 22%,#fff);
        max-width: 55%;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis
    }

    .follow {
        margin-left: auto;
        border: 1px solid var(--ring-soft);
        border-radius: 12px;
        line-height: 1;
        padding: 10px 14px;
        font-weight: 900;
        cursor: pointer
    }

        .follow.on {
            background: linear-gradient(180deg,#F3B44A,#F59E0B);
            color: #111
        }

        .follow.off {
            background: #0B1220;
            color: #fff
        }
    @@media (max-width:720px) {
        .head-row

    {
        grid-template-columns: 1fr
    }

    .search {
        justify-self: start;
        min-width: min(100%,520px)
    }

    }
</style>
