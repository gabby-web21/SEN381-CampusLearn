@page "/subjects"
@using Frontend.Services
@inject SubjectService SubjectService

<main class="subjects-page">
    <div class="container page-inner">

        <!-- Title + Search -->
        <div class="header-row">
            <h1 class="title">Subjects</h1>

            <label class="search">
                <svg class="icon" viewBox="0 0 24 24" width="18" height="18" aria-hidden="true">
                    <circle cx="10" cy="10" r="6" stroke="currentColor" stroke-width="2" fill="none" />
                    <line x1="14" y1="14" x2="20" y2="20" stroke="currentColor" stroke-width="2" />
                </svg>
                <input type="text"
                       placeholder="Search subjects, codes, or clusters…"
                       @bind="SearchQuery"
                       @bind:event="oninput" />
            </label>
        </div>

        <!-- Filter Buttons (Peers style) -->
        <div class="filter-section">
            <div class="filter-buttons">
                <button class="filter-btn @(CurrentFilter == "all" ? "active" : "")" @onclick='() => SetFilter("all")'>All</button>
                <button class="filter-btn @(CurrentFilter == "y1" ? "active" : "")" @onclick='() => SetFilter("y1")'>1st year</button>
                <button class="filter-btn @(CurrentFilter == "y2" ? "active" : "")" @onclick='() => SetFilter("y2")'>2nd year</button>
                <button class="filter-btn @(CurrentFilter == "y3" ? "active" : "")" @onclick='() => SetFilter("y3")'>3rd year</button>
                <button class="filter-btn @(CurrentFilter == "y4" ? "active" : "")" @onclick='() => SetFilter("y4")'>4th year</button>
                <button class="filter-btn @(CurrentFilter == "c-business" ? "active" : "")" @onclick='() => SetFilter("c-business")'>Business</button>
                <button class="filter-btn @(CurrentFilter == "c-computing" ? "active" : "")" @onclick='() => SetFilter("c-computing")'>Computing</button>
                <button class="filter-btn @(CurrentFilter == "c-quant" ? "active" : "")" @onclick='() => SetFilter("c-quant")'>Quant</button>
                <button class="filter-btn @(CurrentFilter == "c-law" ? "active" : "")" @onclick='() => SetFilter("c-law")'>Law</button>
            </div>
        </div>

        <!-- Subjects Grid -->
        <section class="grid">
            @foreach (var s in FilteredSubjects)
            {
                <a class="card" href="/Topics">
                    <div class="code">@s.Code</div>
                    <div class="name">@s.Name</div>

                    <div class="meta">
                        <span class="year-badge">@YearBadge(s.Year)</span>
                        <span class="cluster-pill">@s.Cluster</span>
                    </div>
                </a>
            }
        </section>
    </div>
</main>

@code {
    private List<SubjectVM> subjects = new();
    private string SearchQuery { get; set; } = string.Empty;
    private string CurrentFilter { get; set; } = "all"; // all, y1..y4, c-business, c-computing, c-quant, c-law

    protected override async Task OnInitializedAsync()
    {
        await LoadSubjects();
    }

    private async Task LoadSubjects()
    {
        try
        {
            subjects = await SubjectService.GetAllSubjectsAsync();
            subjects = subjects.Where(s => s.IsActive).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Subjects] Error loading subjects: {ex.Message}");
            subjects = new List<SubjectVM>();
        }
    }

    private IEnumerable<SubjectVM> FilteredSubjects
        => subjects
            .Where(ApplyFilter)
            .Where(s =>
                string.IsNullOrWhiteSpace(SearchQuery) ||
                s.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                s.Code.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                s.Cluster.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
            .OrderBy(s => s.Year)
            .ThenBy(s => s.Code);

    private bool ApplyFilter(SubjectVM s) => CurrentFilter switch
    {
        "y1" => s.Year == 1,
        "y2" => s.Year == 2,
        "y3" => s.Year == 3,
        "y4" => s.Year == 4,
        "c-business" => s.Cluster.Equals("Business", StringComparison.OrdinalIgnoreCase),
        "c-computing" => s.Cluster.Equals("Computing", StringComparison.OrdinalIgnoreCase),
        "c-quant" => s.Cluster.Equals("Quant", StringComparison.OrdinalIgnoreCase),
        "c-law" => s.Cluster.Equals("Law", StringComparison.OrdinalIgnoreCase),
        _ => true
    };

    private void SetFilter(string f) => CurrentFilter = f;

    private static string YearBadge(int y) => y switch
    {
        1 => "1st year",
        2 => "2nd year",
        3 => "3rd year",
        4 => "4th year",
        _ => $"{y} year"
    };
}

<style>
    :root {
        --bg: #F2F3F5;
        --panel: #FFFFFF;
        --ink: #1F2937;
        --muted: #6B7280;
        --ring: rgba(0,0,0,.10);
        --radius: 16px;
        --shadow: 0 8px 22px rgba(0,0,0,.06);
        --container: min(1200px, 92vw);
        --student-blue: #3B82F6;
    }

    *, *::before, *::after {
        box-sizing: border-box
    }

    html, body {
        height: 100%
    }

    body {
        margin: 0;
        background: var(--bg);
        color: var(--ink);
        font-family: system-ui, -apple-system, Segoe UI, Inter, Roboto, Arial, sans-serif;
        line-height: 1.35;
    }

    .container {
        width: var(--container);
        margin-inline: auto;
        padding-inline: clamp(12px,3vw,24px)
    }

    .page-inner {
        padding-block: clamp(16px,3.2vw,28px)
    }

    .header-row {
        display: grid;
        grid-template-columns: auto 1fr;
        align-items: end;
        gap: clamp(12px, 2vw, 20px);
        margin-bottom: clamp(14px, 2.2vw, 18px);
    }

    .title {
        margin: 0;
        font-size: clamp(32px, 4.2vw, 46px);
        font-weight: 900;
        letter-spacing: .2px;
        line-height: 1.05;
        padding-top: clamp(4px, 0.8vw, 10px);
    }

    .search {
        justify-self: start;
        display: flex;
        align-items: center;
        gap: 10px;
        background: #fff;
        border: 1px solid var(--ring);
        border-radius: 999px;
        padding: 12px 16px;
        color: #9aa0a6;
        min-width: clamp(260px, 40vw, 520px);
        box-shadow: inset 0 0 0 1px rgba(0,0,0,.03);
        transition: box-shadow .18s ease, border-color .18s ease, color .18s ease;
    }

        .search:focus-within {
            border-color: color-mix(in oklab, var(--student-blue) 45%, #fff);
            box-shadow: 0 0 0 8px color-mix(in oklab, var(--student-blue) 14%, transparent);
            color: var(--student-blue);
        }

        .search input {
            border: 0;
            outline: 0;
            background: transparent;
            color: var(--ink);
            font: inherit;
            width: 100%;
        }

    .filter-section {
        margin-top: clamp(6px, 1vw, 10px);
        margin-bottom: clamp(8px, 1.4vw, 14px);
    }

    .filter-buttons {
        display: flex;
        gap: .5rem;
        background: #f8f9fa;
        padding: .35rem;
        border-radius: .75rem;
        width: fit-content;
        flex-wrap: wrap;
    }

    .filter-btn {
        padding: .55rem 1rem;
        border: none;
        background: transparent;
        color: #6c757d;
        font-weight: 700;
        font-size: .95rem;
        border-radius: .5rem;
        cursor: pointer;
        transition: all .2s ease;
    }

        .filter-btn:hover {
            background: rgba(255,255,255,.6);
            color: #495057;
        }

        .filter-btn.active {
            background: #fff;
            color: #007bff;
            box-shadow: 0 1px 3px rgba(0,0,0,.1);
        }

    .grid {
        margin-top: clamp(6px, 1.2vw, 12px);
        display: grid;
        grid-template-columns: repeat(4, minmax(0,1fr));
        gap: clamp(14px, 1.8vw, 22px);
        padding-bottom: 28px;
    }

    .card {
        position: relative;
        display: grid;
        gap: 10px;
        padding: 16px 16px 14px;
        background: var(--panel);
        border: 1px solid var(--ring);
        border-radius: calc(var(--radius) - 2px);
        box-shadow: var(--shadow);
        color: inherit;
        text-decoration: none;
        transition: transform .14s ease, box-shadow .18s ease;
        will-change: transform, box-shadow;
        overflow: hidden;
    }

        .card::after {
            content: "";
            position: absolute;
            inset: -20px;
            background: radial-gradient(40% 40% at 50% 0%, color-mix(in oklab, var(--student-blue) 28%, transparent), transparent 70%);
            opacity: 0;
            filter: blur(22px);
            transition: opacity .18s ease;
            z-index: -1;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 28px rgba(0,0,0,.10), 0 10px 36px rgba(59,130,246,.16);
        }

            .card:hover::after {
                opacity: 1;
            }

    .code {
        font-weight: 900;
        letter-spacing: .4px;
        font-size: 1.05rem;
        color: color-mix(in oklab, var(--ink) 90%, white);
    }

    .name {
        font-weight: 800;
        color: color-mix(in oklab, var(--ink) 70%, white);
        line-height: 1.3;
        min-height: 2.4ch;
    }

    .meta {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-top: 4px;
    }

    .year-badge {
        background: #111827;
        color: #fff;
        font-weight: 800;
        font-size: .8rem;
        padding: 4px 8px;
        border-radius: 999px;
    }

    .cluster-pill {
        background: #EEF2FF;
        color: #4338CA;
        font-weight: 800;
        font-size: .8rem;
        padding: 4px 10px;
        border-radius: 999px;
        border: 1px solid color-mix(in oklab, #4338CA 22%, #fff);
    }

    @@media (max-width: 1100px) {
        .grid {
            grid-template-columns: repeat(3, minmax(0,1fr));
        }
    }

    @@media (max-width: 820px) {
        .header-row {
            grid-template-columns: 1fr;
            gap: 10px;
        }

        .search {
            justify-self: start;
            min-width: min(100%, 520px)
        }

        .grid {
            grid-template-columns: repeat(2, minmax(0,1fr));
        }
    }

    @@media (max-width: 520px) {
        .grid {
            grid-template-columns: 1fr;
        }
    }
</style>
