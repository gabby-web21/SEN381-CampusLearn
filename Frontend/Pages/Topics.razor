@page "/topics"
@using Microsoft.AspNetCore.Components.Forms
@using Frontend.Services
@using Microsoft.AspNetCore.Components
@inject TutorApplicationService TutorAppService
@inject AuthService AuthService
@inject TopicService TopicService
@inject SubjectService SubjectService
@inject HttpClient Http
@inject NavigationManager Navigation

<main class="topics-scope">
    <div class="topics-wrap">
        <div class="topics-page">
    <div class="container page-inner">

        <!-- Header: title left, search right -->
        <div class="header-row">
            <h1 class="title">
                <span class="code">BUM 281</span>
                <span class="divider">•</span>
                <span class="label">Topics</span>
            </h1>

            <!-- Keep the tutor button -->
            <button class="btn-become" @onclick="OpenTutorModal">become a tutor</button>
        </div>


            <!-- center slot -->
            <h1 class="title">@(currentSubject?.SubjectCode?.ToUpper() ?? "SUBJECT") TOPICS</h1>

            <!-- right slot -->
            <label class="search">
                <svg class="icon" viewBox="0 0 24 24" width="18" height="18" aria-hidden="true">
                    <circle cx="10" cy="10" r="6" stroke="currentColor" stroke-width="2" fill="none" />
                    <line x1="14" y1="14" x2="20" y2="20" stroke="currentColor" stroke-width="2" />
                </svg>
                <input type="text"
                       placeholder="Search topics…"
                       @bind="SearchQuery"
                       @bind:event="oninput" />
            </label>
        </div>

        <!-- Topic pills -->
        <section class="pill-grid">
@if (topics != null && topics.Any())
{
    @for (int i = 0; i < topics.Count; i++)
    {
        var t = topics[i];
        var activeClass = i == 0 ? "pill active" : "pill";

        <a class="@activeClass"
           href="/topichub/tutors?subjectId=@currentSubjectId&topicId=@t.TopicId"
           title="@t.Title">
            <span class="num">@($"{i + 1}.")</span>
            <span class="text">@t.Title</span>
        </a>
    }
}
else
{
    <div class="no-topics">No topics available for this subject.</div>
}

        </section>
    </div>
    </div>
</main>

@* ===== Modal (Become a tutor) ===== *@
@if (ShowTutorModal)
{
    <div class="tm-backdrop" @onclick="CloseTutorModal"></div>
    <div role="dialog" aria-modal="true" class="tm-modal" @onclick:stopPropagation>
        <header class="tm-head">
            <h3>Upload last year's academic transcript</h3>
            <button class="tm-x" @onclick="CloseTutorModal" aria-label="Close">×</button>
        </header>

        <div class="tm-body">
            <div class="tm-drop" @ondrop="OnDrop">
                <div class="tm-drop-inner">
                    <div class="tm-text">
                        <label class="tm-file-btn">
                            choose file
                            <InputFile OnChange="HandleFileSelected" accept=".pdf,application/pdf" />
                        </label>
                        <small class="tm-help">PDF only, max 10 MB</small>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(SelectError))
            {
                <div class="tm-error">@SelectError</div>
            }

            @if (SelectedFile is not null)
            {
                <div class="tm-preview">
                    <svg viewBox="0 0 24 24" width="18" height="18" aria-hidden="true"><path d="M6 2h9l5 5v15a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2z" fill="#f2f5fa" /><path d="M15 2v5h5" fill="#e9eef5" /></svg>
                    <div class="tm-filemeta">
                        <div class="tm-name" title="@SelectedFile.Name">@SelectedFile.Name</div>
                        <div class="tm-size">@HumanSize(SelectedFile.Size)</div>
                    </div>
                    <button class="tm-remove" @onclick="() => { SelectedFile = null; SelectError = string.Empty; }">Remove</button>
                </div>
            }
        </div>

        <footer class="tm-foot">
            <button class="tm-btn" @onclick="CloseTutorModal">Cancel</button>
            <button class="tm-btn tm-send" disabled="@(SelectedFile is null)" @onclick="SendTranscript">Send</button>
        </footer>
    </div>
}

@code {
private List<TopicVM> topics = new();
    private SubjectVM? currentSubject;
    private int? currentSubjectId;

    // 🔍 Add search functionality from FinalFrontend
    private string SearchQuery { get; set; } = string.Empty;
    private List<TopicVM> FilteredTopics =>
        string.IsNullOrWhiteSpace(SearchQuery)
            ? topics
            : topics
                .Where(t => t.Title.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();

    protected override async Task OnInitializedAsync()
    {
        // Get subject ID from query parameters using simple string parsing
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryString = uri.Query;
        
        Console.WriteLine($"[Topics] Full URL: {uri}");
        Console.WriteLine($"[Topics] Query string: '{queryString}'");
        
        if (!string.IsNullOrEmpty(queryString) && queryString.Contains("subjectId="))
        {
            try
            {
                // Remove the leading '?' and split by '&'
                var cleanQuery = queryString.TrimStart('?');
                var subjectIdParam = cleanQuery.Split('&')
                    .FirstOrDefault(p => p.StartsWith("subjectId="))
                    ?.Split('=')[1];
                
                Console.WriteLine($"[Topics] Clean query: '{cleanQuery}'");
                Console.WriteLine($"[Topics] Parsed subjectId parameter: '{subjectIdParam}'");
                
                if (!string.IsNullOrEmpty(subjectIdParam) && int.TryParse(subjectIdParam, out int subjectId))
                {
                    Console.WriteLine($"[Topics] Parsed subjectId as int: {subjectId}");
                    currentSubjectId = subjectId;
                    await LoadSubjectAndTopics();
                }
                else
                {
                    Console.WriteLine($"[Topics] Failed to parse subjectId as int");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[Topics] Error parsing subjectId from URL: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine($"[Topics] No subjectId parameter found in query string");
        }
        
        // If no subject ID provided, try to load the first available subject
        if (currentSubjectId == null)
        {
            await LoadFirstSubject();
        }
    }

    private async Task LoadFirstSubject()
    {
        try
        {
            var subjects = await SubjectService.GetAllSubjectsAsync();
            var activeSubjects = subjects.Where(s => s.IsActive).ToList();
            
            if (activeSubjects.Any())
            {
                currentSubjectId = activeSubjects.First().SubjectId;
                await LoadSubjectAndTopics();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Topics] Error loading first subject: {ex.Message}");
        }
    }

    private async Task LoadSubjectAndTopics()
    {
        if (currentSubjectId == null) 
        {
            Console.WriteLine($"[Topics] LoadSubjectAndTopics called but currentSubjectId is null");
            return;
        }
        
        Console.WriteLine($"[Topics] Loading subject and topics for SubjectId: {currentSubjectId.Value}");
        
        try
        {
            // Load subject details
            currentSubject = await SubjectService.GetSubjectByIdAsync(currentSubjectId.Value);
            Console.WriteLine($"[Topics] Loaded subject: {currentSubject?.SubjectCode} - {currentSubject?.Name}");
            
            // Load topics for this subject
            topics = await TopicService.GetTopicsBySubjectAsync(currentSubjectId.Value);
            topics = topics.Where(t => t.IsActive).ToList();
            Console.WriteLine($"[Topics] Loaded {topics.Count} topics");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Topics] Error loading subject and topics: {ex.Message}");
            topics = new List<TopicVM>();
        }
    }

    // 📄 Modal state (become a tutor)
    private bool ShowTutorModal = false;
    private IBrowserFile? SelectedFile;
    private string SelectError = string.Empty;
    private const long MaxBytes = 10 * 1024 * 1024; // 10 MB

    void OpenTutorModal()
    {
        ShowTutorModal = true;
        SelectedFile = null;
        SelectError = string.Empty;
    }

    void CloseTutorModal()
    {
        ShowTutorModal = false;
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectError = string.Empty;
        SelectedFile = null;

        var file = e.File;
        if (file is null)
        {
            SelectError = "No file selected.";
            return;
        }

        if (!(file.ContentType?.Contains("pdf", StringComparison.OrdinalIgnoreCase) ?? false) &&
            !file.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
        {
            SelectError = "Please choose a PDF file.";
            return;
        }

        if (file.Size > MaxBytes)
        {
            SelectError = "File is too large. Max 10 MB.";
            return;
        }

        SelectedFile = file;
    }

    private async Task OnDrop(DragEventArgs e)
    {
        // Drop handling placeholder
        await Task.CompletedTask;
    }

    private async Task SendTranscript()
    {
        if (SelectedFile == null) return;

        try
        {
            var currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                SelectError = "Please log in to submit an application.";
                return;
            }

            var formData = new MultipartFormDataContent();
            formData.Add(new StreamContent(SelectedFile.OpenReadStream(MaxBytes)), "File", SelectedFile.Name);
            formData.Add(new StringContent($"transcript_{currentUser.UserId}_{DateTime.Now:yyyyMMdd_HHmmss}"), "Name");

            var uploadResponse = await Http.PostAsync("api/file/upload-transcript", formData);
            
            if (!uploadResponse.IsSuccessStatusCode)
            {
                SelectError = "Failed to upload transcript. Please try again.";
                return;
            }

            var uploadResult = await uploadResponse.Content.ReadFromJsonAsync<dynamic>();
            var transcriptPath = uploadResult?.GetProperty("filePath").GetString();

            if (string.IsNullOrEmpty(transcriptPath))
            {
                SelectError = "Failed to get transcript file path.";
                return;
            }

            var applicationInput = new TutorApplicationInput
            {
                UserId = currentUser.UserId,
                PhoneNum = currentUser.PhoneNum,
                StudentNo = currentUser.StudentNo,
                Major = currentUser.Program,
                YearOfStudy = !string.IsNullOrEmpty(currentUser.Year) && int.TryParse(currentUser.Year, out int year) ? year : null,
                MinRequiredGrade = 65,
                TranscriptPath = transcriptPath
            };

            var result = await TutorAppService.SubmitApplicationAsync(applicationInput);
            
            if (result.Success)
            {
                ShowTutorModal = false;
                SelectedFile = null;
                SelectError = string.Empty;
            }
            else
            {
                SelectError = result.Message;
            }
        }
        catch (Exception ex)
        {
            SelectError = $"Error submitting application: {ex.Message}";
        }
    }

    private static string HumanSize(long bytes)
    {
        double b = bytes;
        string[] u = { "B", "KB", "MB", "GB" };
        int i = 0;
        while (b >= 1024 && i < u.Length - 1) { b /= 1024; i++; }
        return $"{b:0.#} {u[i]}";
    }
}

<style>
    /* ===== SCOPED PAGE THEME (won’t touch nav) ===== */
    .topics-scope {
        /* palette */
        --bg: #F2F3F5;
        --panel: #fff;
        --ink: #1F2937;
        --muted: #6B7280;
        --ring: rgba(0,0,0,.10);
        --shadow: 0 8px 22px rgba(0,0,0,.06);
        --radius: 16px;
        --stud-blue: #1D4ED8;
        --orange: #F97316;
        --rose: #E11D48;
        --panel-ring: rgba(0,0,0,.08);
        --shadow-1: 0 2px 8px rgba(0,0,0,.06);
        /* lock a clean sans within this page so we never fall back to Times */
        font-family: system-ui, -apple-system, "Segoe UI", Inter, Roboto, Arial, "Helvetica Neue", sans-serif;
        color: var(--ink);
    }

        .topics-scope .topics-wrap {
            width: min(1200px, 92vw);
            margin-inline: auto;
            padding-inline: clamp(12px,3vw,24px);
            padding-block: clamp(16px,3.2vw,28px);
        }

        /* Header */
        .topics-scope .header-row {
            display: grid;
            grid-template-columns: 1fr auto;
            align-items: end;
            gap: clamp(12px,2vw,20px);
            margin-bottom: clamp(14px,2.2vw,18px);
        }

/* ===== Page top ===== */
.page-inner {
    padding-block: clamp(14px, 3.6vw, 24px);
}

.heading-row {
    display: grid;
    grid-template-columns: 1fr auto 1fr; /* button | title | search */
    align-items: center;
    gap: 12px;
}

/* orange pill button (matches your screenshot) */
.btn-become {
    justify-self: start;
    background: var(--orange);
    color: #fff;
    border: none;
    border-radius: 10px;
    height: 38px;
    padding: 0 16px;
    font-weight: 800;
    cursor: pointer;
    box-shadow: 0 6px 18px rgba(0,0,0,.06);
}

.btn-become:hover {
    filter: brightness(0.96);
    transform: translateY(-1px);
}

.btn-become:active {
    transform: translateY(0);
}

.title {
    justify-self: center;
    font-size: clamp(20px, 3.3vw, 32px);
    font-weight: 800;
    letter-spacing: .3px;
}

/* 🔹 New style from FinalFrontend (topic title inside scope) */
.topics-scope .title {
    margin: 0;
    display: flex;
    align-items: baseline;
    gap: 10px;
    letter-spacing: .2px;
    line-height: 1.05;
    font-weight: 900;
    font-size: clamp(28px, 4.2vw, 46px);
}

.search {
    justify-self: end;
    display: flex;
    align-items: center;
    gap: 8px;
    background: #fff;
    border: 1px solid var(--panel-ring);
    border-radius: 999px;
    padding: 8px 12px;
    min-width: 170px;
    box-shadow: inset 0 0 0 1px rgba(0,0,0,.04);
}

.search input {
    border: 0;
    outline: none;
    font: inherit;
}

            color: var(--ink);
        }

/* ===== Pill grid ===== */
.pill-grid {
    margin-top: 12px;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 14px 28px; /* tighter rows, wider columns like screenshot */
}

.pill {
    display: flex;
    align-items: center;
    gap: 10px;
    height: 42px;
    padding: 0 14px;
    border-radius: 14px;
    text-decoration: none;
    color: var(--ink);
    background: color-mix(in oklab, var(--ink) 2.5%, white);
    border: 1px solid var(--panel-ring);
    box-shadow: var(--shadow-1);
    font-weight: 700;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.pill .num {
    display: inline-grid;
    place-items: center;
    min-width: 22px;
    height: 22px;
    padding-inline: 2px;
    border-radius: 999px;
    background: color-mix(in oklab, var(--ink) 12%, white);
    color: #fff;
    font-size: .8rem;
}

/* Active first pill (rose) */
.pill.active {
    background: var(--rose);
    color: #fff;
    border-color: color-mix(in oklab, var(--rose) 70%, black);
}

.pill.active .num {
    background: #fff;
    color: var(--rose);
}

.no-topics {
    grid-column: 1 / -1;
    text-align: center;
    padding: 2rem;
    color: #666;
    font-style: italic;
}

/* ===== Modal (namespaced .tm-*) ===== */
.tm-backdrop {
    position: fixed;
    inset: 0;
    background: rgba(0,0,0,.35);
    z-index: 50;
    animation: tmFade .12s ease;
}

.tm-modal {
    position: fixed;
    z-index: 60;
    top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);
    width: min(720px, 92vw);
    background: #fff;
    border-radius: 14px;
    border: 1px solid var(--panel-ring);
    box-shadow: 0 20px 60px rgba(0,0,0,.20);
    animation: tmPop .18s ease;
}

.tm-head {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 14px 16px;
    border-bottom: 1px solid var(--panel-ring);
    background: #f7f9fc;
}

.tm-head h3 {
    margin: 0;
    font-weight: 800;
}

.tm-x {
    border: none;
    background: transparent;
    font-size: 22px;
    line-height: 1;
    cursor: pointer;
    color: #555;
}

.tm-body {
    padding: 16px;
    display: grid;
    gap: 12px;
}

.tm-drop {
    border: 1.5px dashed #c9d2dc;
    border-radius: 12px;
    padding: 18px;
    background: #fbfdff;
}

.tm-drop-inner {
    display: flex;
    align-items: center;
    gap: 14px;
}

.tm-text {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.tm-text strong {
    font-weight: 800;
}

.tm-text span {
    color: #6b7280;
    font-size: .95rem;
}

.tm-file-btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    padding: 8px 12px;
    border-radius: 10px;
    background: #eef3f9;
    border: 1px solid var(--panel-ring);
    cursor: pointer;
    font-weight: 800;
    width: max-content;
    margin-top: 4px;
    position: relative;
    overflow: hidden;
}

.tm-file-btn input[type="file"] {
    position: absolute;
    inset: 0;
    opacity: 0;
    cursor: pointer;
    width: 100%;
    height: 100%;
}

.tm-help {
    color: #6b7280;
}

.tm-error {
    color: #b42318;
    background: #ffece8;
    border: 1px solid #ffd4cd;
    padding: 8px 10px;
    border-radius: 10px;
    font-weight: 700;
}

.tm-preview {
    display: flex;
    align-items: center;
    gap: 10px;
    border: 1px solid var(--panel-ring);
    background: #fff;
    border-radius: 10px;
    padding: 10px 12px;
}

.tm-filemeta {
    flex: 1 1 auto;
    min-width: 0;
}

.tm-name {
    font-weight: 800;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.tm-size {
    color: #6b7280;
    font-size: .92rem;
}

.tm-remove {
    border: 1px solid var(--panel-ring);
    background: #fff;
    padding: 6px 10px;
    border-radius: 10px;
    font-weight: 800;
    cursor: pointer;
}

.tm-foot {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    padding: 12px 16px;
    border-top: 1px solid var(--panel-ring);
    background: #fafbfe;
}

.tm-btn {
    background: #fff;
    border: 1px solid var(--panel-ring);
    border-radius: 10px;
    padding: 8px 12px;
    font-weight: 800;
    cursor: pointer;
}

.tm-send {
    background: var(--rose);
    color: #fff;
    border: none;
}

.tm-send:disabled {
    filter: grayscale(1) brightness(.95);
    cursor: not-allowed;
}

@@keyframes tmPop {
    from {
        opacity: 0;
        transform: translate(-50%,-46%);
    }
    to {
        opacity: 1;
        transform: translate(-50%,-50%);
    }
}

@@keyframes tmFade {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

/* 🔹 New addition from FinalFrontend */
.topics-scope .title .code {
    font-weight: 900;
}


            .topics-scope .title .divider {
                color: var(--muted);
                opacity: .7;
                font-weight: 800;
            }
            /* Keep “Topics” plain ink (no purple) */
            .topics-scope .title .label {
                color: var(--ink);
                font-weight: 900;
            }

        /* Search */
        .topics-scope .search {
            justify-self: start;
            display: flex;
            align-items: center;
            gap: 10px;
            background: #fff;
            border: 1px solid var(--ring);
            border-radius: 999px;
            padding: 12px 16px;
            color: #9aa0a6;
            min-width: clamp(240px, 36vw, 420px);
            box-shadow: inset 0 0 0 1px rgba(0,0,0,.03);
            transition: box-shadow .18s ease, border-color .18s ease, color .18s ease;
        }

            .topics-scope .search:focus-within {
                border-color: color-mix(in oklab, var(--stud-blue) 45%, #fff);
                box-shadow: 0 0 0 8px color-mix(in oklab, var(--stud-blue) 14%, transparent);
                color: var(--stud-blue);
            }

            .topics-scope .search input {
                border: 0;
                outline: 0;
                background: transparent;
                color: var(--ink);
                font: inherit;
                width: 100%;
            }

        /* Pills */
        .topics-scope .pill-grid {
            margin-top: clamp(6px,1.2vw,12px);
            display: grid;
            grid-template-columns: repeat(3, minmax(0,1fr));
            gap: clamp(12px,1.6vw,20px) clamp(18px,2.2vw,28px);
            padding-bottom: 28px;
        }

        .topics-scope .pill {
            position: relative;
            display: flex;
            align-items: center;
            gap: 10px;
            height: 44px;
            padding: 0 14px;
            border-radius: 14px;
            text-decoration: none;
            color: var(--ink);
            background: color-mix(in oklab, var(--ink) 2.5%, white);
            border: 1px solid var(--ring);
            box-shadow: var(--shadow);
            font-weight: 800;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            transition: transform .14s ease, box-shadow .18s ease, border-color .18s ease;
        }

            .topics-scope .pill .num {
                display: inline-grid;
                place-items: center;
                min-width: 24px;
                height: 24px;
                padding-inline: 2px;
                border-radius: 999px;
                background: color-mix(in oklab, var(--ink) 12%, white);
                color: #fff;
                font-size: .82rem;
                line-height: 1;
            }

            .topics-scope .pill .text {
                overflow: hidden;
                text-overflow: ellipsis;
            }

            .topics-scope .pill:hover {
                transform: translateY(-2px);
                box-shadow: 0 16px 44px rgba(0,0,0,.16), 0 0 0 10px color-mix(in oklab, var(--stud-blue) 10%, transparent);
                border-color: color-mix(in oklab, var(--ink) 22%, #fff);
            }

            /* Active pill: keep neutral (white) — no purple */
            .topics-scope .pill.active {
                background: #fff;
                color: var(--ink);
                border-color: color-mix(in oklab, var(--ink) 35%, #fff);
            }

                .topics-scope .pill.active .num {
                    background: color-mix(in oklab, var(--ink) 85%, #fff);
                    color: #fff;
                }

    /* Responsive */
    @@media (max-width: 980px) {
        .topics-scope .pill-grid {
            grid-template-columns: repeat(2, minmax(0,1fr));
        }
    }

    @@media (max-width: 640px) {
        .topics-scope .header-row {
            grid-template-columns: 1fr;
            gap: 10px;
        }

        .topics-scope .search {
            min-width: min(100%, 420px);
        }

        .topics-scope .pill-grid {
            grid-template-columns: 1fr;
        }
    }

.btn-become {
    justify-self: start;
}

.title {
    justify-self: start;
}

/* ===== NAV STABILIZER (page-local; won't restyle, just prevents layout drift) ===== */
@@layer topics_nav_fix {
    nav {
        display: flex !important;
        align-items: center !important;
        min-height: 64px !important;
        padding-block: 0 !important;
    }
        }

            nav * {
                font-family: inherit;
            }
            /* don’t force serif */
            nav :is(.mainTitle, .avatar, .hamburger, .menu-toggle) {
                align-self: center !important;
            }
    }
</style>
