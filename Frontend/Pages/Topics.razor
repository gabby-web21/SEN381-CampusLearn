@page "/topics"
@using Microsoft.AspNetCore.Components.Forms
@using Frontend.Services
@using Microsoft.AspNetCore.Components
@inject TutorApplicationService TutorAppService
@inject AuthService AuthService
@inject TopicService TopicService
@inject SubjectService SubjectService
@inject HttpClient Http
@inject NavigationManager Navigation

<!-- Topics (3.2) — BUM 281 TOPICS page -->

<main class="topics-page">
    <div class="container page-inner">
        <div class="heading-row">
            <!-- left slot -->
            <button class="btn-become" @onclick="OpenTutorModal">become a tutor</button>

            <!-- center slot -->
            <h1 class="title">@(currentSubject?.SubjectCode?.ToUpper() ?? "SUBJECT") TOPICS</h1>

            <!-- right slot -->
            <label class="search">
                <svg class="icon" viewBox="0 0 24 24" width="18" height="18" aria-hidden="true">
                    <circle cx="10" cy="10" r="6" stroke="#9aa0a6" stroke-width="2" fill="none" />
                    <line x1="14" y1="14" x2="20" y2="20" stroke="#9aa0a6" stroke-width="2" />
                </svg>
                <input type="text" placeholder="Search" />
            </label>
        </div>

        <!-- Topic pills (3 columns on desktop) -->
        <section class="pill-grid">
            @if (topics.Any())
            {
                @for (int i = 0; i < topics.Count; i++)
                {
                    var t = topics[i];
                    var number = i + 1;
                    var activeClass = i == 0 ? " pill active" : " pill";
                    <a class="@activeClass" href="/topichub/tutors?subjectId=@currentSubjectId&topicId=@t.TopicId">
                        <span class="num">@number.</span>
                        <span class="text">@t.Title</span>
                    </a>
                }
            }
            else
            {
                <div class="no-topics">No topics available for this subject.</div>
            }
        </section>
    </div>
</main>

@* ===== Modal (Become a tutor) ===== *@
@if (ShowTutorModal)
{
    <div class="tm-backdrop" @onclick="CloseTutorModal"></div>
    <div role="dialog" aria-modal="true" class="tm-modal" @onclick:stopPropagation>
        <header class="tm-head">
            <h3>Upload last year's academic transcript</h3>
            <button class="tm-x" @onclick="CloseTutorModal" aria-label="Close">×</button>
        </header>

        <div class="tm-body">
            <div class="tm-drop" @ondrop="OnDrop">
                <div class="tm-drop-inner">
                    <div class="tm-text">
                        <label class="tm-file-btn">
                            choose file
                            <InputFile OnChange="HandleFileSelected" accept=".pdf,application/pdf" />
                        </label>
                        <small class="tm-help">PDF only, max 10 MB</small>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(SelectError))
            {
                <div class="tm-error">@SelectError</div>
            }

            @if (SelectedFile is not null)
            {
                <div class="tm-preview">
                    <svg viewBox="0 0 24 24" width="18" height="18" aria-hidden="true"><path d="M6 2h9l5 5v15a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2z" fill="#f2f5fa" /><path d="M15 2v5h5" fill="#e9eef5" /></svg>
                    <div class="tm-filemeta">
                        <div class="tm-name" title="@SelectedFile.Name">@SelectedFile.Name</div>
                        <div class="tm-size">@HumanSize(SelectedFile.Size)</div>
                    </div>
                    <button class="tm-remove" @onclick="() => { SelectedFile = null; SelectError = string.Empty; }">Remove</button>
                </div>
            }
        </div>

        <footer class="tm-foot">
            <button class="tm-btn" @onclick="CloseTutorModal">Cancel</button>
            <button class="tm-btn tm-send" disabled="@(SelectedFile is null)" @onclick="SendTranscript">Send</button>
        </footer>
    </div>
}

@code {
    private List<TopicVM> topics = new();
    private SubjectVM? currentSubject;
    private int? currentSubjectId;

    protected override async Task OnInitializedAsync()
    {
        // Get subject ID from query parameters using simple string parsing
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryString = uri.Query;
        
        Console.WriteLine($"[Topics] Full URL: {uri}");
        Console.WriteLine($"[Topics] Query string: '{queryString}'");
        
        if (!string.IsNullOrEmpty(queryString) && queryString.Contains("subjectId="))
        {
            try
            {
                // Remove the leading '?' and split by '&'
                var cleanQuery = queryString.TrimStart('?');
                var subjectIdParam = cleanQuery.Split('&')
                    .FirstOrDefault(p => p.StartsWith("subjectId="))
                    ?.Split('=')[1];
                
                Console.WriteLine($"[Topics] Clean query: '{cleanQuery}'");
                Console.WriteLine($"[Topics] Parsed subjectId parameter: '{subjectIdParam}'");
                
                if (!string.IsNullOrEmpty(subjectIdParam) && int.TryParse(subjectIdParam, out int subjectId))
                {
                    Console.WriteLine($"[Topics] Parsed subjectId as int: {subjectId}");
                    currentSubjectId = subjectId;
                    await LoadSubjectAndTopics();
                }
                else
                {
                    Console.WriteLine($"[Topics] Failed to parse subjectId as int");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[Topics] Error parsing subjectId from URL: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine($"[Topics] No subjectId parameter found in query string");
        }
        
        // If no subject ID provided, try to load the first available subject
        if (currentSubjectId == null)
        {
            await LoadFirstSubject();
        }
    }

    private async Task LoadFirstSubject()
    {
        try
        {
            var subjects = await SubjectService.GetAllSubjectsAsync();
            var activeSubjects = subjects.Where(s => s.IsActive).ToList();
            
            if (activeSubjects.Any())
            {
                currentSubjectId = activeSubjects.First().SubjectId;
                await LoadSubjectAndTopics();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Topics] Error loading first subject: {ex.Message}");
        }
    }

    private async Task LoadSubjectAndTopics()
    {
        if (currentSubjectId == null) 
        {
            Console.WriteLine($"[Topics] LoadSubjectAndTopics called but currentSubjectId is null");
            return;
        }
        
        Console.WriteLine($"[Topics] Loading subject and topics for SubjectId: {currentSubjectId.Value}");
        
        try
        {
            // Load subject details
            currentSubject = await SubjectService.GetSubjectByIdAsync(currentSubjectId.Value);
            Console.WriteLine($"[Topics] Loaded subject: {currentSubject?.SubjectCode} - {currentSubject?.Name}");
            
            // Load topics for this subject
            topics = await TopicService.GetTopicsBySubjectAsync(currentSubjectId.Value);
            // Only show active topics
            topics = topics.Where(t => t.IsActive).ToList();
            Console.WriteLine($"[Topics] Loaded {topics.Count} topics");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Topics] Error loading subject and topics: {ex.Message}");
            topics = new List<TopicVM>();
        }
    }

    // Modal state
    private bool ShowTutorModal = false;
    private IBrowserFile? SelectedFile;
    private string SelectError = string.Empty;
    private const long MaxBytes = 10 * 1024 * 1024; // 10 MB

    void OpenTutorModal()
    {
        ShowTutorModal = true;
        SelectedFile = null;
        SelectError = string.Empty;
    }

    void CloseTutorModal()
    {
        ShowTutorModal = false;
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectError = string.Empty;
        SelectedFile = null;

        var file = e.File;
        if (file is null)
        {
            SelectError = "No file selected.";
            return;
        }

        if (!(file.ContentType?.Contains("pdf", StringComparison.OrdinalIgnoreCase) ?? false) &&
            !file.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
        {
            SelectError = "Please choose a PDF file.";
            return;
        }

        if (file.Size > MaxBytes)
        {
            SelectError = "File is too large. Max 10 MB.";
            return;
        }

        SelectedFile = file;
    }

    private async Task OnDrop(DragEventArgs e)
    {
        // Drop handling placeholder
        await Task.CompletedTask;
    }

    private async Task SendTranscript()
    {
        if (SelectedFile == null) return;

        try
        {
            // Get current user info
            var currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                SelectError = "Please log in to submit an application.";
                return;
            }

            // First, upload the transcript file
            var formData = new MultipartFormDataContent();
            formData.Add(new StreamContent(SelectedFile.OpenReadStream(10 * 1024 * 1024)), "File", SelectedFile.Name);
            formData.Add(new StringContent($"transcript_{currentUser.UserId}_{DateTime.Now:yyyyMMdd_HHmmss}"), "Name");

            var uploadResponse = await Http.PostAsync("api/file/upload-transcript", formData);
            
            if (!uploadResponse.IsSuccessStatusCode)
            {
                SelectError = "Failed to upload transcript. Please try again.";
                return;
            }

            var uploadResult = await uploadResponse.Content.ReadFromJsonAsync<dynamic>();
            var transcriptPath = uploadResult?.GetProperty("filePath").GetString();

            if (string.IsNullOrEmpty(transcriptPath))
            {
                SelectError = "Failed to get transcript file path.";
                return;
            }

            var applicationInput = new TutorApplicationInput
            {
                UserId = currentUser.UserId,
                PhoneNum = currentUser.PhoneNum,
                StudentNo = currentUser.StudentNo,
                Major = currentUser.Program,
                YearOfStudy = !string.IsNullOrEmpty(currentUser.Year) && int.TryParse(currentUser.Year, out int year) ? year : null,
                MinRequiredGrade = 65, // Default minimum grade
                TranscriptPath = transcriptPath
            };

            var result = await TutorAppService.SubmitApplicationAsync(applicationInput);
            
            if (result.Success)
            {
                ShowTutorModal = false;
                SelectedFile = null;
                SelectError = string.Empty;
                // You could show a success message here
            }
            else
            {
                SelectError = result.Message;
            }
        }
        catch (Exception ex)
        {
            SelectError = $"Error submitting application: {ex.Message}";
        }
    }

    private static string HumanSize(long bytes)
    {
        double b = bytes;
        string[] u = { "B", "KB", "MB", "GB" };
        int i = 0;
        while (b >= 1024 && i < u.Length - 1) { b /= 1024; i++; }
        return $"{b:0.#} {u[i]}";
    }
}

<style>
    /* ===== Tokens (your palette) ===== */
    :root {
        --bg: #FFFFFF;
        --nav: #DBE4EE;
        --ink: #2D3034;
        --teal: #1B998B;
        --orange: #F17300;
        --rose: #AD1F54; /* active pill */
        --panel-ring: color-mix(in oklab, var(--ink) 10%, white);
        --container: min(1200px, 92vw);
        --radius: 1.25rem;
        --shadow-1: 0 6px 18px rgba(0,0,0,.06);
    }

    @@import url('https://fonts.googleapis.com/css2?family=Lexend:wght@400;600;800&family=Outfit:wght@700;800&display=swap');

    *, *::before, *::after {
        box-sizing: border-box
    }

    html, body {
        height: 100%
    }

    body {
        margin: 0;
        background: var(--bg);
        color: var(--ink);
        font-family: "Lexend", system-ui, -apple-system, "Segoe UI", Roboto, Arial, sans-serif;
        line-height: 1.45;
    }

    h1 {
        font-family: "Outfit", system-ui, -apple-system, "Segoe UI", Roboto, Arial, sans-serif
    }

    /* ===== Header ===== */
    .nav {
        background: var(--nav);
        border-bottom: 1px solid var(--panel-ring)
    }

    .container {
        width: var(--container);
        margin-inline: auto;
        padding-inline: clamp(12px,3vw,24px)
    }

    .nav-row {
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 16px
    }

    .brand {
        display: flex;
        align-items: center;
        gap: 10px;
        text-decoration: none;
        color: var(--ink)
    }

    .brand-text {
        font-weight: 800;
        font-size: clamp(18px,2.1vw,24px)
    }

    .hamburger {
        background: none;
        border: 0;
        cursor: pointer;
        width: 40px;
        height: 34px;
        display: grid;
        place-items: center
    }

        .hamburger span {
            display: block;
            width: 26px;
            height: 3px;
            background: var(--ink);
            border-radius: 8px
        }

            .hamburger span + span {
                margin-top: 5px
            }

    /* ===== Page top ===== */
    .page-inner {
        padding-block: clamp(14px, 3.6vw, 24px)
    }

    .heading-row {
        display: grid;
        grid-template-columns: 1fr auto 1fr; /* button | title | search */
        align-items: center;
        gap: 12px;
    }

    /* orange pill button (matches your screenshot) */
    .btn-become {
        justify-self: start;
        background: var(--orange);
        color: #fff;
        border: none;
        border-radius: 10px;
        height: 38px;
        padding: 0 16px;
        font-weight: 800;
        cursor: pointer;
        box-shadow: 0 6px 18px rgba(0,0,0,.06);
    }

        .btn-become:hover {
            filter: brightness(0.96);
            transform: translateY(-1px);
        }

        .btn-become:active {
            transform: translateY(0);
        }

    .title {
        justify-self: center;
        font-size: clamp(20px, 3.3vw, 32px);
        font-weight: 800;
        letter-spacing: .3px;
    }

    .search {
        justify-self: end;
        display: flex;
        align-items: center;
        gap: 8px;
        background: #fff;
        border: 1px solid var(--panel-ring);
        border-radius: 999px;
        padding: 8px 12px;
        min-width: 170px;
        box-shadow: inset 0 0 0 1px rgba(0,0,0,.04);
    }

        .search input {
            border: 0;
            outline: none;
            font: inherit;
            color: var(--ink);
            width: 120px
        }

    /* ===== Pill grid ===== */
    .pill-grid {
        margin-top: 12px;
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 14px 28px; /* tighter rows, wider columns like screenshot */
    }

    .pill {
        display: flex;
        align-items: center;
        gap: 10px;
        height: 42px;
        padding: 0 14px;
        border-radius: 14px;
        text-decoration: none;
        color: var(--ink);
        background: color-mix(in oklab, var(--ink) 2.5%, white);
        border: 1px solid var(--panel-ring);
        box-shadow: var(--shadow-1);
        font-weight: 700;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

        .pill .num {
            display: inline-grid;
            place-items: center;
            min-width: 22px;
            height: 22px;
            padding-inline: 2px;
            border-radius: 999px;
            background: color-mix(in oklab, var(--ink) 12%, white);
            color: #fff;
            font-size: .8rem;
        }
        /* Active first pill (rose) */
        .pill.active {
            background: var(--rose);
            color: #fff;
            border-color: color-mix(in oklab, var(--rose) 70%, black);
        }

        .pill.active .num {
            background: #fff;
            color: var(--rose);
        }

    .no-topics {
        grid-column: 1 / -1;
        text-align: center;
        padding: 2rem;
        color: #666;
        font-style: italic;
    }

    /* ===== Modal (namespaced .tm-*) ===== */
    .tm-backdrop {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,.35);
        z-index: 50;
        animation: tmFade .12s ease;
    }

    .tm-modal {
        position: fixed;
        z-index: 60;
        top: 50%;
        left: 50%;
        transform: translate(-50%,-50%);
        width: min(720px, 92vw);
        background: #fff;
        border-radius: 14px;
        border: 1px solid var(--panel-ring);
        box-shadow: 0 20px 60px rgba(0,0,0,.20);
        animation: tmPop .18s ease;
    }

    .tm-head {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 14px 16px;
        border-bottom: 1px solid var(--panel-ring);
        background: #f7f9fc;
    }

        .tm-head h3 {
            margin: 0;
            font-weight: 800;
        }

    .tm-x {
        border: none;
        background: transparent;
        font-size: 22px;
        line-height: 1;
        cursor: pointer;
        color: #555;
    }

    .tm-body {
        padding: 16px;
        display: grid;
        gap: 12px;
    }

    .tm-drop {
        border: 1.5px dashed #c9d2dc;
        border-radius: 12px;
        padding: 18px;
        background: #fbfdff;
    }

    .tm-drop-inner {
        display: flex;
        align-items: center;
        gap: 14px;
    }

    .tm-text {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

        .tm-text strong {
            font-weight: 800;
        }

        .tm-text span {
            color: #6b7280;
            font-size: .95rem;
        }

    .tm-file-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        padding: 8px 12px;
        border-radius: 10px;
        background: #eef3f9;
        border: 1px solid var(--panel-ring);
        cursor: pointer;
        font-weight: 800;
        width: max-content;
        margin-top: 4px;
        position: relative;
        overflow: hidden;
    }

        .tm-file-btn input[type="file"] {
            position: absolute;
            inset: 0;
            opacity: 0;
            cursor: pointer;
            width: 100%;
            height: 100%;
        }

    .tm-help {
        color: #6b7280
    }

    .tm-error {
        color: #b42318;
        background: #ffece8;
        border: 1px solid #ffd4cd;
        padding: 8px 10px;
        border-radius: 10px;
        font-weight: 700;
    }

    .tm-preview {
        display: flex;
        align-items: center;
        gap: 10px;
        border: 1px solid var(--panel-ring);
        background: #fff;
        border-radius: 10px;
        padding: 10px 12px;
    }

    .tm-filemeta {
        flex: 1 1 auto;
        min-width: 0;
    }

    .tm-name {
        font-weight: 800;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .tm-size {
        color: #6b7280;
        font-size: .92rem;
    }

    .tm-remove {
        border: 1px solid var(--panel-ring);
        background: #fff;
        padding: 6px 10px;
        border-radius: 10px;
        font-weight: 800;
        cursor: pointer;
    }

    .tm-foot {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        padding: 12px 16px;
        border-top: 1px solid var(--panel-ring);
        background: #fafbfe;
    }

    .tm-btn {
        background: #fff;
        border: 1px solid var(--panel-ring);
        border-radius: 10px;
        padding: 8px 12px;
        font-weight: 800;
        cursor: pointer;
    }

    .tm-send {
        background: var(--rose);
        color: #fff;
        border: none;
    }

        .tm-send:disabled {
            filter: grayscale(1) brightness(.95);
            cursor: not-allowed;
        }

    @@keyframes tmPop {
        from {
            opacity: 0;
            transform: translate(-50%,-46%);
        }

        to {
            opacity: 1;
            transform: translate(-50%,-50%);
        }
    }

    @@keyframes tmFade {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    /* ===== Responsive ===== */
    @@media (max-width: 980px) {
        .pill-grid {
            grid-template-columns: repeat(2, 1fr)
        }
    }

    @@media (max-width: 560px) {
        .brand-text {
            display: none
        }

        .heading-row {
            grid-template-columns: 1fr;
        }

        .btn-become {
            justify-self: start
        }

        .title {
            justify-self: start
        }

        .search {
            justify-self: start;
            width: 100%
        }

        .pill-grid {
            grid-template-columns: 1fr
        }
    }
</style>
