@page "/login"
@layout NavigationForLanding
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Nav

<main class="auth-shell">
    <section class="card">
        <h1>Welcome back</h1>
        <p class="muted">Log in to your CampusLearn account.</p>

        <EditForm Model="@model" OnValidSubmit="LoginAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <label class="f">
                <span>Email</span>
                <InputText class="input" @bind-Value="model.Email" type="email" />
            </label>

            <label class="f">
                <span>Password</span>
                <InputText class="input" @bind-Value="model.Password" type="password" />
            </label>

            <div class="row">
                <label class="check">
                    <InputCheckbox @bind-Value="model.RememberMe" />
                    <span>Remember me</span>
                </label>
                <a class="link" href="/forgot">Forgot password?</a>
            </div>

            @if (!string.IsNullOrEmpty(error))
            {
                <div class="error">@error</div>
            }

            <button class="btn primary" disabled="@isBusy">
                @(isBusy ? "Signing in…" : "Sign in")
            </button>

            <p class="tiny">
                New here? <a href="/signup">Create an account</a>
            </p>
        </EditForm>
    </section>
</main>

<style>
    .auth-shell {
        min-height: calc(100dvh - 88px);
        display: grid;
        place-items: center;
        padding: 20px
    }

    .card {
        width: min(560px,92vw);
        background: #fff;
        border: 1px solid #e5e9f0;
        border-radius: 18px;
        box-shadow: 0 10px 28px rgba(0,0,0,.06);
        padding: 20px
    }

    h1 {
        margin: 0 0 4px;
        font-weight: 900
    }

    .muted {
        color: #667085;
        margin: 0 0 14px
    }

    .f {
        display: grid;
        gap: 6px;
        margin: 10px 0
    }

        .f > span {
            font-weight: 800;
            color: #6a717c
        }

    .input {
        width: 100%;
        border: 1.5px solid #d7dee8;
        border-radius: 12px;
        padding: 12px 14px;
        font-weight: 700
    }

    .row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 8px 0
    }

    .check {
        display: flex;
        align-items: center;
        gap: 8px
    }

    .link {
        font-weight: 800
    }

    .btn.primary {
        margin-top: 6px;
        background: #1B998B;
        color: #fff;
        border: 0;
        border-radius: 14px;
        padding: 12px 18px;
        font-weight: 900;
        cursor: pointer
    }

    .btn[disabled] {
        opacity: .6;
        cursor: not-allowed
    }

    .error {
        background: #fee2e2;
        color: #991b1b;
        border: 1px solid #fecaca;
        border-radius: 10px;
        padding: 8px 12px;
        margin: 8px 0;
        font-weight: 700
    }
</style>

@code {
    private LoginModel model = new();
    private bool isBusy = false;
    private string? error;

    private async Task LoginAsync()
    {
        error = null; isBusy = true;
        try
        {
            var payload = new { email = model.Email, password = model.Password, rememberMe = model.RememberMe };
            var resp = await Http.PostAsJsonAsync("api/Auth/login", payload);

            if (resp.IsSuccessStatusCode)
            {
                // You can store tokens/cookies here if your API returns them.
                Nav.NavigateTo("/dashboard", forceLoad: true);
                return;
            }

            var msg = await resp.Content.ReadAsStringAsync();
            error = string.IsNullOrWhiteSpace(msg) ? "Invalid email or password." : msg;
        }
        catch (Exception ex)
        {
            error = $"Could not sign in: {ex.Message}";
        }
        finally { isBusy = false; }
    }

    private class LoginModel
    {
        [Required, EmailAddress] public string Email { get; set; } = "";
        [Required] public string Password { get; set; } = "";
        public bool RememberMe { get; set; } = true;
    }
}
