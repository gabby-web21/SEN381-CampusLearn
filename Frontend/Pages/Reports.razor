@page "/admin/reports"
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http

<PageTitle>Admin · Reports</PageTitle>

<section class="admin-page">
    <header class="head">
        <div class="stack">
            <h1 class="title">Reports</h1>
            <p class="sub">Review community reports. <strong>✓</strong> keeps content, <strong>✕</strong> removes (soft-hide).</p>
        </div>

        <div class="actions">
            <input class="search" placeholder="Search reason, details, reporter…"
                   @bind="Search" @bind:event="oninput" />
            <select class="filter" @bind="TypeFilter">
                <option value="">All types</option>
                <option value="topic">Topics</option>
                <option value="reply">Replies</option>
                <option value="resource">Resources</option>
                <option value="comment">Comments</option>
                <option value="messages">Messages</option>
                <option value="forum">Forum</option>
                <option value="tutoring">Tutoring</option>
            </select>
            <select class="filter" @bind="ViewFilter">
                <option value="reports">Reports</option>
                <option value="banned">Banned Users</option>
            </select>
            <label class="chk">
                <input type="checkbox" @bind="OpenOnly" />
                <span>Open only</span>
            </label>
            <button class="btn btn-secondary" @onclick="LoadReports">Refresh</button>
        </div>
    </header>

    @if (IsLoading)
    {
        <div class="state empty">Loading reports...</div>
    }
    else if (ViewFilter == "banned")
    {
        @if (BannedUsers.Count == 0)
        {
            <div class="state empty">No banned users found.</div>
        }
        else
        {
            <section class="group">
                <h2 class="group__title">Banned Users <span class="badge">@BannedUsers.Count</span></h2>
                <div class="grid">
                    @foreach (var user in BannedUsers)
                    {
                        <article class="card banned">
                            <button class="btn-icon unban" aria-label="Unban User" title="Unban this user"
                                    @onclick="@(() => UnbanUser(user.UserId))">
                                ✓
                            </button>
                            
                            <header class="card__head">
                                <div class="meta">
                                    <h3 class="card__title">@user.FirstName @user.LastName</h3>
                                    <p class="card__sub">
                                        <span>Banned on @user.BannedAt?.ToString("dd MMM yyyy, HH:mm")</span>
                                        <span>· Reason: @user.BanReason</span>
                                    </p>
                                </div>
                            </header>
                            
                            <div class="body">
                                <ul class="kv">
                                    <li><b>Email:</b> @user.Email</li>
                                    <li><b>Ban Reason:</b> @user.BanReason</li>
                                    <li><b>Banned By:</b> Admin #@user.BannedBy</li>
                                </ul>
                            </div>
                        </article>
                    }
                </div>
            </section>
        }
    }
    else if (!AnyVisible)
    {
        <div class="state empty">No reports match your filters.</div>
    }
    else
    {
        @foreach (var kind in KindOrder)
        {
            var list = Filtered.Where(r => r.Kind == kind).ToList();
            if (list.Count == 0) { continue; }

            <section class="group">
                <h2 class="group__title">@TitleFor(kind) <span class="badge">@list.Count</span></h2>

                <div class="grid">
                    @foreach (var r in list)
                    {
                        <article class="card @(CssFor(r))">
                            <!-- Corner actions; disabled once resolved -->
                            <button class="btn-icon decline" aria-label="Cancel" title="Cancel report"
                                    disabled="@r.Dismissed"
                                    @onclick="@(() => CancelReport(r.ContentReportId))">
                                ✕
                            </button>
                            <button class="btn-icon ban" aria-label="Ban User" title="Ban the reported user"
                                    disabled="@r.Dismissed"
                                    @onclick="@(() => BanUser(r.ContentReportId, r.ReportedUserId))">
                                Ban
                            </button>

                            <header class="card__head">
                                <div class="meta">
                                    <h3 class="card__title">@r.Context</h3>
                                    <p class="card__sub">
                                        <span class="pill">@r.Kind</span>
                                        <span>· Reported by @r.ReporterName</span>
                                        <span>· @r.CreatedAt.ToLocalTime().ToString("dd MMM yyyy, HH:mm")</span>

                                        @if (r.Dismissed)
                                        {
                                            <span class="status @(r.Resolution == "remove" ? "remove" : "keep")">
                                                @(r.Resolution == "remove" ? "Removed" : "Kept")
                                            </span>
                                        }
                                    </p>
                                </div>
                            </header>

                            <div class="body">
                                <ul class="kv">
                                    <li><b>Reason:</b> @r.Reason</li>
                                    @if (!string.IsNullOrWhiteSpace(r.Details))
                                    {
                                        <li><b>Details:</b> @r.Details</li>
                                    }
                                </ul>

                                @if (!string.IsNullOrWhiteSpace(r.Snippet))
                                {
                                    <blockquote class="snippet">@r.Snippet</blockquote>
                                }
                            </div>

                            @if (!string.IsNullOrWhiteSpace(r.TargetUrl))
                            {
                                <footer class="foot">
                                    <a class="go" href="@r.TargetUrl">Open location →</a>
                                </footer>
                            }
                        </article>
                    }
                </div>
            </section>
        }
    }
</section>

@code {
    // ---------- Filters ----------
    private string Search = string.Empty;
    private string TypeFilter = string.Empty;
    private string ViewFilter = "reports";
    private bool OpenOnly = true;

    // ---------- Data ----------
    private List<ReportVM> Items = new();
    private List<BannedUserVM> BannedUsers = new();
    private bool IsLoading = true;

    private string[] KindOrder = new[] { "topic", "reply", "resource", "comment", "messages", "forum", "tutoring" };

    private IEnumerable<ReportVM> Filtered =>
      Items.Where(r =>
        {
            var typeMatch = string.IsNullOrWhiteSpace(TypeFilter) || r.Kind == TypeFilter;
            var openMatch = !OpenOnly || !r.Dismissed;
            var searchMatch = string.IsNullOrWhiteSpace(Search) ||
              ($"{r.Reason} {r.Details} {r.Snippet} {r.ReporterName} {r.Context}"
               .Contains(Search, StringComparison.OrdinalIgnoreCase));
            
            Console.WriteLine($"Report {r.ContentReportId}: TypeMatch={typeMatch} (filter='{TypeFilter}', kind='{r.Kind}'), OpenMatch={openMatch} (OpenOnly={OpenOnly}, Dismissed={r.Dismissed}), SearchMatch={searchMatch}");
            
            return typeMatch && openMatch && searchMatch;
        });

    private bool AnyVisible => Filtered.Any();

    protected override async Task OnInitializedAsync()
    {
        await LoadReports();
    }

    private async Task LoadReports()
    {
        try
        {
            IsLoading = true;
            
            if (ViewFilter == "banned")
            {
                await LoadBannedUsers();
            }
            else
            {
                await LoadReportData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadReportData()
    {
        Console.WriteLine("Loading reports from API...");
        var response = await Http.GetAsync("https://localhost:7228/api/MessageReport/admin");
        
        if (response.IsSuccessStatusCode)
        {
            var jsonContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Raw JSON response: {jsonContent}");
            
            var jsonDocument = JsonDocument.Parse(jsonContent);
            var root = jsonDocument.RootElement;
            var reports = root.GetProperty("reports");
            var reportCount = reports.GetArrayLength();
            Console.WriteLine($"Received {reportCount} reports from API");
            
            Items.Clear();
            
            foreach (var report in reports.EnumerateArray())
            {
                var reportVM = new ReportVM
                {
                    ContentReportId = report.GetProperty("id").GetInt32(),
                    Kind = report.GetProperty("messageType").GetString() ?? "",
                    ContentId = report.GetProperty("messageId").GetString()?.GetHashCode() ?? 0,
                    Reason = report.GetProperty("reason").GetString() ?? "",
                    Details = report.TryGetProperty("details", out JsonElement details) ? details.GetString() : null,
                    ReporterName = report.GetProperty("reporterName").GetString() ?? "",
                    CreatedAt = report.GetProperty("createdAt").GetDateTime(),
                    Dismissed = report.GetProperty("isResolved").GetBoolean(),
                    Resolution = report.TryGetProperty("resolution", out JsonElement resolution) ? resolution.GetString() : null,
                    TargetUrl = report.TryGetProperty("contextUrl", out JsonElement contextUrl) ? contextUrl.GetString() : null,
                    Context = GetContextForMessageType(report.GetProperty("messageType").GetString() ?? "", report.GetProperty("senderName").GetString() ?? ""),
                    Snippet = report.GetProperty("messageContent").GetString() ?? "",
                    ReportedUserId = report.TryGetProperty("reportedUserId", out JsonElement reportedUserId) ? reportedUserId.GetInt32() : 0
                };
                
                Items.Add(reportVM);
                Console.WriteLine($"Added report: {reportVM.Context} - {reportVM.Snippet}");
            }
            
            Console.WriteLine($"Total reports loaded: {Items.Count}");
            Console.WriteLine($"Filtered reports count: {Filtered.Count()}");
            Console.WriteLine($"AnyVisible: {AnyVisible}");
        }
        else
        {
            Console.WriteLine($"API call failed with status: {response.StatusCode}");
        }
    }

    private async Task LoadBannedUsers()
    {
        Console.WriteLine("🔍 [FRONTEND DEBUG] Starting LoadBannedUsers...");
        Console.WriteLine("🔍 [FRONTEND DEBUG] Making API call to: https://localhost:7228/api/MessageReport/banned-users");
        
        try
        {
            var response = await Http.GetAsync("https://localhost:7228/api/MessageReport/banned-users");
            Console.WriteLine($"🔍 [FRONTEND DEBUG] API response status: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                var jsonContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"🔍 [FRONTEND DEBUG] Raw JSON response: {jsonContent}");
                
                var jsonDocument = JsonDocument.Parse(jsonContent);
                var root = jsonDocument.RootElement;
                
                Console.WriteLine($"🔍 [FRONTEND DEBUG] Root element keys: {string.Join(", ", root.EnumerateObject().Select(p => p.Name))}");
                
                if (root.TryGetProperty("bannedUsers", out JsonElement bannedUsers))
                {
                    var userCount = bannedUsers.GetArrayLength();
                    Console.WriteLine($"🔍 [FRONTEND DEBUG] Found {userCount} banned users in response");
                    
                    BannedUsers.Clear();
                    
                    foreach (var user in bannedUsers.EnumerateArray())
                    {
                        Console.WriteLine($"🔍 [FRONTEND DEBUG] Processing user: {user}");
                        
                        var bannedUserVM = new BannedUserVM
                        {
                            UserId = user.GetProperty("userId").GetInt32(),
                            FirstName = user.GetProperty("firstName").GetString() ?? "",
                            LastName = user.GetProperty("lastName").GetString() ?? "",
                            Email = user.GetProperty("email").GetString() ?? "",
                            BannedAt = user.TryGetProperty("bannedAt", out JsonElement bannedAt) ? bannedAt.GetDateTime() : null,
                            BannedBy = user.TryGetProperty("bannedBy", out JsonElement bannedBy) ? bannedBy.GetInt32() : null,
                            BanReason = user.TryGetProperty("banReason", out JsonElement banReason) ? banReason.GetString() : ""
                        };
                        
                        BannedUsers.Add(bannedUserVM);
                        Console.WriteLine($"🔍 [FRONTEND DEBUG] Added banned user: {bannedUserVM.FirstName} {bannedUserVM.LastName} (ID: {bannedUserVM.UserId})");
                    }
                    
                    Console.WriteLine($"🔍 [FRONTEND DEBUG] Total banned users loaded: {BannedUsers.Count}");
                }
                else
                {
                    Console.WriteLine("❌ [FRONTEND DEBUG] No 'bannedUsers' property found in response");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ [FRONTEND DEBUG] API call failed with status: {response.StatusCode}");
                Console.WriteLine($"❌ [FRONTEND DEBUG] Error content: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ [FRONTEND DEBUG] Exception in LoadBannedUsers: {ex.Message}");
            Console.WriteLine($"❌ [FRONTEND DEBUG] Stack trace: {ex.StackTrace}");
        }
    }

    private string GetContextForMessageType(string messageType, string senderName)
    {
        return messageType switch
        {
            "messages" => $"Private Messages · From {senderName}",
            "forum" => $"Forum Message · From {senderName}",
            "tutoring" => $"Tutoring Session · From {senderName}",
            _ => $"{messageType} · From {senderName}"
        };
    }

    private static string TitleFor(string kind) => kind switch
    {
        "topic" => "Topics",
        "reply" => "Replies",
        "resource" => "Resources",
        "comment" => "Comments",
        "messages" => "Private Messages",
        "forum" => "Forum Messages",
        "tutoring" => "Tutoring Messages",
        _ => kind
    };

    private static string CssFor(ReportVM r)
      => r.Dismissed ? (r.Resolution == "remove" ? "state-remove" : "state-keep") : string.Empty;

    // ---------- Actions ----------
    private async Task Keep(long id)
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"https://localhost:7228/api/MessageReport/resolve/{id}", new
            {
                AdminId = 1, // TODO: Get actual admin ID from auth
                Resolution = "approved"
            });

            if (response.IsSuccessStatusCode)
            {
                var r = Items.FirstOrDefault(x => x.ContentReportId == id);
                if (r is not null) { r.Dismissed = true; r.Resolution = "keep"; }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resolving report: {ex.Message}");
        }
    }

    private async Task CancelReport(int reportId)
    {
        try
        {
            Console.WriteLine($"Cancelling report {reportId}");
            var response = await Http.PostAsync($"https://localhost:7228/api/MessageReport/cancel/{reportId}", 
                JsonContent.Create(new { adminId = 1 }));
            
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Report {reportId} cancelled successfully");
                await LoadReports();
            }
            else
            {
                Console.WriteLine($"Failed to cancel report {reportId}: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cancelling report: {ex.Message}");
        }
    }

    private async Task BanUser(int reportId, int userId)
    {
        try
        {
            Console.WriteLine($"Banning user {userId} from report {reportId}");
            var response = await Http.PostAsync($"https://localhost:7228/api/MessageReport/ban-user", 
                JsonContent.Create(new { userId = userId, adminId = 1, reason = "Reported for inappropriate behavior" }));
            
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"User {userId} banned successfully");
                // Switch to banned users view to show the newly banned user
                ViewFilter = "banned";
                await LoadReports();
            }
            else
            {
                Console.WriteLine($"Failed to ban user {userId}: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error banning user: {ex.Message}");
        }
    }

    private async Task UnbanUser(int userId)
    {
        try
        {
            Console.WriteLine($"Unbanning user {userId}");
            var response = await Http.PostAsync($"https://localhost:7228/api/MessageReport/unban-user", 
                JsonContent.Create(new { userId = userId, adminId = 1 }));
            
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"User {userId} unbanned successfully");
                await LoadReports();
            }
            else
            {
                Console.WriteLine($"Failed to unban user {userId}: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error unbanning user: {ex.Message}");
        }
    }

    // ---------- Model ----------
    private class ReportVM
    {
        public int ContentReportId { get; set; }
        public string Kind { get; set; } = "";
        public long ContentId { get; set; }
        public string Reason { get; set; } = "";
        public string? Details { get; set; }
        public string ReporterName { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public bool Dismissed { get; set; }
        public string? Resolution { get; set; } // "keep" | "remove" | null
        public string? TargetUrl { get; set; }
        public string? Context { get; set; }
        public string? Snippet { get; set; }
        public int ReportedUserId { get; set; }
    }

    private class BannedUserVM
    {
        public int UserId { get; set; }
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string Email { get; set; } = "";
        public DateTime? BannedAt { get; set; }
        public int? BannedBy { get; set; }
        public string BanReason { get; set; } = "";
    }
}

<style>
    /* Match dashboard typography/feel */
    .admin-page {
        --ink: #2D3034;
        --mist: #DBE4EE;
        --bg: #fff;
        --ring: color-mix(in oklab, var(--ink) 12%, white);
        --radius: 1.25rem;
        --shadow: 0 8px 22px rgba(0,0,0,.06);
        color: var(--ink);
        background: var(--bg);
        width: min(1200px,92vw);
        margin-inline: auto;
        padding: clamp(16px,4vw,28px);
        font-family: system-ui,-apple-system,Segoe UI,Inter,Roboto,Arial,sans-serif;
    }

    .title {
        margin: 0 0 6px;
        font-weight: 900;
        letter-spacing: .2px;
        font-size: clamp(28px,4.2vw,56px)
    }

    .sub {
        margin: 0;
        opacity: .75
    }

    .head {
        display: flex;
        gap: 1rem;
        align-items: flex-end;
        justify-content: space-between;
        flex-wrap: wrap
    }

    .stack {
        display: flex;
        flex-direction: column;
        gap: .25rem
    }

    .actions {
        display: flex;
        gap: .5rem;
        align-items: center
    }

    /* Controls */
    .search {
        flex: 0 0 320px;
        background: #fff;
        border: 1px solid var(--ring);
        border-radius: 999px;
        padding: .65rem 1rem
    }

    .filter {
        background: #fff;
        border: 1px solid var(--ring);
        border-radius: .6rem;
        padding: .6rem .75rem
    }

    .chk {
        display: flex;
        align-items: center;
        gap: .45rem;
        font-size: .95rem
    }

    /* States */
    .state {
        padding: 1rem;
        border-radius: var(--radius);
        box-shadow: var(--shadow)
    }

        .state.empty {
            background: #f1f4f9;
            border: 1px dashed #d8dee9;
            color: #6b7280;
            text-align: center
        }

    /* Group */
    .group {
        margin-top: 1.2rem
    }

    .group__title {
        display: flex;
        align-items: center;
        gap: .5rem;
        margin: .25rem 0 0 0;
        font-size: 1.1rem;
        font-weight: 800
    }

    .badge {
        display: inline-block;
        min-width: 1.6rem;
        text-align: center;
        font-weight: 800;
        font-size: .85rem;
        padding: .1rem .45rem;
        border-radius: 999px;
        background: #eef2f7;
        border: 1px solid var(--ring)
    }

    /* Grid & Cards */
    .grid {
        display: grid;
        grid-template-columns: repeat(2,minmax(300px,1fr));
        gap: clamp(16px, 3vw, 28px) clamp(20px, 4vw, 60px);
        padding-top: clamp(8px, 2vw, 16px)
    }

    @@media (max-width:760px) {
        .grid {
            grid-template-columns: 1fr
        }
    }

    /* Corner buttons never cover text => extra horizontal padding */
    .card {
        position: relative;
        background: var(--mist);
        border: 1px solid var(--ring);
        border-radius: 20px;
        box-shadow: var(--shadow);
        padding: 1rem calc(1.25rem + 42px); /* space for 36px corner buttons */
        display: flex;
        flex-direction: column;
        gap: .75rem;
    }

    .card__head {
        display: flex;
        gap: .75rem;
        align-items: center
    }

    .meta {
        min-width: 0
    }

    .card__title {
        margin: 0;
        font-size: 1.02rem;
        font-weight: 900;
        letter-spacing: .2px
    }

    .card__sub {
        margin: .2rem 0 0 0;
        opacity: .85;
        font-size: .95rem
    }

    .pill {
        display: inline-block;
        margin-right: .35rem;
        padding: .06rem .45rem;
        border-radius: 999px;
        background: #fff;
        border: 1px solid var(--ring);
        font-weight: 700;
        font-size: .8rem
    }

    /* Resolved state coloring */
    .card.state-keep {
        background: #E8F6F2;
        border-color: #B9E3DB
    }

    .card.state-remove {
        background: #FBE8EE;
        border-color: #F1B7C7
    }

    .status {
        margin-left: .5rem;
        padding: .06rem .5rem;
        border-radius: 999px;
        font-weight: 800;
        font-size: .8rem;
        border: 1px solid var(--ring)
    }

        .status.keep {
            background: #E8F6F2;
            color: #0f5b51;
            border-color: #B9E3DB
        }

        .status.remove {
            background: #FBE8EE;
            color: #7D1033;
            border-color: #F1B7C7
        }

    .body {
        display: flex;
        flex-direction: column;
        gap: .5rem
    }

    .kv {
        list-style: none;
        padding: 0;
        margin: 0;
        display: grid;
        gap: .25rem
    }

        .kv b {
            margin-right: .25rem
        }

    .snippet {
        margin: .45rem 0 0 0;
        padding-left: .75rem;
        border-left: 3px solid var(--ring);
        opacity: .95;
        font-style: italic
    }

    .foot {
        margin-top: .05rem
    }

    .go {
        font-weight: 800;
        color: inherit;
        text-decoration: none;
        border-bottom: 2px solid rgba(45,48,52,.25);
        padding-bottom: 1px
    }

        .go:hover {
            filter: brightness(.9)
        }

    /* Corner action buttons */
    .btn-icon {
        position: absolute;
        top: .55rem;
        width: 36px;
        height: 36px;
        border: none;
        border-radius: 50%;
        font-weight: 900;
        cursor: pointer;
        color: #fff;
        display: grid;
        place-items: center;
        line-height: 1;
        box-shadow: 0 6px 16px rgba(0,0,0,.12)
    }

        .btn-icon.decline {
            left: .55rem;
            background: #AD1F54
        }

        .btn-icon.accept {
            right: .55rem;
            background: #1B998B
        }

        .btn-icon.ban {
            right: .55rem;
            background: #DC2626;
            font-size: .8rem;
        }

        .btn-icon.unban {
            right: .55rem;
            background: #059669;
            font-size: .8rem;
        }

        /* Disabled look when resolved */
        .btn-icon[disabled] {
            opacity: .45;
            filter: grayscale(.1);
            cursor: default;
            box-shadow: none
        }

        /* Banned user card styling */
        .card.banned {
            background: #FEF2F2;
            border-color: #FECACA;
        }
</style>
