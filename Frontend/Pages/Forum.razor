@page "/topichub/forum"
@page "/topichub/forum/{topicId:int}"
@layout TopicHubLayout
@using System.Net.Http.Json
@using Microsoft.AspNetCore.SignalR.Client
@using Frontend.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject Frontend.Services.AuthService AuthService

<section class="forum-scope forum">
    <h1 class="forum-title">
        <span class="code">@(topicTitle ?? $"Topic {TopicId}")</span>
        <span class="dot">•</span>
        <span class="label">Forum</span>
    </h1>

    <!-- Chat thread -->
    <div class="thread">
        @if (messages.Count == 0)
        {
            <p style="opacity:.6;font-weight:700;text-align:center;padding:20px;">No messages yet — start the discussion!</p>
        }
        else
        {
            @foreach (var msg in messages)
            {
                var role = "anon";
                if (msg.SenderName.Contains("Tutor", StringComparison.OrdinalIgnoreCase))
                    role = "tutor";
                else if (msg.SenderName.Contains("Admin", StringComparison.OrdinalIgnoreCase))
                    role = "admin";
                else if (!msg.SenderName.Equals("Anonymous", StringComparison.OrdinalIgnoreCase))
                    role = "student";

                <div class="msg @role" @onclick="() => ShowReportModal(msg)" style="cursor: pointer;">
                    <div class="avatar">@GetInitials(msg.SenderName)</div>
                    <div class="body">
                        <div class="meta">
                            <span class="name">@msg.SenderName</span>
                            <span class="time">@msg.CreatedAt.ToLocalTime().ToString("HH:mm")</span>
                        </div>

                        <div class="bubble">
                            @if (msg.IsFile && !string.IsNullOrEmpty(msg.Content))
                            {
                                var lowerUrl = msg.Content.ToLowerInvariant();
                                var lowerName = msg.FileName?.ToLowerInvariant() ?? "";

                                bool isImage =
                                lowerName.EndsWith(".png") ||
                                lowerName.EndsWith(".jpg") ||
                                lowerName.EndsWith(".jpeg") ||
                                lowerName.EndsWith(".gif") ||
                                lowerName.EndsWith(".bmp") ||
                                lowerUrl.Contains(".png") ||
                                lowerUrl.Contains(".jpg") ||
                                lowerUrl.Contains(".jpeg") ||
                                lowerUrl.Contains(".gif") ||
                                lowerUrl.Contains(".bmp");

                                if (isImage)
                                {
                                    <!-- 🖼️ Inline image preview -->
                                    <a href="@msg.Content" target="_blank" title="@msg.FileName">
                                        <img src="@msg.Content"
                                             alt="@msg.FileName"
                                             class="chat-image" />
                                    </a>
                                }
                                else
                                {
                                    <!-- 📎 File link -->
                                    <a href="@msg.Content" target="_blank" style="color:#fff;text-decoration:underline;">
                                        📎 @Path.GetFileNameWithoutExtension(msg.FileName ?? msg.Content)
                                    </a>
                                }
                            }
                            else
                            {
                                @msg.Content
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Composer -->
    <div class="composer">
        <InputFile OnChange="HandleFileSelected" style="display:none" id="fileInput" />
        <input type="text" class="field" placeholder="Type a message to the forum…" @bind="newMessage" @bind:event="oninput" />
        <label class="anon">
            <input type="checkbox" @bind="isAnonymous" />
            <span>Anonymous</span>
        </label>
        <button class="send" title="Send" @onclick="SendMessage">
            <svg viewBox="0 0 24 24" width="20" height="20" aria-hidden="true">
                <path d="M3 20v-5l9-3-9-3V4l18 8-18 8z" fill="currentColor" />
            </svg>
        </button>
        <button class="send" title="Upload" @onclick="TriggerFileUpload">
            <svg viewBox="0 0 24 24" width="20" height="20" aria-hidden="true">
                <path d="M5 20h14v-2H5v2zm7-18L5.33 9h3.84v4h6.66V9h3.84L12 2z" fill="currentColor" />
            </svg>
        </button>
    </div>
</section>

@code {
    [Parameter] public int TopicId { get; set; } = 1; // Default to 1 if no topicId provided
    
    private HubConnection? hubConnection;
    private List<ForumMessage> messages = new();
    private string newMessage = "";
    private bool isAnonymous = false;
    private int currentUserId;
    private string? topicTitle;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"[Forum] OnInitializedAsync - TopicId: {TopicId}");
        await InitializeForum();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine($"[Forum] OnParametersSetAsync - TopicId: {TopicId}");
        // Clear messages when TopicId changes
        messages.Clear();
        await InitializeForum();
    }

    private async Task InitializeForum()
    {
        var user = await AuthService.GetCurrentUserAsync();
        currentUserId = user.UserId;

        // Load topic title
        await LoadTopicTitle();

        await LoadMessages();

        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7228/forumHub"))
            .WithAutomaticReconnect()
            .Build();

        var uniqueForumId = GetUniqueForumId();
        hubConnection.On<ForumMessage>("ReceiveForumMessage", async (msg) =>
        {
            // Only add message if it's for the current forum
            if (msg.ForumId == uniqueForumId)
            {
                messages.Add(msg);
                await InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinForumGroup", uniqueForumId);
    }

    private async Task TriggerFileUpload() =>
        await JS.InvokeVoidAsync("triggerFileInput", "fileInput");

    private async Task LoadTopicTitle()
    {
        try
        {
            Console.WriteLine($"[Forum] Loading topic title for TopicId: {TopicId}");
            var topic = await Http.GetFromJsonAsync<TopicInfo>($"https://localhost:7228/api/topic/{TopicId}");
            if (topic != null)
            {
                topicTitle = topic.Title;
                Console.WriteLine($"[Forum] Loaded topic title: '{topicTitle}'");
            }
            else
            {
                Console.WriteLine($"[Forum] Topic response was null for TopicId: {TopicId}");
                topicTitle = $"Topic {TopicId}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Forum] Error loading topic title: {ex.Message}");
            topicTitle = $"Topic {TopicId}";
        }
    }

    private async Task<string> GetUserFullName(int id)
    {
        try
        {
            var profile = await Http.GetFromJsonAsync<UserProfile>($"https://localhost:7228/api/Profile/{id}");
            return $"{profile?.FirstName} {profile?.LastName}".Trim();
        }
        catch
        {
            return "Unknown";
        }
    }

    private async Task LoadMessages()
    {
        try
        {
            // Create unique forum ID by combining subject and topic
            var forumId = GetUniqueForumId();
            Console.WriteLine($"[Forum] Loading messages for ForumId: {forumId} (TopicId: {TopicId})");
            var result = await Http.GetFromJsonAsync<List<ForumMessage>>($"https://localhost:7228/api/ForumChat/{forumId}");
            if (result != null)
                messages = result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading messages: {ex.Message}");
        }
    }

    private int GetUniqueForumId()
    {
        // Extract subjectId from URL to create unique forum ID
        try
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var queryString = uri.Query;
            
            if (!string.IsNullOrEmpty(queryString) && queryString.Contains("subjectId="))
            {
                var cleanQuery = queryString.TrimStart('?');
                var subjectIdParam = cleanQuery.Split('&')
                    .FirstOrDefault(p => p.StartsWith("subjectId="))
                    ?.Split('=')[1];
                
                if (!string.IsNullOrEmpty(subjectIdParam) && int.TryParse(subjectIdParam, out int subjectId))
                {
                    // Create unique forum ID: subjectId * 10000 + topicId
                    // This ensures each topic in each subject has a unique forum ID
                    var uniqueForumId = subjectId * 10000 + TopicId;
                    Console.WriteLine($"[Forum] Generated unique ForumId: {uniqueForumId} (SubjectId: {subjectId}, TopicId: {TopicId})");
                    return uniqueForumId;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Forum] Error generating unique forum ID: {ex.Message}");
        }
        
        // Fallback to TopicId if we can't extract subjectId
        return TopicId;
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage))
            return;

        string senderName = "Anonymous";
        if (!isAnonymous)
            senderName = await GetUserFullName(currentUserId);

        var message = new ForumMessage
        {
            ForumId = GetUniqueForumId(),
            SenderId = currentUserId,
            SenderName = senderName,
            Content = newMessage,
            IsFile = false,
            CreatedAt = DateTime.UtcNow
        };

        await Http.PostAsJsonAsync("https://localhost:7228/api/ForumChat/send", message);
        newMessage = "";
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        var content = new MultipartFormDataContent();
        var stream = file.OpenReadStream(25 * 1024 * 1024);
        content.Add(new StreamContent(stream), "File", file.Name);

        var uploadResponse = await Http.PostAsync("https://localhost:7228/api/File/uploadfile", content);
        if (!uploadResponse.IsSuccessStatusCode)
        {
            Console.WriteLine("File upload failed.");
            return;
        }

        var fileInfo = await uploadResponse.Content.ReadFromJsonAsync<UploadedFile>();
        if (fileInfo == null) return;

        string senderName = isAnonymous ? "Anonymous" : await GetUserFullName(currentUserId);

        var msg = new ForumMessage
        {
            ForumId = GetUniqueForumId(),
            SenderId = currentUserId,
            SenderName = senderName,
            IsFile = true,
            FileId = fileInfo.FileId,
            FileName = fileInfo.FileName,
            Content = fileInfo.SignedUrl
        };

        await Http.PostAsJsonAsync("https://localhost:7228/api/ForumChat/send", msg);
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return "?";

        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        var initials = string.Join("", parts.Where(p => p.Length > 0).Select(p => p[0])).ToUpperInvariant();
        return initials.Length switch
        {
            0 => "?",
            <= 2 => initials,
            _ => initials.Substring(0, 2)
        };
    }

    public class ForumMessage
    {
        public int MessageId { get; set; }
        public int ForumId { get; set; }
        public int SenderId { get; set; }
        public string SenderName { get; set; } = "";
        public string Content { get; set; } = "";
        public bool IsFile { get; set; }
        public int? FileId { get; set; }
        public string? FileName { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class UploadedFile
    {
        public int FileId { get; set; }
        public string FileName { get; set; } = "";
        public string SignedUrl { get; set; } = "";
        public DateTime CreatedAt { get; set; }
    }

    public class UserProfile
    {
        public int Id { get; set; }
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
    }

    public class TopicInfo
    {
        public int TopicId { get; set; }
        public string Title { get; set; } = "";
        public string? Description { get; set; }
    }

    // Reporting functionality
    private bool showReportModal = false;
    private MessageReportData? reportData;

    private async Task ShowReportModal(ForumMessage message)
    {
        reportData = new MessageReportData
        {
            MessageId = message.MessageId.ToString(),
            MessageContent = message.Content ?? "",
            ReportedUserId = message.SenderId,
            SenderName = message.SenderName ?? "Unknown",
            MessageType = "forum",
            ContextUrl = Navigation.Uri
        };
        showReportModal = true;
        StateHasChanged();
    }

    private async Task OnReportSubmitted()
    {
        showReportModal = false;
        reportData = null;
        StateHasChanged();
    }
}

<!-- Report Modal -->
<ReportMessageModal IsVisible="showReportModal" 
                   IsVisibleChanged="(value) => showReportModal = value" 
                   ReportData="reportData" 
                   OnReportSubmitted="OnReportSubmitted" />

<style>
    .forum-scope {
        --ink: #1f2937;
        --muted: #6b7280;
        --panel: #ffffff;
        --ring: rgba(0,0,0,.12);
        --shadow: 0 10px 24px rgba(0,0,0,.08);
        --radius: 16px;
        --stud-a: #1D4ED8;
        --stud-b: #3B82F6;
        --tutor-a: #B45309;
        --tutor-b: #F59E0B;
        --admin-a: #F4C430;
        --admin-b: #FFD76A;
        --neutral: #e9eef6;
        --bg: #f2f5f8;
        font-family: "Lexend", system-ui, -apple-system, "Segoe UI", Inter, Roboto, Arial, sans-serif;
        color: var(--ink);
    }

    .forum {
        display: grid;
        grid-template-rows: auto 1fr auto;
        gap: 12px;
        padding: clamp(12px, 2.4vw, 18px);
        background: transparent;
    }

    .forum-title {
        margin: 0;
        font-weight: 900;
        letter-spacing: .2px;
        font-size: clamp(22px, 3.2vw, 36px);
        display: flex;
        align-items: baseline;
        gap: .6rem;
    }

        .forum-title .label {
            background: linear-gradient(90deg, var(--stud-a), var(--stud-b));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            font-weight: 900;
        }

    .thread {
        background: var(--panel);
        border: 1px solid var(--ring);
        border-radius: var(--radius);
        padding: 14px;
        overflow: auto;
        box-shadow: var(--shadow);
        max-height: min(66vh, 620px);
    }

    .msg {
        display: grid;
        grid-template-columns: 38px 1fr;
        gap: 10px;
        align-items: start;
        margin: 10px 0;
    }

    .avatar {
        width: 38px;
        height: 38px;
        border-radius: 999px;
        display: grid;
        place-items: center;
        background: #fff;
        border: 1px solid var(--ring);
        font-weight: 900;
        color: var(--ink);
    }

    .body {
        min-width: 0;
    }

    .meta {
        display: flex;
        gap: .6rem;
        align-items: baseline;
        font-weight: 800;
        font-size: .92rem;
    }

        .meta .time {
            color: var(--muted);
            font-size: .8rem;
            font-weight: 700;
        }

    .bubble {
        margin-top: 6px;
        padding: 12px 14px;
        border-radius: 14px;
        border: 1px solid var(--ring);
        background: var(--neutral);
        font-weight: 700;
        line-height: 1.35;
        word-break: break-word;
    }

    .preview-image {
        max-width: 240px;
        max-height: 240px;
        border-radius: 8px;
        display: block;
        margin-top: 4px;
        transition: transform 0.2s ease-in-out;
    }

        .preview-image:hover {
            transform: scale(1.05);
        }

    .msg.student .bubble {
        color: #fff;
        border-color: color-mix(in oklab, var(--stud-a) 30%, white);
        background: linear-gradient(135deg, var(--stud-a), var(--stud-b));
    }

    .msg.tutor .bubble {
        color: #fff;
        border-color: color-mix(in oklab, var(--tutor-b) 35%, white);
        background: linear-gradient(135deg, var(--tutor-a), var(--tutor-b));
    }

    .msg.admin .bubble {
        color: #1a1a1a;
        border-color: color-mix(in oklab, var(--admin-a) 40%, white);
        background: linear-gradient(135deg, var(--admin-a), var(--admin-b));
    }

    .msg.anon .bubble {
        background: var(--neutral);
        color: var(--ink);
    }

    .composer {
        position: sticky;
        bottom: 0;
        display: grid;
        grid-template-columns: 1fr auto auto;
        gap: 10px;
        align-items: center;
        padding-top: 10px;
        background: transparent;
    }

    .field {
        height: 42px;
        border: 1px solid var(--ring);
        border-radius: 999px;
        padding: 0 14px;
        outline: none;
        font: inherit;
        background: #fff;
    }

    .anon {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        font-weight: 800;
        font-size: .9rem;
        color: var(--muted);
    }

        .anon input {
            width: 16px;
            height: 16px;
            accent-color: var(--ink);
        }

    .send {
        height: 42px;
        width: 46px;
        border-radius: 12px;
        border: 1px solid var(--ring);
        background: linear-gradient(180deg, var(--stud-a), var(--stud-b));
        color: #fff;
        display: grid;
        place-items: center;
        box-shadow: 0 10px 20px color-mix(in oklab, var(--stud-a) 35%, transparent);
        cursor: pointer;
    }

    @@media (max-width: 720px) {
        .forum-title {
            font-size: 1.4rem;
        }

        .thread {
            max-height: 60vh;
        }
    }
</style>
