@page "/claratea"
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@implements IDisposable
@inject IJSRuntime JS

<PageTitle>Ask Clara | CampusLearn</PageTitle>
<div id="bp-container"></div>

<script src="https://cdn.botpress.cloud/webchat/v3.3/inject.js"></script>
<script>
    window.botpressWebChat.init({
      "botId": "your-real-bot-id",
      "clientId": "your-real-client-id",
      "hostUrl": "https://cdn.botpress.cloud/webchat/v1",
      "messagingUrl": "https://messaging.botpress.cloud",
      "botName": "Clara",
      "showPoweredBy": false,
      "showCloseButton": true
    });
</script>

@code {
    private class ChatMsg
    {
        public bool IsUser { get; set; }
        public string Text { get; set; } = "";
        public DateTime At { get; set; } = DateTime.Now;
        public bool IsThinking { get; set; } = false;
    }

    private readonly List<ChatMsg> Messages = new();
    private string Draft = string.Empty;
    private bool FlashGlow = false;
    private ElementReference ChatScroll;
    private DotNetObjectReference<Chatbot>? _dotNetRef;
    private bool _isBotpressReady = false;
    private bool _showDebug = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initializeBotpress", _dotNetRef);
        }
    }


    private async Task SendAsync()
    {
        var text = Draft.Trim();
        if (string.IsNullOrWhiteSpace(text)) return;

        Messages.Add(new ChatMsg { IsUser = true, Text = text, At = DateTime.Now });
        Draft = string.Empty;
        StateHasChanged();

        FlashGlow = true;
        StateHasChanged();
        _ = Task.Run(async () =>
        {
            await Task.Delay(380);
            FlashGlow = false;
            await InvokeAsync(StateHasChanged);
        });

        var thinkingMsg = new ChatMsg { IsUser = false, Text = "Clara is thinking...", At = DateTime.Now, IsThinking = true };
        Messages.Add(thinkingMsg);
        StateHasChanged();

        if (_isBotpressReady)
        {
            await JS.InvokeVoidAsync("sendToBotpress", text);
        }
        else
        {
            // Optional: show "offline" notice instead of fallback answers
            thinkingMsg.Text = "Clara is currently offline. Try again later.";
            thinkingMsg.IsThinking = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public Task OnBotpressReady()
    {
        _isBotpressReady = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task ReceiveBotMessage(string text)
    {
        // Remove the last thinking message if exists
        var thinkingMsg = Messages.LastOrDefault(m => m.IsThinking);
        if (thinkingMsg != null)
            Messages.Remove(thinkingMsg);

        Messages.Add(new ChatMsg { IsUser = false, Text = text.Trim(), At = DateTime.Now });
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void NewChat()
    {
        Messages.Clear();
        StateHasChanged();
        _ = JS.InvokeVoidAsync("resetBotpressConversation");
    }

    private void ToggleDebug()
    {
        _showDebug = !_showDebug;
        StateHasChanged();
    }

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendAsync();
        }
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }
}

