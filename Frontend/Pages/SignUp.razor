@page "/signup"
@layout NavigationForLanding
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Nav

<main class="auth-shell">
    <section class="card">
        <h1>Create your account</h1>
        <p class="muted">It’s quick—then you can set subjects and preferences.</p>

        <EditForm Model="@model" OnValidSubmit="RegisterAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="grid two">
                <label class="f">
                    <span>First name</span>
                    <InputText class="input" @bind-Value="model.FirstName" />
                </label>
                <label class="f">
                    <span>Last name</span>
                    <InputText class="input" @bind-Value="model.LastName" />
                </label>
            </div>

            <label class="f">
                <span>Email</span>
                <InputText class="input" @bind-Value="model.Email" type="email" />
            </label>

            <div class="grid two">
                <label class="f">
                    <span>Password</span>
                    <InputText class="input" @bind-Value="model.Password" type="password" />
                </label>
                <label class="f">
                    <span>Confirm password</span>
                    <InputText class="input" @bind-Value="model.ConfirmPassword" type="password" />
                </label>
            </div>

            <div class="grid two">
                <label class="f">
                    <span>Programme (optional)</span>
                    <InputText class="input" @bind-Value="model.Program" />
                </label>
                <label class="f">
                    <span>Year</span>
                    <InputSelect class="input" @bind-Value="model.Year">
                        <option value="">Select…</option>
                        <option>1</option>
                        <option>2</option>
                        <option>3</option>
                        <option>4</option>
                    </InputSelect>
                </label>
            </div>

            @if (!string.IsNullOrEmpty(error))
            {
                <div class="error">@error</div>
            }

            <button class="btn primary" disabled="@isBusy">
                @(isBusy ? "Creating…" : "Create account")
            </button>

            <p class="tiny">
                Already have an account?
                <a href="/login">Log in</a>
            </p>
        </EditForm>
    </section>
</main>

<style>
    .auth-shell {
        min-height: calc(100dvh - 88px);
        display: grid;
        place-items: center;
        padding: 20px
    }

    .card {
        width: min(720px,92vw);
        background: #fff;
        border: 1px solid #e5e9f0;
        border-radius: 18px;
        box-shadow: 0 10px 28px rgba(0,0,0,.06);
        padding: 20px
    }

    h1 {
        margin: 0 0 4px;
        font-weight: 900
    }

    .muted {
        color: #667085;
        margin: 0 0 14px
    }

    .grid.two {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px
    }

    .f {
        display: grid;
        gap: 6px;
        margin: 10px 0
    }

        .f > span {
            font-weight: 800;
            color: #6a717c
        }

    .input {
        width: 100%;
        border: 1.5px solid #d7dee8;
        border-radius: 12px;
        padding: 12px 14px;
        font-weight: 700
    }

    .btn.primary {
        margin-top: 6px;
        background: #1B998B;
        color: #fff;
        border: 0;
        border-radius: 14px;
        padding: 12px 18px;
        font-weight: 900;
        cursor: pointer
    }

    .btn[disabled] {
        opacity: .6;
        cursor: not-allowed
    }

    .error {
        background: #fee2e2;
        color: #991b1b;
        border: 1px solid #fecaca;
        border-radius: 10px;
        padding: 8px 12px;
        margin: 8px 0;
        font-weight: 700
    }

    .tiny {
        margin-top: 10px;
        color: #667085
    }

        .tiny a {
            font-weight: 800
        }
    @@media (max-width:720px) {
        .grid.two

    {
        grid-template-columns: 1fr
    }

    }
</style>

@code {
    private RegisterModel model = new();
    private bool isBusy = false;
    private string? error;

    private async Task RegisterAsync()
    {
        error = null; isBusy = true;
        try
        {
            var payload = new
            {
                firstName = model.FirstName,
                lastName = model.LastName,
                email = model.Email,
                password = model.Password,
                program = model.Program,
                year = model.Year
            };

            var resp = await Http.PostAsJsonAsync("api/Auth/register", payload);
            if (resp.IsSuccessStatusCode)
            {
                Nav.NavigateTo("/login");
                return;
            }

            var msg = await resp.Content.ReadAsStringAsync();
            error = string.IsNullOrWhiteSpace(msg) ? "Registration failed." : msg;
        }
        catch (Exception ex)
        {
            error = $"Could not register: {ex.Message}";
        }
        finally { isBusy = false; }
    }

    private class RegisterModel
    {
        [Required, StringLength(80)] public string FirstName { get; set; } = "";
        [Required, StringLength(80)] public string LastName { get; set; } = "";
        [Required, EmailAddress] public string Email { get; set; } = "";
        [Required, MinLength(6)] public string Password { get; set; } = "";
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")] public string ConfirmPassword { get; set; } = "";
        public string? Program { get; set; }
        public string? Year { get; set; }
    }
}
