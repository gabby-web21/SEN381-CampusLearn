@page "/messages"
@using System.Net.Http
@using System.Net.Http.Json
@using Sen381.Business.Models
@using Frontend.Services
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject IJSRuntime JS
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/messages.css" />

<style>
    /* ===== Page-local tokens ===== */
    :root {
        --bg: #F2F3F5;
        --panel: #FFFFFF;
        --ink: #1F2937;
        --muted: #6B7280;
        --ring: rgba(0,0,0,.10);
        --shadow: 0 8px 22px rgba(0,0,0,.06);
        --radius: 16px;
        /* Role colours (dynamic theme) */
        --role-admin: #F59E0B; /* amber/yellow */
        --role-tutor: #10B981; /* emerald */
        --role-student: #3B82F6; /* blue */
        --role-clara: #B14CF4; /* purple */

        --sidebar-w: 320px;
        --sidebar-w-collapsed: 76px;
        /* navbar space; adjust if your shell header changes */
        --nav-h: 72px;
    }

    /* no page scroll; only internal scrollers */
    html, body {
        height: 100%;
    }

    body {
        margin: 0;
        background: var(--bg);
        color: var(--ink);
        font-family: system-ui,-apple-system,Segoe UI,Inter,Roboto,Arial,sans-serif;
        overflow: hidden;
    }

    /* ===== Layout (animate sidebar width) ===== */
    .messages-container {
        height: calc(100vh - var(--nav-h));
        padding: 10px 14px 12px;
        display: grid;
        grid-template-columns: auto 1fr; /* first col width is the actual sidebar width */
        gap: 10px;
        overflow: hidden;
    }

    .people-sidebar {
        width: var(--sidebar-w);
        min-width: 0; /* allows shrinking */
        background: var(--panel);
        border: 1px solid var(--ring);
        border-radius: var(--radius);
        box-shadow: var(--shadow);
        display: grid;
        grid-template-rows: auto 1fr;
        overflow: hidden; /* clip when collapsed */
        transition: width .26s cubic-bezier(.22,1,.36,1);
    }

    .messages-container.collapsed .people-sidebar {
        width: var(--sidebar-w-collapsed);
    }

    /* ===== People header ===== */
    .people-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 12px 12px 8px;
        border-bottom: 1px solid var(--ring);
    }

    .people-title {
        margin: 0;
        font-weight: 800;
    }

    .collapse-btn {
        border: 1px solid var(--ring);
        background: #fff;
        width: 34px;
        height: 34px;
        display: grid;
        place-items: center;
        border-radius: 8px;
        cursor: pointer;
        transition: transform .18s ease, box-shadow .18s ease;
    }

        .collapse-btn:hover {
            box-shadow: 0 8px 18px rgba(0,0,0,.06);
        }

    .messages-container.collapsed .collapse-btn svg {
        transform: rotate(180deg);
    }

    /* ===== People list ===== */
    .people-list {
        overflow: auto;
        padding: 10px;
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    /* compact person rows */
    .person-item {
        box-sizing: border-box;
        display: grid;
        grid-template-columns: 40px 1fr auto;
        gap: 10px;
        align-items: center;
        padding: 8px 10px;
        border-radius: 12px;
        background: #fff;
        border: 1px solid var(--ring);
        cursor: pointer;
        transition: transform .12s ease, box-shadow .12s ease, background-color .12s ease;
    }

        .person-item:hover {
            transform: translateY(-1px);
            box-shadow: 0 8px 18px rgba(0,0,0,.06);
        }

        .person-item.active {
            outline: 2px solid color-mix(in oklab, var(--ink) 15%, white);
            outline-offset: 0;
        }

    .person-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        overflow: hidden;
        position: relative;
        flex-shrink: 0;
    }

    .avatar-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
    }

    .avatar-placeholder {
        width: 100%;
        height: 100%;
        display: grid;
        place-items: center;
        background: #E5E7EB;
        font-weight: 800;
        color: #374151;
    }

    .person-info {
        min-width: 0;
    }

    .person-name {
        font-weight: 800;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .person-sub {
        font-size: .85rem;
        color: var(--muted);
        margin-top: 1px;
    }

    .status-dot {
        width: 10px;
        height: 10px;
        background: #10B981;
        border-radius: 50%;
    }

    .person-status svg {
        opacity: .7;
    }

    /* Pinned AI */
    .person-item.ai {
        background: linear-gradient(180deg, #fff 0%, #fff 65%), linear-gradient(135deg, var(--role-clara), #FFA3F9);
        background-clip: padding-box, border-box;
        border: 1px solid transparent;
    }

        .person-item.ai .person-name {
            display: flex;
            gap: 6px;
            align-items: center;
        }

        .person-item.ai .pin {
            font-size: .72rem;
            font-weight: 900;
            color: #B45309;
            background: #FFF7ED;
            border: 1px solid #FCD34D;
            padding: 0 6px;
            border-radius: 999px;
        }

    /* Collapsed visuals */
    .messages-container.collapsed .people-title {
        display: none;
    }

    .messages-container.collapsed .people-list {
        padding: 8px 6px;
    }

    .messages-container.collapsed .person-item {
        grid-template-columns: 1fr;
        padding: 8px 6px;
        justify-items: center;
        width: 100%;
        min-width: 0;
        overflow: hidden;
    }

    .messages-container.collapsed .person-info,
    .messages-container.collapsed .person-status {
        display: none;
    }

    .messages-container.collapsed .person-avatar {
        width: 44px;
        height: 44px;
    }

    /* ===== Dynamic role colours (higher specificity + !important to beat external css) ===== */
    .people-list .person-item[data-role="Admin"] .person-name {
        color: var(--role-admin) !important;
    }

    .people-list .person-item[data-role="Tutor"] .person-name {
        color: var(--role-tutor) !important;
    }

    .people-list .person-item[data-role="Student"] .person-name {
        color: var(--role-student) !important;
    }

    .people-list .person-item[data-role="Clara"] .person-name {
        color: var(--role-clara) !important;
    }

    .people-list .person-item[data-role="Admin"] .person-avatar {
        box-shadow: 0 0 0 2px var(--role-admin) inset, 0 0 0 2px var(--role-admin);
    }

    .people-list .person-item[data-role="Tutor"] .person-avatar {
        box-shadow: 0 0 0 2px var(--role-tutor) inset, 0 0 0 2px var(--role-tutor);
    }

    .people-list .person-item[data-role="Student"] .person-avatar {
        box-shadow: 0 0 0 2px var(--role-student) inset, 0 0 0 2px var(--role-student);
    }

    .people-list .person-item[data-role="Clara"] .person-avatar {
        box-shadow: 0 0 0 2px var(--role-clara) inset, 0 0 0 2px var(--role-clara);
    }

    /* ===== Chat column (outlined panel) ===== */
    .chat-area {
        display: grid;
        grid-template-rows: auto 1fr auto; /* header | scroller | input */
        height: 100%;
        overflow: hidden;
        background: var(--panel);
        border: 1px solid var(--ring);
        border-radius: var(--radius);
        box-shadow: var(--shadow);
    }

    .chat-header {
        border-bottom: 1px solid var(--ring);
        padding: 10px 12px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .chat-user-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .chat-user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        overflow: hidden;
    }

    .chat-user-name {
        font-weight: 800;
        position: relative;
    }

    .chat-user-role {
        color: var(--muted);
        font-size: .9rem;
    }

    /* Role underline/ring in header via data-role on .chat-header */
    .chat-header[data-role="Admin"] {
        --role: var(--role-admin);
    }

    .chat-header[data-role="Tutor"] {
        --role: var(--role-tutor);
    }

    .chat-header[data-role="Student"] {
        --role: var(--role-student);
    }

    .chat-header[data-role="Clara"] {
        --role: var(--role-clara);
    }

    .chat-header .chat-user-name::after {
        content: "";
        position: absolute;
        left: 0;
        right: 0;
        bottom: -8px;
        height: 3px;
        border-radius: 999px;
        background: var(--role);
    }

    .chat-header .chat-user-avatar {
        box-shadow: 0 0 0 2px var(--role) inset, 0 0 0 2px var(--role);
    }

    .messages-area {
        padding: 14px 12px; /* hugs panel edges; keeps input visible without page scroll */
        overflow: auto;
        background: #FBFBFC;
        display: grid;
        gap: 10px;
        align-content: start;
    }

    .message-row {
        display: grid;
        gap: 6px;
    }

        .message-row.outgoing {
            justify-items: end;
            padding-right: 2px;
        }

        .message-row.incoming {
            justify-items: start;
            padding-left: 2px;
        }

    .message-bubble {
        max-width: min(72%, 70ch);
        padding: 10px 12px;
        border-radius: 14px;
        line-height: 1.35;
        box-shadow: 0 1px 0 rgba(0,0,0,.03);
    }

    .outgoing-bubble {
        background: #111827;
        color: #fff;
        border-top-right-radius: 4px;
    }

    .incoming-bubble {
        background: #fff;
        border: 1px solid var(--ring);
        border-top-left-radius: 4px;
    }

    .message-time {
        font-size: .75rem;
        color: var(--muted);
    }

    .message-input-area {
        border-top: 1px solid var(--ring);
        padding: 10px;
        background: var(--panel);
    }

    .input-container {
        display: flex;
        gap: 8px;
        align-items: center;
        background: #fff;
        border: 1px solid var(--ring);
        border-radius: 999px;
        padding: 8px 10px;
    }

    .message-input {
        flex: 1;
        border: 0;
        outline: 0;
        font: inherit;
        background: transparent;
    }

    .send-btn, .attachment-btn {
        width: 36px;
        height: 36px;
        border-radius: 10px;
        border: 1px solid var(--ring);
        background: #fff;
        cursor: pointer;
        display: grid;
        place-items: center;
    }

    @@media (max-width: 980px) {
        :root {
            --sidebar-w: 280px;
            --sidebar-w-collapsed: 64px;
            --nav-h: 64px;
        }
    }
</style>

<div class="messages-container @(isSidebarCollapsed ? "collapsed" : "")">
    <!-- ===== Left Sidebar - People List ===== -->
    <div class="people-sidebar" @onclick="HandleSidebarClick">
        <div class="people-header">
            <h3 class="people-title">People</h3>
            <!-- stopPropagation keeps this click from re-opening immediately -->
            <button class="collapse-btn" @onclick:stopPropagation="true" @onclick="ToggleSidebar">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="15 18 9 12 15 6"></polyline>
                </svg>
            </button>
        </div>

        <div class="people-list">
            <!-- Pinned AI contact -->
            <div class="person-item ai" data-role="Clara" @onclick="SelectClara">
                <div class="person-avatar">
                    <div class="avatar-placeholder">C</div>
                </div>
                <div class="person-info">
                    <div class="person-name">Clara Tea <span class="pin">PIN</span></div>
                    <div class="person-sub">AI Assistant</div>
                </div>
                <div class="person-status"><div class="status-dot"></div></div>
            </div>

            @if (FollowedUsers == null)
            {
                <div class="loading-state" style="color:var(--muted); padding:6px 10px;">Loading...</div>
            }
            else if (!FollowedUsers.Any())
            {
                <div class="empty-state" style="color:var(--muted); padding:6px 10px;">
                    You're not following anyone yet.<br />
                    Follow users to start messaging them!
                </div>
            }
            else
            {
                @foreach (var user in FollowedUsers)
                {
                    var isActive = (user.Id == SelectedUser?.Id);
                    <div class="person-item @(isActive ? "active" : "")" data-role="@user.RoleString" @onclick="() => LoadConversation(user)">
                        <div class="person-avatar @(isActive ? "active-border" : "")">
                            @if (!string.IsNullOrEmpty(user.ProfilePicturePath))
                            {
                                <img src="@user.ProfilePicturePath" alt="@user.FirstName" class="avatar-image" />
                            }
                            else
                            {
                                <div class="avatar-placeholder">@user.FirstName[0]</div>
                            }
                        </div>
                        <div class="person-info">
                            <div class="person-name">@($"{user.FirstName} {user.LastName}")</div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- ===== Main Chat Area ===== -->
    <div class="chat-area">
        @if (SelectedUser == null)
        {
            <div class="no-chat-selected" style="display:grid; place-items:center; gap:8px; color:var(--muted);">
                <div class="no-chat-icon">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                        <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                    </svg>
                </div>
                <h3 style="margin:0; color:#374151;">Select a person to start messaging</h3>
                <p style="margin:0;">Choose someone from the People list to begin your conversation</p>
            </div>
        }
        else
        {
            <!-- Chat Header -->
            <div class="chat-header" data-role="@SelectedUser.RoleString">
                <div class="chat-user-info">
                    <div class="chat-user-avatar @(SelectedUser.Id == SelectedUser?.Id ? "active-border" : "")">
                        @if (!string.IsNullOrEmpty(SelectedUser.ProfilePicturePath))
                        {
                            <img src="@SelectedUser.ProfilePicturePath" alt="@SelectedUser.FirstName" class="avatar-image" />
                        }
                        else
                        {
                            <div class="avatar-placeholder">@SelectedUser.FirstName[0]</div>
                        }
                    </div>
                    <div class="chat-user-details">
                        <div class="chat-user-name">@($"{SelectedUser.FirstName} {SelectedUser.LastName}")</div>
                        <div class="chat-user-role">@SelectedUser.RoleString</div>
                    </div>
                </div>
            </div>

            <!-- Messages Area -->
            <div class="messages-area" @ref="ChatContainer">
                @if (ConversationMessages == null)
                {
                    <div class="loading-messages">Loading messages...</div>
                }
                else if (!ConversationMessages.Any())
                {
                    <div class="empty-messages">
                        <div class="empty-icon">
                            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                            </svg>
                        </div>
                        <p>No messages yet. Start the conversation!</p>
                    </div>
                }
                else
                {
                    @foreach (var msg in ConversationMessages)
                    {
                        var isOutgoing = (msg.SenderId == CurrentUserId);
                        bool isAttachment = msg.MessageText != null && msg.MessageText.StartsWith("ATTACH|");
                        
                        // Debug logging for message text
                        if (msg.MessageText != null && msg.MessageText.StartsWith("ATTACH"))
                        {
                            Console.WriteLine($"[Messages] Raw attachment message: {msg.MessageText}");
                        }

                        string? attachType = null;
                        string? attachUrl = null;
                        string? attachName = null;

                        if (isAttachment)
                        {
                            try
                            {
                                var parts = msg.MessageText.Split('|', 4);
                                attachType = parts.Length > 1 ? parts[1] : null;
                                attachUrl = parts.Length > 2 ? parts[2] : null;
                                attachName = parts.Length > 3 ? parts[3] : null;
                                
                                // Debug logging
                                Console.WriteLine($"[Messages] Attachment found - Type: {attachType}, URL: {attachUrl}, Name: {attachName}");
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine($"[Messages] Error parsing attachment: {ex.Message}");
                            }
                        }

                        <div class="message-row @(isOutgoing ? "outgoing" : "incoming")">
                            <div class="message-bubble @(isOutgoing ? "outgoing-bubble" : "incoming-bubble")">
                                @if (isAttachment && !string.IsNullOrEmpty(attachUrl))
                                {
                                    if (attachType == "image")
                                    {
                                        <img src="@attachUrl" alt="@attachName" class="chat-image" 
                                             onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
                                        <div class="image-error" style="display:none;">
                                            <span class="error-icon">🖼️</span>
                                            <span class="error-text">Image expired or unavailable</span>
                                        </div>
                                    }
                                    else if (attachType == "video")
                                    {
                                        <video controls class="chat-video">
                                            <source src="@attachUrl" />
                                            Your browser does not support the video tag.
                                        </video>
                                    }
                                    else
                                    {
                                        <a href="@attachUrl" target="_blank" class="file-download-link">
                                            📎 @(!string.IsNullOrEmpty(attachName) ? attachName : "Download file")
                                        </a>
                                    }
                                }
                                else
                                {
                                    @msg.MessageText
                                }
                                
                                @if (isOutgoing)
                                {
                                    <button class="message-delete-btn" @onclick="() => DeleteMessage(msg.Id)" title="Delete message">
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <polyline points="3,6 5,6 21,6"></polyline>
                                            <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"></path>
                                            <line x1="10" y1="11" x2="10" y2="17"></line>
                                            <line x1="14" y1="11" x2="14" y2="17"></line>
                                        </svg>
                                    </button>
                                }
                            </div>
                            <div class="message-time">@msg.SentAt?.ToString("HH:mm")</div>
                        </div>
                    }
                }
            </div>

            <!-- Message Input -->
            <div class="message-input-area">
                <div class="input-container">
                    @if (selectedFileName != null)
                    {
                        <div class="selected-file">
                            📎 @selectedFileName
                            <button type="button" class="clear-file" @onclick="ClearSelectedFile">✕</button>
                        </div>
                    }
                    <button class="attachment-btn" @onclick="OpenFilePicker">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66L9.64 16.2a2 2 0 0 1-2.83-2.83l8.49-8.49"></path>
                        </svg>
                    </button>

                    <InputFile id="filePicker" style="display:none" OnChange="HandleFileSelected"
                               accept="image/*,video/*,.pdf,.doc,.docx,.zip,.txt" />

                    <input @bind="NewMessageText" @bind:event="oninput" class="message-input"
                           placeholder="Type a private message..." @onkeydown="HandleEnter" />

                    <button class="send-btn" @onclick="SendMessage" disabled="@(isSending || (string.IsNullOrWhiteSpace(NewMessageText) && selectedFile == null))">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <line x1="22" y1="2" x2="11" y2="13"></line>
                            <polygon points="22,2 15,22 11,13 2,9"></polygon>
                        </svg>
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<User>? FollowedUsers;
    private List<DirectMessage>? ConversationMessages;
    private User? SelectedUser;
    private string NewMessageText = string.Empty;
    private ElementReference ChatContainer;
    private bool isSending = false;
    private int CurrentUserId;
    private bool isSidebarCollapsed = false;

    private IBrowserFile selectedFile;
    private string selectedFileName;
    private string selectedFileType;

    protected override async Task OnInitializedAsync()
    {
        bool isLoggedIn = await AuthService.IsUserLoggedInAsync();
        if (!isLoggedIn)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        CurrentUserId = (await AuthService.GetCurrentUserIdAsync()) ?? 0;
        await LoadFollowedUsers();
    }

    private async Task LoadFollowedUsers()
    {
        try
        {
            var url = $"api/User/following?userId={CurrentUserId}";
            FollowedUsers = await Http.GetFromJsonAsync<List<User>>(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] LoadFollowedUsers: {ex.Message}");
        }
    }

    private async Task LoadConversation(User user)
    {
        try
        {
            SelectedUser = user;
            Console.WriteLine($"[Messages] Loading conversation with user {user.Id}");

            ConversationMessages = await Http.GetFromJsonAsync<List<DirectMessage>>($"api/Messaging/conversation/{CurrentUserId}/{user.Id}");
            Console.WriteLine($"[Messages] Loaded {ConversationMessages?.Count ?? 0} messages");

            await Http.PutAsync($"api/Messaging/mark-read/{user.Id}/{CurrentUserId}", null);
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] LoadConversation: {ex.Message}");
        }
    }

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await SendMessage();
    }

    private async Task SendMessage()
    {
        if ((string.IsNullOrWhiteSpace(NewMessageText) && selectedFile == null) || SelectedUser == null || isSending)
            return;

        try
        {
            isSending = true;
            string textToSend = NewMessageText;

            if (selectedFile != null)
            {
                using var content = new MultipartFormDataContent();
                var stream = selectedFile.OpenReadStream(20_000_000);
                var fileContent = new StreamContent(stream);
                content.Add(fileContent, "File", selectedFile.Name);
                content.Add(new StringContent(selectedFile.Name), "Name");

                var uploadResp = await Http.PostAsync("api/File/uploadfile", content);
                if (!uploadResp.IsSuccessStatusCode)
                {
                    var err = await uploadResp.Content.ReadAsStringAsync();
                    Console.WriteLine($"[Messages] File upload failed: {err}");
                    await JS.InvokeVoidAsync("alert", "File upload failed.");
                    return;
                }

                var uploadJson = await uploadResp.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                // 🔥 read lowercase key
                var url = uploadJson != null && uploadJson.ContainsKey("signedUrl") ? uploadJson["signedUrl"] : null;

                var kind = (selectedFile.ContentType?.StartsWith("image") == true) ? "image" :
                           (selectedFile.ContentType?.StartsWith("video") == true) ? "video" : "file";
                textToSend = $"ATTACH|{kind}|{url}|{selectedFile.Name}";
            }

            var request = new
            {
                SenderId = CurrentUserId,
                ReceiverId = SelectedUser.Id,
                MessageText = textToSend
            };

            var response = await Http.PostAsJsonAsync("api/Messaging/send", request);

            if (response.IsSuccessStatusCode)
            {
                ConversationMessages ??= new List<DirectMessage>();
                ConversationMessages.Add(new DirectMessage
                {
                    SenderId = CurrentUserId,
                    ReceiverId = SelectedUser.Id,
                    MessageText = textToSend,
                    SentAt = DateTime.Now,
                    IsRead = false
                });

                NewMessageText = string.Empty;
                selectedFile = null;
                selectedFileName = null;
                selectedFileType = null;

                await ScrollToBottom();
                Console.WriteLine("✅ [Messages] Message sent successfully");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"⚠️ [Messages] Failed to send message: {error}");
                await JS.InvokeVoidAsync("alert", "Failed to send message. Make sure you're following this user.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] SendMessage: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "An error occurred while sending the message.");
        }
        finally
        {
            isSending = false;
        }
    }

    private async Task DeleteMessage(int messageId)
    {
        try
        {
            Console.WriteLine($"[Messages] Attempting to delete message {messageId}");
            
            var response = await Http.DeleteAsync($"api/Messaging/delete/{messageId}?userId={CurrentUserId}");
            
            if (response.IsSuccessStatusCode)
            {
                // Remove the message from the local list
                ConversationMessages?.RemoveAll(m => m.Id == messageId);
                StateHasChanged();
                Console.WriteLine($"✅ [Messages] Message {messageId} deleted successfully");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"⚠️ [Messages] Failed to delete message: {error}");
                await JS.InvokeVoidAsync("alert", "Failed to delete message.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] DeleteMessage: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "An error occurred while deleting the message.");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        selectedFileName = selectedFile?.Name;
        selectedFileType = selectedFile?.ContentType;
    }

    private void ClearSelectedFile()
    {
        selectedFile = null;
        selectedFileName = null;
        selectedFileType = null;
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JS.InvokeVoidAsync("scrollToBottom", ChatContainer);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] ScrollToBottom: {ex.Message}");
        }
    }

    private async Task OpenFilePicker()
    {
        try
        {
            await JS.InvokeVoidAsync("eval", "document.getElementById('filePicker').click()");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Messages] OpenFilePicker error: {ex.Message}");
        }
    }

    private void ToggleSidebar()
    {
        isSidebarCollapsed = !isSidebarCollapsed;
        StateHasChanged();
    }

    private void HandleSidebarClick()
    {
        if (isSidebarCollapsed) ToggleSidebar(); // clicking the white pill re-opens
    }

    // Treat Clara like a selectable user so the chat panel loads normally
    private void SelectClara()
    {
        SelectedUser = new User
        {
            Id = -999,
            FirstName = "Clara",
            LastName = "Tea",
            RoleString = "Clara",
            ProfilePicturePath = string.Empty
        };
        ConversationMessages = new List<DirectMessage>(); // standard "No messages yet" state
        StateHasChanged();
    }
}
