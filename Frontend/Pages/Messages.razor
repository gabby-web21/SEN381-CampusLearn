@page "/messages"
@using System.Net.Http.Json
@using Sen381.Business.Models
@using Frontend.Services
@inject HttpClient Http
@inject IJSRuntime JS
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/messages.css" />

<div class="messages-container">
    <!-- ===== Left Sidebar - People List ===== -->
    <div class="people-sidebar">
        <div class="people-header">
            <h3 class="people-title">People</h3>
            <button class="collapse-btn" @onclick="ToggleSidebar">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="15,18 9,12 15,6"></polyline>
                </svg>
            </button>
        </div>
        
        <div class="people-list">
            @if (FollowedUsers == null)
            {
                <div class="loading-state">Loading...</div>
            }
            else if (!FollowedUsers.Any())
            {
                <div class="empty-state">
                    You're not following anyone yet.<br/>
                    Follow users to start messaging them!
                </div>
            }
            else
            {
                @foreach (var user in FollowedUsers)
                {
                    var isActive = (user.Id == SelectedUser?.Id);
                    <div class="person-item @(isActive ? "active" : "")" @onclick="() => LoadConversation(user)">
                        <div class="person-avatar @(isActive ? "active-border" : "")">
                            @if (!string.IsNullOrEmpty(user.ProfilePicturePath))
                            {
                                <img src="@user.ProfilePicturePath" alt="@user.FirstName" class="avatar-image" />
                            }
                            else
                            {
                                <div class="avatar-placeholder">@user.FirstName[0]</div>
                            }
                        </div>
                        <div class="person-info">
                            <div class="person-name">@($"{user.FirstName} {user.LastName}")</div>
                        </div>
                        <div class="person-status @(isActive ? "active-status" : "inactive-status")">
                            @if (isActive)
                            {
                                <div class="status-dot"></div>
                            }
                            else
                            {
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <line x1="12" y1="5" x2="12" y2="19"></line>
                                    <line x1="5" y1="12" x2="19" y2="12"></line>
                                </svg>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- ===== Right Section - Chat Area ===== -->
    <div class="chat-area">
        @if (SelectedUser == null)
        {
            <div class="no-chat-selected">
                <div class="no-chat-icon">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                        <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                    </svg>
                </div>
                <h3>Select a person to start messaging</h3>
                <p>Choose someone from the People list to begin your conversation</p>
            </div>
        }
        else
        {
            <!-- Chat Header -->
            <div class="chat-header">
                <div class="chat-user-info">
                    <div class="chat-user-avatar @(SelectedUser.Id == SelectedUser?.Id ? "active-border" : "")">
                        @if (!string.IsNullOrEmpty(SelectedUser.ProfilePicturePath))
                        {
                            <img src="@SelectedUser.ProfilePicturePath" alt="@SelectedUser.FirstName" class="avatar-image" />
                        }
                        else
                        {
                            <div class="avatar-placeholder">@SelectedUser.FirstName[0]</div>
                        }
                    </div>
                    <div class="chat-user-details">
                        <div class="chat-user-name">@($"{SelectedUser.FirstName} {SelectedUser.LastName}")</div>
                        <div class="chat-user-role">@SelectedUser.RoleString</div>
                    </div>
                </div>
            </div>

            <!-- Messages Area -->
            <div class="messages-area" @ref="ChatContainer">
                @if (ConversationMessages == null)
                {
                    <div class="loading-messages">Loading messages...</div>
                }
                else if (!ConversationMessages.Any())
                {
                    <div class="empty-messages">
                        <div class="empty-icon">
                            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                            </svg>
                        </div>
                        <p>No messages yet. Start the conversation!</p>
                    </div>
                }
                else
                {
                    @foreach (var msg in ConversationMessages)
                    {
                        var isOutgoing = (msg.SenderId == CurrentUserId);
                        <div class="message-row @(isOutgoing ? "outgoing" : "incoming")">
                            <div class="message-bubble @(isOutgoing ? "outgoing-bubble" : "incoming-bubble")">
                                @msg.MessageText
                            </div>
                            <div class="message-time">@msg.SentAt?.ToString("HH:mm")</div>
                        </div>
                    }
                }
            </div>

            <!-- Message Input -->
            <div class="message-input-area">
                <div class="input-container">
                    <button class="attachment-btn">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66L9.64 16.2a2 2 0 0 1-2.83-2.83l8.49-8.49"></path>
                        </svg>
                    </button>
                    <input @bind="NewMessageText" @bind:event="oninput" class="message-input"
                           placeholder="Type a private message..." @onkeydown="HandleEnter" />
                    <button class="send-btn" @onclick="SendMessage" disabled="@(isSending || string.IsNullOrWhiteSpace(NewMessageText))">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <line x1="22" y1="2" x2="11" y2="13"></line>
                            <polygon points="22,2 15,22 11,13 2,9"></polygon>
                        </svg>
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<User>? FollowedUsers;
    private List<DirectMessage>? ConversationMessages;
    private User? SelectedUser;
    private string NewMessageText = string.Empty;
    private ElementReference ChatContainer;
    private bool isSending = false;
    private int CurrentUserId;
    private bool isSidebarCollapsed = false;

    protected override async Task OnInitializedAsync()
    {
        // Get current user ID from auth service
        bool isLoggedIn = await AuthService.IsUserLoggedInAsync();
        if (!isLoggedIn)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        int? userId = await AuthService.GetCurrentUserIdAsync();
        if (userId == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        CurrentUserId = userId.Value;
        await LoadFollowedUsers();
    }

    private async Task LoadFollowedUsers()
    {
        try
        {
            Console.WriteLine($"[Messages] Loading followed users for user {CurrentUserId}");
            FollowedUsers = await Http.GetFromJsonAsync<List<User>>($"api/Follow/following-list/{CurrentUserId}");
            Console.WriteLine($"[Messages] Loaded {FollowedUsers?.Count ?? 0} followed users");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] LoadFollowedUsers: {ex.Message}");
        }
    }

    private async Task LoadConversation(User user)
    {
        try
        {
            SelectedUser = user;
            Console.WriteLine($"[Messages] Loading conversation with user {user.Id}");

            ConversationMessages = await Http.GetFromJsonAsync<List<DirectMessage>>($"api/Messaging/conversation/{CurrentUserId}/{user.Id}");
            Console.WriteLine($"[Messages] Loaded {ConversationMessages?.Count ?? 0} messages");

            // Mark messages as read
            await Http.PutAsync($"api/Messaging/mark-read/{user.Id}/{CurrentUserId}", null);

            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] LoadConversation: {ex.Message}");
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(NewMessageText) || SelectedUser == null || isSending)
            return;

        try
        {
            isSending = true;

            var request = new
            {
                SenderId = CurrentUserId,
                ReceiverId = SelectedUser.Id,
                MessageText = NewMessageText
            };

            Console.WriteLine($"[Messages] Sending message to user {SelectedUser.Id}");
            var response = await Http.PostAsJsonAsync("api/Messaging/send", request);

            if (response.IsSuccessStatusCode)
            {
                // Add message to local list immediately for better UX
                ConversationMessages ??= new List<DirectMessage>();
                ConversationMessages.Add(new DirectMessage
                {
                    SenderId = CurrentUserId,
                    ReceiverId = SelectedUser.Id,
                    MessageText = NewMessageText,
                    SentAt = DateTime.Now,
                    IsRead = false
                });

                NewMessageText = string.Empty;
                await ScrollToBottom();
                Console.WriteLine("✅ [Messages] Message sent successfully");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"⚠️ [Messages] Failed to send message: {error}");
                await JS.InvokeVoidAsync("alert", "Failed to send message. Make sure you're following this user.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] SendMessage: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "An error occurred while sending the message.");
        }
        finally
        {
            isSending = false;
        }
    }

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
            await SendMessage();
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await Task.Delay(100); // Small delay to ensure DOM is updated
            await JS.InvokeVoidAsync("scrollToBottom", ChatContainer);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] ScrollToBottom: {ex.Message}");
        }
    }

    private void ToggleSidebar()
    {
        isSidebarCollapsed = !isSidebarCollapsed;
        StateHasChanged();
    }
}
