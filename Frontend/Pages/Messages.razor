@page "/messages"
@using System.Net.Http
@using System.Net.Http.Json
@using Sen381.Business.Models
@using Frontend.Services
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject IJSRuntime JS
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/messages.css" />

<div class="messages-container">
    <!-- ===== Left Sidebar - People List ===== -->
    <div class="people-sidebar">
        <div class="people-header">
            <h3 class="people-title">People</h3>
            <button class="toggle-sidebar" @onclick="ToggleSidebar">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="15 18 9 12 15 6"></polyline>
                </svg>
            </button>
        </div>

        <div class="people-list @(isSidebarCollapsed ? "collapsed" : "")">
            @if (FollowedUsers == null)
            {
                <div class="people-loading">Loading...</div>
            }
            else if (!FollowedUsers.Any())
            {
                <div class="people-empty">No people found. Follow someone to chat.</div>
            }
            else
            {
                @foreach (var user in FollowedUsers)
                {
                    var isActive = (SelectedUser?.Id == user.Id);
                    <div class="person @(isActive ? "active" : "")" @onclick="() => LoadConversation(user)">
                        <div class="person-avatar">
                            <img src="@(user.ProfilePicturePath ?? "https://placehold.co/64x64/png")" alt="avatar" />
                        </div>
                        <div class="person-info">
                            <div class="person-name">@($"{user.FirstName} {user.LastName}")</div>
                            <div class="person-role">@user.RoleString</div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- ===== Main Chat Area ===== -->
    <div class="chat-area">
        @if (SelectedUser == null)
        {
            <div class="chat-empty-state">
                <div class="empty-icon">
                    <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                        <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                    </svg>
                </div>
                <h3>Select a person to start messaging</h3>
            </div>
        }
        else
        {
            <!-- Chat Header -->
            <div class="chat-header">
                <div class="chat-user">
                    <div class="chat-user-avatar">
                        <img src="@(SelectedUser.ProfilePicturePath ?? "https://placehold.co/64x64/png")" alt="avatar" />
                    </div>
                    <div class="chat-user-details">
                        <div class="chat-user-name">@($"{SelectedUser.FirstName} {SelectedUser.LastName}")</div>
                        <div class="chat-user-role">@SelectedUser.RoleString</div>
                    </div>
                </div>
            </div>

            <!-- Messages Area -->
            <div class="messages-area" @ref="ChatContainer">
                @if (ConversationMessages == null)
                {
                    <div class="loading-messages">Loading messages...</div>
                }
                else if (!ConversationMessages.Any())
                {
                    <div class="empty-messages">
                        <div class="empty-icon">
                            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                            </svg>
                        </div>
                        <p>No messages yet. Start the conversation!</p>
                    </div>
                }
                else
                {
                    @foreach (var msg in ConversationMessages)
                    {
                        var isOutgoing = (msg.SenderId == CurrentUserId);
                        bool isAttachment = msg.MessageText != null && msg.MessageText.StartsWith("ATTACH|");

                        string? attachType = null;
                        string? attachUrl = null;
                        string? attachName = null;

                        if (isAttachment)
                        {
                            try
                            {
                                var parts = msg.MessageText.Split('|', 4);
                                attachType = parts.Length > 1 ? parts[1] : null;
                                attachUrl = parts.Length > 2 ? parts[2] : null;
                                attachName = parts.Length > 3 ? parts[3] : null;
                            }
                            catch { }
                        }

                        <div class="message-row @(isOutgoing ? "outgoing" : "incoming")">
                            <div class="message-bubble @(isOutgoing ? "outgoing-bubble" : "incoming-bubble")">
                                @if (isAttachment && !string.IsNullOrEmpty(attachUrl))
                                {
                                    if (attachType == "image")
                                    {
                                        <img src="@attachUrl" alt="@attachName" class="chat-image" />
                                    }
                                    else if (attachType == "video")
                                    {
                                        <video controls class="chat-video">
                                            <source src="@attachUrl" />
                                            Your browser does not support the video tag.
                                        </video>
                                    }
                                    else
                                    {
                                        <a href="@attachUrl" target="_blank" class="file-download-link">
                                            📎 @(!string.IsNullOrEmpty(attachName) ? attachName : "Download file")
                                        </a>
                                    }
                                }
                                else
                                {
                                    @msg.MessageText
                                }
                            </div>
                            <div class="message-time">@msg.SentAt?.ToString("HH:mm")</div>
                        </div>
                    }
                }
            </div>

            <!-- Message Input -->
            <div class="message-input-area">
                <div class="input-container">
                    @if (selectedFileName != null)
                    {
                        <div class="selected-file">
                            📎 @selectedFileName
                            <button type="button" class="clear-file" @onclick="ClearSelectedFile">✕</button>
                        </div>
                    }
                    <button class="attachment-btn" @onclick="OpenFilePicker">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66L9.64 16.2a2 2 0 0 1-2.83-2.83l8.49-8.49"></path>
                        </svg>
                    </button>

                    <InputFile id="filePicker" style="display:none" OnChange="HandleFileSelected"
                               accept="image/*,video/*,.pdf,.doc,.docx,.zip,.txt" />

                    <input @bind="NewMessageText" @bind:event="oninput" class="message-input"
                           placeholder="Type a private message..." @onkeydown="HandleEnter" />

                    <button class="send-btn" @onclick="SendMessage" disabled="@(isSending || (string.IsNullOrWhiteSpace(NewMessageText) && selectedFile == null))">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <line x1="22" y1="2" x2="11" y2="13"></line>
                            <polygon points="22,2 15,22 11,13 2,9"></polygon>
                        </svg>
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<User>? FollowedUsers;
    private List<DirectMessage>? ConversationMessages;
    private User? SelectedUser;
    private string NewMessageText = string.Empty;
    private ElementReference ChatContainer;
    private bool isSending = false;
    private int CurrentUserId;
    private bool isSidebarCollapsed = false;

    private IBrowserFile selectedFile;
    private string selectedFileName;
    private string selectedFileType;

    protected override async Task OnInitializedAsync()
    {
        bool isLoggedIn = await AuthService.IsUserLoggedInAsync();
        if (!isLoggedIn)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        CurrentUserId = (await AuthService.GetCurrentUserIdAsync()) ?? 0;
        await LoadFollowedUsers();
    }

    private async Task LoadFollowedUsers()
    {
        try
        {
            FollowedUsers = await Http.GetFromJsonAsync<List<User>>("api/User/following");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] LoadFollowedUsers: {ex.Message}");
        }
    }

    private async Task LoadConversation(User user)
    {
        try
        {
            SelectedUser = user;
            Console.WriteLine($"[Messages] Loading conversation with user {user.Id}");

            ConversationMessages = await Http.GetFromJsonAsync<List<DirectMessage>>($"api/Messaging/conversation/{CurrentUserId}/{user.Id}");
            Console.WriteLine($"[Messages] Loaded {ConversationMessages?.Count ?? 0} messages");

            await Http.PutAsync($"api/Messaging/mark-read/{user.Id}/{CurrentUserId}", null);
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] LoadConversation: {ex.Message}");
        }
    }

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await SendMessage();
    }

    private async Task SendMessage()
    {
        if ((string.IsNullOrWhiteSpace(NewMessageText) && selectedFile == null) || SelectedUser == null || isSending)
            return;

        try
        {
            isSending = true;
            string textToSend = NewMessageText;

            if (selectedFile != null)
            {
                using var content = new MultipartFormDataContent();
                var stream = selectedFile.OpenReadStream(20_000_000);
                var fileContent = new StreamContent(stream);
                content.Add(fileContent, "File", selectedFile.Name);
                content.Add(new StringContent(selectedFile.Name), "Name");

                var uploadResp = await Http.PostAsync("api/File/uploadfile", content);
                if (!uploadResp.IsSuccessStatusCode)
                {
                    var err = await uploadResp.Content.ReadAsStringAsync();
                    Console.WriteLine($"[Messages] File upload failed: {err}");
                    await JS.InvokeVoidAsync("alert", "File upload failed.");
                    return;
                }

                var uploadJson = await uploadResp.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                // 🔥 read lowercase key
                var url = uploadJson != null && uploadJson.ContainsKey("signedUrl") ? uploadJson["signedUrl"] : null;

                var kind = (selectedFile.ContentType?.StartsWith("image") == true) ? "image" :
                           (selectedFile.ContentType?.StartsWith("video") == true) ? "video" : "file";
                textToSend = $"ATTACH|{kind}|{url}|{selectedFile.Name}";
            }

            var request = new
            {
                SenderId = CurrentUserId,
                ReceiverId = SelectedUser.Id,
                MessageText = textToSend
            };

            var response = await Http.PostAsJsonAsync("api/Messaging/send", request);

            if (response.IsSuccessStatusCode)
            {
                ConversationMessages ??= new List<DirectMessage>();
                ConversationMessages.Add(new DirectMessage
                {
                    SenderId = CurrentUserId,
                    ReceiverId = SelectedUser.Id,
                    MessageText = textToSend,
                    SentAt = DateTime.Now,
                    IsRead = false
                });

                NewMessageText = string.Empty;
                selectedFile = null;
                selectedFileName = null;
                selectedFileType = null;

                await ScrollToBottom();
                Console.WriteLine("✅ [Messages] Message sent successfully");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"⚠️ [Messages] Failed to send message: {error}");
                await JS.InvokeVoidAsync("alert", "Failed to send message. Make sure you're following this user.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] SendMessage: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "An error occurred while sending the message.");
        }
        finally
        {
            isSending = false;
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        selectedFileName = selectedFile?.Name;
        selectedFileType = selectedFile?.ContentType;
    }

    private void ClearSelectedFile()
    {
        selectedFile = null;
        selectedFileName = null;
        selectedFileType = null;
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JS.InvokeVoidAsync("scrollToBottom", ChatContainer);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] ScrollToBottom: {ex.Message}");
        }
    }

    private async Task OpenFilePicker()
    {
        try
        {
            await JS.InvokeVoidAsync("eval", "document.getElementById('filePicker').click()");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Messages] OpenFilePicker error: {ex.Message}");
        }
    }

    private void ToggleSidebar()
    {
        isSidebarCollapsed = !isSidebarCollapsed;
        StateHasChanged();
    }
}
