@page "/messages"
@inject HttpClient Http

<h3>Upload a File</h3>

@if (isUploading)
{
    <p>Uploading file... Please wait.</p>
}
else
{
    <EditForm Model="@fileModel" OnValidSubmit="@UploadFile">
        <InputFile OnChange="@OnFileSelected" />
        <br /><br />
        <button class="btn btn-primary" type="submit" disabled="@(!fileSelected)">
            Upload
        </button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(uploadedUrl))
{
    <div class="mt-3">
        <h5>File uploaded successfully!</h5>
        <p><b>Signed URL:</b></p>
        <a href="@uploadedUrl" target="_blank">@uploadedUrl</a>
    </div>
}

@code {
    private FileInputModel fileModel = new();
    private bool fileSelected = false;
    private bool isUploading = false;
    private string uploadedUrl = string.Empty;

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        fileModel.File = e.File;
        fileSelected = true;
    }

    private async Task UploadFile()
    {
        if (fileModel.File is null)
            return;

        try
        {
            isUploading = true;

            using var content = new MultipartFormDataContent();
            using var stream = fileModel.File.OpenReadStream(maxAllowedSize: 10_000_000); // 10MB max
            var fileContent = new StreamContent(stream);
            content.Add(fileContent, "File", fileModel.File.Name);

            var response = await Http.PostAsync("api/file/uploadfile", content);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadFromJsonAsync<UploadResponse>();
                uploadedUrl = json?.SignedUrl ?? "No URL returned.";
            }
            else
            {
                uploadedUrl = $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            uploadedUrl = $"Exception: {ex.Message}";
        }
        finally
        {
            isUploading = false;
        }
    }

    public class FileInputModel
    {
        public IBrowserFile? File { get; set; }
    }

    public class UploadResponse
    {
        public string? SignedUrl { get; set; }
    }
}
