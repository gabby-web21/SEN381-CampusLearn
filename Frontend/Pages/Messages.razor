@page "/messages"
@using System.Net.Http.Json
@using Sen381.Business.Models
@using Frontend.Services
@inject HttpClient Http
@inject IJSRuntime JS
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/messages.css" />

<div class="dm">
    <!-- ===== Sidebar list of followed users ===== -->
    <div class="list" data-collapsed="False">
        <div class="title">Messages</div>
        <div class="subtitle">People you follow</div>
        <ul class="threads">
            @if (FollowedUsers == null)
            {
                <li>Loading...</li>
            }
            else if (!FollowedUsers.Any())
            {
                <li style="padding: 20px; color: var(--muted); text-align: center;">
                    You're not following anyone yet.<br/>
                    Follow users to start messaging them!
                </li>
            }
            else
            {
                @foreach (var user in FollowedUsers)
                {
                    var active = (user.Id == SelectedUser?.Id) ? "item active" : "item";
                    <li class="@active" @onclick="() => LoadConversation(user)">
                        <img class="avatar" src="@(user.ProfilePicturePath ?? "https://placehold.co/40x40/png")" alt="@user.FirstName" />
                        <div class="user-info">
                            <div class="name">@($"{user.FirstName} {user.LastName}")</div>
                            <div class="meta">@user.RoleString</div>
                        </div>
                    </li>
                }
            }
        </ul>
    </div>

    <!-- ===== Conversation window ===== -->
    <div class="conversation">
        @if (SelectedUser == null)
        {
            <div class="chat" style="display:flex;align-items:center;justify-content:center;color:var(--muted);">
                Select a person to start messaging.
            </div>
        }
        else
        {
            <div class="conv-head">
                <img class="avatar" src="@(SelectedUser.ProfilePicturePath ?? "https://placehold.co/40x40/png")" alt="@SelectedUser.FirstName" />
                <div>
                    <div class="name">@($"{SelectedUser.FirstName} {SelectedUser.LastName}")</div>
                    <div class="meta">@SelectedUser.Email</div>
                </div>
            </div>

            <div class="chat" @ref="ChatContainer">
                @if (ConversationMessages == null)
                {
                    <p style="color:var(--muted)">Loading messages...</p>
                }
                else if (!ConversationMessages.Any())
                {
                    <p style="color:var(--muted)">No messages yet. Start the conversation!</p>
                }
                else
                {
                    @foreach (var msg in ConversationMessages)
                    {
                        var rowClass = (msg.SenderId == CurrentUserId) ? "row outgoing" : "row incoming";
                        <div class="@rowClass">
                            <div class="bubble">@msg.MessageText</div>
                            <div class="time">@msg.SentAt?.ToString("HH:mm")</div>
                        </div>
                    }
                }
            </div>

            <div class="inputbar">
                <input @bind="NewMessageText" @bind:event="oninput" class="input"
                       placeholder="Type your message..." @onkeydown="HandleEnter" />
                <button class="send" @onclick="SendMessage" disabled="@isSending">
                    <i class="bi bi-send"></i>
                </button>
            </div>
        }
    </div>
</div>

@code {
    private List<User>? FollowedUsers;
    private List<DirectMessage>? ConversationMessages;
    private User? SelectedUser;
    private string NewMessageText = string.Empty;
    private ElementReference ChatContainer;
    private bool isSending = false;
    private int CurrentUserId;

    protected override async Task OnInitializedAsync()
    {
        // Get current user ID from auth service
        bool isLoggedIn = await AuthService.IsUserLoggedInAsync();
        if (!isLoggedIn)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        int? userId = await AuthService.GetCurrentUserIdAsync();
        if (userId == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        CurrentUserId = userId.Value;
        await LoadFollowedUsers();
    }

    private async Task LoadFollowedUsers()
    {
        try
        {
            Console.WriteLine($"[Messages] Loading followed users for user {CurrentUserId}");
            FollowedUsers = await Http.GetFromJsonAsync<List<User>>($"api/Follow/following-list/{CurrentUserId}");
            Console.WriteLine($"[Messages] Loaded {FollowedUsers?.Count ?? 0} followed users");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] LoadFollowedUsers: {ex.Message}");
        }
    }

    private async Task LoadConversation(User user)
    {
        try
        {
            SelectedUser = user;
            Console.WriteLine($"[Messages] Loading conversation with user {user.Id}");

            ConversationMessages = await Http.GetFromJsonAsync<List<DirectMessage>>($"api/Messaging/conversation/{CurrentUserId}/{user.Id}");
            Console.WriteLine($"[Messages] Loaded {ConversationMessages?.Count ?? 0} messages");

            // Mark messages as read
            await Http.PutAsync($"api/Messaging/mark-read/{user.Id}/{CurrentUserId}", null);

            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] LoadConversation: {ex.Message}");
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(NewMessageText) || SelectedUser == null || isSending)
            return;

        try
        {
            isSending = true;

            var request = new
            {
                SenderId = CurrentUserId,
                ReceiverId = SelectedUser.Id,
                MessageText = NewMessageText
            };

            Console.WriteLine($"[Messages] Sending message to user {SelectedUser.Id}");
            var response = await Http.PostAsJsonAsync("api/Messaging/send", request);

            if (response.IsSuccessStatusCode)
            {
                // Add message to local list immediately for better UX
                ConversationMessages ??= new List<DirectMessage>();
                ConversationMessages.Add(new DirectMessage
                {
                    SenderId = CurrentUserId,
                    ReceiverId = SelectedUser.Id,
                    MessageText = NewMessageText,
                    SentAt = DateTime.Now,
                    IsRead = false
                });

                NewMessageText = string.Empty;
                await ScrollToBottom();
                Console.WriteLine("✅ [Messages] Message sent successfully");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"⚠️ [Messages] Failed to send message: {error}");
                await JS.InvokeVoidAsync("alert", "Failed to send message. Make sure you're following this user.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] SendMessage: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "An error occurred while sending the message.");
        }
        finally
        {
            isSending = false;
        }
    }

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
            await SendMessage();
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await Task.Delay(100); // Small delay to ensure DOM is updated
            await JS.InvokeVoidAsync("scrollToBottom", ChatContainer);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ [ERROR] ScrollToBottom: {ex.Message}");
        }
    }
}
