@page "/studentprofile"
@page "/studentprofile/{id:int}"
@using Sen381.Business.Models
@using Sen381.Business.Services
@using Sen381.Data_Access
@using Frontend.Models
@using Frontend.Services
@using Frontend.Shared
@inject SupaBaseAuthService SupabaseService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject Frontend.Services.AuthService AuthService
@inject Frontend.Services.SubjectTutorService SubjectTutorService
@inject HttpClient Http

<PageTitle>Profile | CampusLearn</PageTitle>

<!-- ===== Centered avatar header (nav sits above) ===== -->
<header class="page-hd">
    <div class="hd-left">
        <img class="avatar-xl sp-pfp @GetRolePfpClass(currentUser?.RoleString)"
             src="@(string.IsNullOrWhiteSpace(currentUser?.ProfilePicturePath) ? "https://placehold.co/160x160/png" : currentUser!.ProfilePicturePath)"
             onerror="this.onerror=null;this.src='https://placehold.co/160x160/png';"
             alt="Profile picture of @(currentUser?.FirstName) @(currentUser?.LastName)" />

        <!-- semantic-only (hidden by CSS in this layout) -->
        <div class="title-block">
            <h1 class="title">@($"{currentUser?.FirstName} {currentUser?.LastName}")</h1>
        </div>
        <div class="subtitle">
            @(currentUser?.RoleString)
            @if (!string.IsNullOrWhiteSpace(currentUser?.Program))
            {
                <span> &middot; @currentUser.Program</span>
            }
            @if (!string.IsNullOrWhiteSpace(currentUser?.Year))
            {
                <span> &middot; @currentUser.Year Year</span>
            }
            @if (currentUser?.Id > 0)
            {
                <span class="muted"> &middot; ID: @currentUser.Id</span>
            }
        </div>
    </div>

    <div class="hd-actions">
        @if (isOwnProfile)
        {
            <NavLink class="btn primary" href="/create-profile">Edit profile</NavLink>
        }
        else
        {
            <button class="btn @(isFollowing ? "following" : "primary")" @onclick="ToggleFollow" disabled="@isTogglingFollow">
                @if (isTogglingFollow)
                {
                    <span>...</span>
                }
                else
                {

                    <span>@(isFollowing ? "Unfollow" : "Follow")</span>
                }
            </button>
        }
        <NavLink class="btn" href="/messages">Message</NavLink>
    </div>
</header>

<!-- ===== Tabs ===== -->
<nav class="tabs" aria-label="Profile sections">
    <button class="tab @(activeTab == "profile" ? "active" : "")" @onclick="SetProfileTab">Profile</button>
    <button class="tab @(activeTab == "tutor" ? "active" : "")" @onclick="SetTutorTab">Tutor</button>
    <button class="tab @(activeTab == "sessions" ? "active" : "")" @onclick="SetSessionsTab">Sessions</button>

    @if (isOwnProfile)
    {
        <button class="tab @(activeTab == "settings" ? "active" : "")" @onclick="SetSettingsTab">Settings</button>
    }

    @if (isOwnProfile || isCalendarPublic)
    {
        <button class="tab @(activeTab == "schedule" ? "active" : "")" @onclick="SetScheduleTab">
            Schedule
            @if (!isOwnProfile && isCalendarPublic)
            {
                <span class="tab-pill public">Public</span>
            }
        </button>
    }

    <button class="tab @(activeTab == "noodle" ? "active" : "")" @onclick="SetNoodleTab">Noodle</button>
</nav>

<!-- ===== Content switches ===== -->
@if (activeTab == "noodle")
{
    <!-- Noodle compact interface -->
    <main class="noodle-main">
        <section class="noodle-hero">
            <div class="noodle-left">🐼</div>
            <div class="noodle-copy">
                <h1>Meet Noodle</h1>
                <p class="muted">Your playful study buddy.</p>
            </div>
            <img id="noodle-sprite" src="/images/Noodle idle frame.png" alt="Noodle the Panda" />
        </section>

        <section class="noodle-two">
            <!-- Stats -->
            <div class="noodle-card border-accent">
                <div class="card-hd">Current stats</div>
                <div class="card-body">
                    <div class="noodle-stats">
                        <div class="stat">
                            <div class="emoji">😊</div>
                            <div class="lbl">Happiness</div>
                            <div class="bar"><span style="width:@(happiness)%"></span></div>
                            <div class="num">@happiness%</div>
                        </div>
                        <div class="stat">
                            <div class="emoji">⚡</div>
                            <div class="lbl">Energy</div>
                            <div class="bar"><span style="width:@(energy)%"></span></div>
                            <div class="num">@energy%</div>
                        </div>
                        <div class="stat">
                            <div class="emoji">🍎</div>
                            <div class="lbl">Hunger</div>
                            <div class="bar"><span style="width:@(hunger)%"></span></div>
                            <div class="num">@hunger%</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Care tips next to stats with vertical actions -->
            <div class="noodle-card">
                <div class="card-hd">💡 Care tips</div>
                <div class="card-body">
                    <ul class="tips">
                        <li>Log in daily to keep Noodle happy.</li>
                        <li>Feed cookie when hunger is low.</li>
                        <li>Let Noodle play when happiness is low</li>
                        <li>Give pets for instant happiness boost.</li>
                    </ul>
                    <div class="noodle-actions side">
                        <button class="noodle-action" @onclick="FeedNoodle"><span>🍎</span><strong>Feed</strong></button>
                        <button class="noodle-action" @onclick="PlayWithNoodle"><span>🎾</span><strong>Play</strong></button>
                        <button class="noodle-action" @onclick="PetNoodle"><span>💕</span><strong>Pet</strong></button>
                    </div>
                </div>
            </div>
        </section>
    </main>
}
else if (activeTab == "tutor")
{
    <!-- Tutor Subjects Interface -->
    <main class="tutor-main">
        <section class="card">
            <h2 class="card-hd">Subjects I Tutor</h2>
            @if (tutorSubjects == null || !tutorSubjects.Any())
            {
                <div class="empty-state">
                    <p class="muted">You are not currently approved to tutor any subjects.</p>
                    <p class="muted">Apply to become a tutor for specific subjects to see them listed here.</p>
                    <div style="margin-top:12px">
                        <NavLink class="btn primary" href="/become-tutor">Apply to be a tutor</NavLink>
                    </div>
                </div>
            }
            else
            {
                <div class="tutor-subjects-grid">
                    @foreach (var subject in tutorSubjects)
                    {
                        <div class="tutor-subject-card" @onclick='() => ViewSubscribers(subject.SubjectId)'>
                            <div class="subject-info">
                                <h3 class="subject-code">@subject.SubjectCode</h3>
                                <p class="subject-name">@subject.Name</p>
                                <p class="subject-year">Year @subject.Year</p>
                            </div>
                        </div>
                    }
                </div>
            }
        </section>
    </main>
}
else if (activeTab == "sessions")
{
    <!-- Sessions Interface -->
    <main class="sessions-main">
        <section class="card">
            <h2 class="card-hd">Tutoring Sessions</h2>
            <div class="session-filter">
                <div class="filter-buttons">
                    <button class="filter-btn @(sessionFilter == "all" ? "active" : "")" @onclick='() => SetSessionFilter("all")'>All Sessions</button>
                    <button class="filter-btn @(sessionFilter == "created" ? "active" : "")" @onclick='() => SetSessionFilter("created")'>Invited</button>
                    <button class="filter-btn @(sessionFilter == "invited" ? "active" : "")" @onclick='() => SetSessionFilter("invited")'>Created</button>
                </div>
            </div>
            @if (filteredSessions == null || !filteredSessions.Any())
            {
                <div class="empty-state">
                    <p class="muted">No tutoring sessions attended yet.</p>
                    <p class="muted">Join tutoring sessions from your calendar to see them listed here.</p>
                    <p class="muted">Debug: attendedSessions is @(attendedSessions == null ? "null" : $"not null with {attendedSessions.Count} items")</p>
                </div>
            }
            else
            {
                <div class="sessions-list">
                    @foreach (var session in filteredSessions)
                    {
                        <div class="session-card clickable" @onclick='() => ViewSessionDetails(session)'>
                            <div class="session-header">
                                <h3 class="session-title">@session.Title</h3>
                                <span class="session-status @session.Status.ToLower()">@session.Status</span>
                            </div>
                            <div class="session-details">
                                <div class="session-info">
                                    <div class="session-date"><strong>Date:</strong> @session.SessionDate.ToString("dddd, MMMM dd, yyyy")</div>
                                    <div class="session-time"><strong>Time:</strong> @session.SessionDate.ToString("HH:mm") - @session.SessionDate.AddMinutes(session.DurationMinutes).ToString("HH:mm")</div>
                                    <div class="session-duration"><strong>Duration:</strong> @FormatSessionDuration(session.DurationMinutes)</div>
                                    @if (!string.IsNullOrEmpty(session.Description))
                                    {
                                        <div class="session-description"><strong>Description:</strong> @session.Description</div>
                                    }
                                </div>
                                <div class="session-participants">
                                    @if (session.TutorId == currentUser?.Id)
                                    {
                                        <div class="participant"><strong>Participant:</strong> @session.StudentFullName</div>
                                    }
                                    else
                                    {
                                        <div class="participant"><strong>Participant:</strong> @session.TutorFullName</div>
                                    }
                                </div>
                            </div>
                            <div class="session-hint"><span class="hint-text">Click to view chat history and resources</span></div>
                        </div>
                    }
                </div>
            }
        </section>
    </main>
    <SessionDetailModal Session="selectedSession" IsVisible="showSessionModal" OnClose="async () => await CloseSessionModal()" />
}
else if (activeTab == "settings" && isOwnProfile)
{
    <!-- Settings (owner only) -->
    <main class="sp-shell">
        <section class="sp-pane">
            <div class="sp-pane-hd">
                <h1 class="sp-name">Settings</h1>
            </div>

            <div class="sp-blocks">
                <div class="sp-block">
                    <div class="sp-block-hd">Profile & Account</div>
                    <div class="sp-block-body pref-grid">
                        <NavLink class="pref-btn" href="/create-profile">Edit profile</NavLink>
                    </div>
                </div>

                <div class="sp-block">
                    <div class="sp-block-hd">Visibility</div>
                    <div class="sp-block-body">
                        <div class="pref-row">
                            <div>
                                <div class="pref-title">Public schedule</div>
                                <div class="pref-desc">Let others view your availability tab for easier tutor bookings.</div>
                            </div>
                            <label class="switch">
                                <input type="checkbox" checked="@isCalendarPublic" @onchange="OnCalendarVisibilityChanged" />
                                <span class="slider"></span>
                            </label>
                        </div>
                        <p class="muted" style="margin-top:8px">
                            When enabled, a <strong>Schedule</strong> tab appears on your public profile.
                        </p>
                    </div>
                </div>
            </div>
        </section>
    </main>
}
else if (activeTab == "schedule" && (isOwnProfile || isCalendarPublic))
{
    <!-- Public/own schedule surface (lightweight preview) -->
    <main class="schedule-main">
        <section class="card">
            <h2 class="card-hd">Schedule overview</h2>
            <div class="sched-note muted">
                @if (isOwnProfile)
                {
                    <span>This is what others will see when your schedule is public.</span>
                }
                else
                {
                    <span>You're viewing @currentUser?.FirstName's public availability snapshot.</span>
                }
            </div>

            <div class="sched-grid">
                <div class="sched-day">
                    <div class="sched-day-hd">Mon</div>
                    <div class="block busy" style="grid-row: 10 / span 3"></div>
                    <div class="block busy" style="grid-row: 15 / span 2"></div>
                </div>
                <div class="sched-day">
                    <div class="sched-day-hd">Tue</div>
                    <div class="block busy" style="grid-row: 12 / span 3"></div>
                </div>
                <div class="sched-day">
                    <div class="sched-day-hd">Wed</div>
                    <div class="block busy" style="grid-row: 9 / span 2"></div>
                    <div class="block busy" style="grid-row: 16 / span 2"></div>
                </div>
                <div class="sched-day">
                    <div class="sched-day-hd">Thu</div>
                </div>
                <div class="sched-day">
                    <div class="sched-day-hd">Fri</div>
                    <div class="block busy" style="grid-row: 11 / span 4"></div>
                </div>
            </div>

            <p class="muted" style="margin-top:10px">Times are illustrative. Hook this to your real calendar to show live busy slots.</p>
        </section>
    </main>
}
else
{
    <!-- ===== Profile Pane layout ===== -->
    <main class="sp-shell">
        <section class="sp-pane">
            <div class="sp-pane-hd">
                <h1 class="sp-name">@($"{currentUser?.FirstName} {currentUser?.LastName}")</h1>

                <div class="sp-role-row">
                    @if (!isOwnProfile)
                    {
                        <button class="sp-follow-btn @(isFollowing ? "on" : null)" @onclick="ToggleFollow" disabled="@isTogglingFollow" aria-pressed="@isFollowing">
                            @if (isTogglingFollow)
                            {
                                <span>…</span>
                            }
                            else if (isFollowing)
                            {
                                <span class="sr-only">Following</span>
                                <svg class="icon-check" width="18" height="18" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                                    <path d="M5 13l4 4L19 7" stroke="currentColor" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                            }
                            else
                            {
                                <span>Follow</span>
                            }
                        </button>
                    }
                    <div class="sp-role-badge @GetRoleBadgeClass(currentUser?.RoleString)">@(" " + FormatRole(currentUser?.RoleString) + " ")</div>
                </div>

                <!-- Top-right button -->
                <button class="sp-chat-btn"
                        aria-label="@((isOwnProfile ? "Edit profile" : "Message"))"
                        title="@((isOwnProfile ? "Edit profile" : "Message"))"
                        @onclick="async () => await OnPrimaryHeaderButtonClick()">
                    @if (isOwnProfile)
                    {
                        <!-- pencil -->
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                            <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25z" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M14.06 4.94l3.75 3.75" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    }
                    else
                    {
                        <!-- chat -->
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                            <path d="M4 5h16v10H8l-4 4V5z" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round" />
                            <circle cx="10" cy="10" r="1" fill="currentColor" />
                            <circle cx="14" cy="10" r="1" fill="currentColor" />
                            <circle cx="18" cy="10" r="1" fill="currentColor" />
                        </svg>
                    }
                </button>
            </div>

            <!-- Blocks container (About → Connections → Contact → Interests → Additional Info) -->
            <div class="sp-blocks">
                <div class="sp-block">
                    <div class="sp-block-hd">About</div>
                    <div class="sp-block-body">
                        <p class="about">
                            @if (string.IsNullOrWhiteSpace(currentUser?.About))
                            {
                                <span class="muted">No description provided.</span>
                            }
                            else
                            {
                                @currentUser.About
                            }
                        </p>
                    </div>
                </div>

                <div class="sp-block">
                    <div class="sp-block-hd">Connections</div>
                    <div class="sp-block-body">
                        <div class="sp-counters">
                            <div class="sp-counter">
                                <div class="sp-counter-num">@followersCount</div>
                                <div class="sp-counter-lbl">followers</div>
                            </div>
                            <div class="sp-counter">
                                <div class="sp-counter-num">@followingCount</div>
                                <div class="sp-counter-lbl">following</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="sp-block">
                    <div class="sp-block-hd">Contact</div>
                    <div class="sp-block-body">
                        <dl class="contact-list sp-contact">
                            <div class="contact-item">
                                <dt>Email</dt>
                                <dd><a href="mailto:@currentUser?.Email">@currentUser?.Email</a></dd>
                            </div>
                            <div class="contact-item">
                                <dt>Phone</dt>
                                <dd>@(string.IsNullOrWhiteSpace(currentUser?.PhoneNum) ? "—" : currentUser?.PhoneNum)</dd>
                            </div>
                            <div class="contact-item">
                                <dt>Website</dt>
                                <dd>
                                    @if (string.IsNullOrWhiteSpace(currentUser?.Website))
                                    {
                                        <span>—</span>
                                    }
                                    else
                                    {
                                        <a href="@currentUser!.Website" target="_blank" rel="noopener">@currentUser!.Website</a>
                                    }
                                </dd>
                            </div>
                        </dl>
                    </div>
                </div>

                @if (Interests?.Count > 0)
                {
                    <div class="sp-block">
                        <div class="sp-block-hd">Interests</div>
                        <div class="sp-block-body">
                            <div class="tags">
                                @foreach (var tag in Interests)
                                {
                                    <span class="tag">@tag</span>
                                }
                            </div>
                        </div>
                    </div>
                }

                @* === NEW: Additional Info (conditionally visible) === *@
                @if (AdditionalInfoPairs.Count > 0)
                {
                    <div class="sp-block">
                        <div class="sp-block-hd">Additional Info</div>
                        <div class="sp-block-body">
                            <dl class="sp-ai">
                                @foreach (var kv in AdditionalInfoPairs)
                                {
                                    <div class="ai-item">
                                        <dt>@kv.Label</dt>
                                        <dd>@kv.Value</dd>
                                    </div>
                                }
                            </dl>
                        </div>
                    </div>
                }
            </div>
        </section>
    </main>
}

<style>
    /* ===== Tokens ===== */
    :root {
        --bg: #f5f7fb;
        --panel: #fff;
        --ink: #2D3034;
        --muted: color-mix(in oklab, var(--ink) 55%, white);
        --ring: color-mix(in oklab, var(--ink) 12%, white);
        --primary: #1B998B;
        --accent: #3a7bdb;
        --chip: #DBE4EE;
        --radius: 14px;
        --shadow: 0 6px 18px rgba(0,0,0,.06);
        --container: min(1150px,92vw);
        --mist: #eef3f8;
        /* Role accent colors */
        --student-blue: #1D4ED8;
        --tutor-orange: #F59E0B;
        --admin-yellow: #FACC15;
        --success: #10B981; /* green for Following */
    }

    .dark-mode {
        --bg: #1a1a1a;
        --panel: #2d2d2d;
        --ink: #ffffff;
        --muted: #b3b3b3;
        --ring: #404040;
        --chip: #404040;
        --shadow: 0 6px 18px rgba(0,0,0,.3);
    }

    /* ===== Header (centered avatar only) ===== */
    .page-hd {
        width: var(--container);
        margin: 8px auto 10px;
        background: transparent;
        border: 0;
        box-shadow: none;
        padding: 18px 14px 8px;
        display: grid;
        place-items: center;
    }

        .page-hd .title-block, .page-hd .subtitle, .hd-actions {
            display: none;
        }

    .sp-pfp {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        background: #d9d9d9;
        border: 2px solid #BFC7D1;
    }

        .sp-pfp.pfp-student {
            border-color: var(--student-blue);
        }

        .sp-pfp.pfp-tutor {
            border-color: var(--tutor-orange);
        }

        .sp-pfp.pfp-admin {
            border-color: var(--admin-yellow);
        }

    /* ===== Tabs ===== */
    .tabs {
        width: var(--container);
        margin: 0 auto 8px;
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }

    .tab {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        height: 36px;
        padding: 0 14px;
        border-radius: 999px;
        font-weight: 800;
        background: #e8eef7;
        color: #1b2b3b;
        border: 1px solid var(--ring);
        position: relative;
    }

        .tab.active {
            background: #d9e6ff;
            color: #14315f;
            border-color: #c7d7fb;
        }

    .tab-pill.public {
        margin-left: 6px;
        font-size: 11px;
        font-weight: 900;
        background: #E7F5FF;
        color: #1E64C8;
        padding: 2px 6px;
        border-radius: 999px;
        border: 1px solid #CDE8FF;
    }

    /* ===== Student Profile pane ===== */
    .sp-shell {
        width: var(--container);
        margin: 0 auto 40px;
    }

    .sp-pane {
        position: relative;
        background: var(--panel);
        border: 1px solid var(--ring);
        border-radius: 28px;
        box-shadow: 0 10px 28px rgba(0,0,0,.06);
        padding: 28px 22px 26px;
    }

    .sp-pane-hd {
        text-align: center;
        position: relative;
    }

    .sp-name {
        margin: 10px 0 0;
        font-weight: 900;
        font-size: clamp(22px, 2.6vw, 30px);
    }

    .sp-role-row {
        margin-top: 8px;
        display: inline-flex;
        align-items: center;
        gap: 10px;
    }

    .sp-follow-btn {
        height: 30px;
        padding: 0 12px;
        border-radius: 999px;
        background: #e9eef7;
        border: 1px solid var(--ring);
        font-weight: 800;
        color: #1b2b3b;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 6px;
    }

        .sp-follow-btn:hover {
            filter: brightness(.98);
        }

        .sp-follow-btn.on {
            width: 30px;
            height: 30px;
            padding: 0;
            border-radius: 999px;
            cursor: pointer;
            background: var(--success);
            border-color: var(--success);
            color: #fff;
            display: inline-grid;
            place-items: center;
        }

        .sp-follow-btn[disabled] {
            opacity: .6;
            cursor: not-allowed;
        }

    .icon-check {
        display: block;
    }

    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0,0,0,0);
        white-space: nowrap;
        border: 0;
    }

    .sp-role-badge {
        padding: 4px 10px;
        border-radius: 999px;
        font-weight: 800;
        color: #6a717c;
        background: #f3f6fb;
        border: 1px solid #e3e8f0;
    }

        .sp-role-badge.badge-student {
            border-color: color-mix(in oklab, var(--student-blue) 35%, white);
        }

        .sp-role-badge.badge-tutor {
            border-color: color-mix(in oklab, var(--tutor-orange) 35%, white);
        }

        .sp-role-badge.badge-admin {
            border-color: color-mix(in oklab, var(--admin-yellow) 35%, white);
        }

    .sp-chat-btn {
        position: absolute;
        right: 10px;
        top: -14px;
        width: 56px;
        height: 56px;
        border-radius: 999px;
        cursor: pointer;
        border: 2px solid #5aa0ff;
        background: #fff;
        color: #7c8aa0;
        display: grid;
        place-items: center;
        box-shadow: var(--shadow);
        transition: transform .15s ease;
    }

        .sp-chat-btn:hover {
            transform: translateY(-1px);
        }

    .sp-blocks {
        display: grid;
        gap: 18px;
        margin-top: 18px;
    }

    .sp-block {
        background: #f1f3f6;
        border: 1px solid #e5e9f0;
        border-radius: 22px;
        padding: 16px;
    }

    .sp-block-hd {
        font-size: 1.05rem;
        font-weight: 800;
        color: #6a717c;
        margin-bottom: 10px;
    }

    .sp-block-body {
        padding: 4px;
    }

    .sp-contact .contact-item {
        display: grid;
        grid-template-columns: 110px 1fr;
    }

    .sp-contact dt {
        color: #6a717c;
        font-weight: 800;
    }

    .sp-contact dd {
        font-weight: 700;
        color: var(--ink);
        margin: 0;
    }

    .sp-counters {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px,1fr));
        gap: 16px;
    }

    .sp-counter {
        background: #fff;
        border: 1.5px solid #D7DEE8;
        border-radius: 18px;
        padding: 18px 12px;
        text-align: center;
        box-shadow: 0 2px 0 rgba(0,0,0,.03) inset;
    }

    .sp-counter-num {
        font-size: 1.6rem;
        font-weight: 900;
        color: var(--primary);
    }

    .sp-counter-lbl {
        margin-top: 4px;
        font-size: .8rem;
        color: #7f8a98;
        font-weight: 700;
    }

    /* Tutor & Sessions */
    .tutor-main {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .tutor-subjects-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px,1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .tutor-subject-card {
        background: var(--panel);
        border: 1px solid var(--ring);
        border-radius: 12px;
        padding: 20px;
        transition: all .3s ease;
        box-shadow: var(--shadow);
        cursor: pointer;
    }

        .tutor-subject-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,.1);
            border-color: var(--accent);
        }

    .subject-info {
        margin-bottom: 15px;
    }

    .subject-code {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--accent);
        margin: 0 0 8px 0;
    }

    .subject-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--ink);
        margin: 0 0 5px 0;
    }

    .subject-year {
        font-size: .9rem;
        color: var(--muted);
        margin: 0;
    }

    .sessions-main {
        padding: 20px;
        max-width: var(--container);
        margin: 0 auto;
    }

    .sessions-list {
        display: flex;
        flex-direction: column;
        gap: 16px;
        margin-top: 20px;
    }

    .session-card {
        background: var(--panel);
        border: 1px solid var(--ring);
        border-radius: 12px;
        padding: 20px;
        transition: all .3s ease;
        box-shadow: var(--shadow);
    }

        .session-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,.1);
            border-color: var(--accent);
        }

        .session-card.clickable {
            cursor: pointer;
            position: relative;
        }

            .session-card.clickable:hover {
                background: #f8fafc;
            }

    .session-hint {
        margin-top: 12px;
        padding-top: 12px;
        border-top: 1px solid #e5e7eb;
        text-align: center;
    }

    .hint-text {
        font-size: .875rem;
        color: #6b7280;
        font-style: italic;
    }

    .session-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
    }

    .session-title {
        font-size: 1.3rem;
        font-weight: 700;
        color: var(--ink);
        margin: 0;
    }

    .session-status {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: .85rem;
        font-weight: 600;
        text-transform: uppercase;
    }

        .session-status.pending {
            background: #fef3c7;
            color: #92400e;
        }

        .session-status.confirmed {
            background: #d1fae5;
            color: #065f46;
        }

        .session-status.completed {
            background: #dbeafe;
            color: #1e40af;
        }

        .session-status.cancelled {
            background: #fee2e2;
            color: #991b1b;
        }

    .session-details {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 20px;
        align-items: start;
    }

    .session-info {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

        .session-info > div {
            font-size: .95rem;
            color: var(--ink);
        }

        .session-info strong {
            color: var(--muted);
            margin-right: 8px;
        }

    .session-participants {
        text-align: right;
    }

    .participant {
        font-size: .95rem;
        color: var(--ink);
    }

        .participant strong {
            color: var(--muted);
            margin-right: 8px;
        }

    .session-filter {
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 1px solid #e0e0e0;
    }

    .filter-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .filter-btn {
        padding: 8px 16px;
        border: 2px solid #e0e0e0;
        background: white;
        color: #666;
        border-radius: 20px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all .2s ease;
    }

        .filter-btn:hover {
            border-color: #007bff;
            color: #007bff;
        }

        .filter-btn.active {
            background: #007bff;
            border-color: #007bff;
            color: white;
        }

    @@media (max-width: 768px) {
        .session-details {
            grid-template-columns: 1fr;
            gap: 12px;
        }

        .session-participants {
            text-align: left;
        }

        .sp-chat-btn {
            right: 12px;
            top: 12px;
            width: 50px;
            height: 50px;
        }
    }

    /* Dark mode touches */
    .dark-mode .sp-pane {
        background: var(--panel);
        border-color: var(--ring);
    }

    .dark-mode .sp-block {
        background: #2b2b2b;
        border-color: #3a3a3a;
    }

    .dark-mode .sp-counter {
        background: #1f1f1f;
        border-color: #3a3a3a;
    }

    .dark-mode .sp-counter-lbl {
        color: #a0a0a0;
    }

    /* Schedule preview */
    .schedule-main {
        width: var(--container);
        margin: 0 auto 24px;
        padding: 0 2px;
    }

    .sched-note {
        margin-top: 4px;
    }

    .sched-grid {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 10px;
        margin-top: 14px;
    }

    .sched-day {
        background: #FBFDFF;
        border: 1px solid #E3EBF7;
        border-radius: 12px;
        padding: 10px;
        display: grid;
        grid-template-rows: 24px repeat(20, minmax(8px, 1fr));
        gap: 4px;
    }

    .sched-day-hd {
        font-weight: 900;
        color: #3a6ac9;
    }

    .block.busy {
        background: #E3EEFF;
        border: 1px solid #C7DBFF;
        border-radius: 8px;
    }

    /* --- NOODLE LAYOUT (alignment fix) --- */
    .noodle-main {
        width: var(--container);
        margin: 0 auto 12px;
    }

    .noodle-hero {
        display: grid;
        grid-template-columns: 64px 1fr 140px;
        align-items: center;
        gap: 16px;
        padding: 16px 18px;
        border-radius: 18px;
        color: #fff;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .noodle-left {
        width: 56px;
        height: 56px;
        border-radius: 50%;
        display: grid;
        place-items: center;
        background: rgba(255,255,255,.18);
        outline: 2px solid rgba(255,255,255,.35);
        font-size: 2rem;
    }

    .noodle-copy h1 {
        margin: 0;
        font-size: 1.8rem;
        font-weight: 900;
    }

    #noodle-sprite {
        width: 140px;
        height: 140px;
        object-fit: contain;
        justify-self: end;
    }

    .noodle-two {
        display: grid;
        grid-template-columns: 1fr min(420px, 40%);
        gap: 16px;
        align-items: start;
        margin-top: 12px;
    }

    @@media (max-width: 980px) {
        .noodle-two {
            grid-template-columns: 1fr;
        }
    }

    .noodle-card {
        background: #fff;
        border: 1px solid var(--ring);
        border-radius: 16px;
        box-shadow: var(--shadow);
    }

        .noodle-card .card-hd {
            padding: 12px 14px;
            border-bottom: 1px solid var(--ring);
            font-weight: 900;
        }

        .noodle-card .card-body {
            padding: 12px 14px;
        }

    .border-accent {
        border-color: #3a7bdb;
    }

    .noodle-stats {
        display: grid;
        grid-template-columns: repeat(3,1fr);
        gap: 8px;
    }

    .stat {
        background: #f8f9fb;
        border: 1px solid #e9eef6;
        border-radius: 12px;
        padding: 10px;
        text-align: center;
    }

    .emoji {
        font-size: 1.8rem;
    }

    .lbl {
        font-weight: 700;
    }

    .bar {
        height: 10px;
        background: #e9eef6;
        border-radius: 6px;
        overflow: hidden;
    }

        .bar span {
            display: block;
            height: 100%;
            background: linear-gradient(90deg, #4ade80, #22c55e);
        }

    .num {
        font-weight: 800;
    }

    .noodle-actions.side {
        display: grid;
        gap: 8px;
        margin-top: 10px;
    }

    .noodle-action {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 10px 12px;
        border: 1px solid var(--ring);
        background: #fff;
        border-radius: 12px;
        cursor: pointer;
        font-weight: 800;
    }

    /* Additional Info list (matches CreateProfile) */
    .sp-ai .ai-item {
        display: grid;
        grid-template-columns: 140px 1fr;
        gap: 8px;
        padding: 8px 10px
    }

        .sp-ai .ai-item + .ai-item {
            border-top: 1px dashed #e6eaf2
        }

    .sp-ai dt {
        font-weight: 800;
        color: #6a717c
    }

    .sp-ai dd {
        margin: 0;
        font-weight: 700
    }
</style>

<script>
    window.playEatingAnimationWithDelay = function(componentRef) {
        const sprite = document.getElementById('noodle-sprite');
        if (!sprite) return;
        setTimeout(() => {
            const frames = [
                '/images/Noodle eating/noodle-eating-1.png','/images/Noodle eating/noodle-eating-2.png','/images/Noodle eating/noodle-eating-3.png',
                '/images/Noodle eating/noodle-eating-4.png','/images/Noodle eating/noodle-eating-5.png','/images/Noodle eating/noodle-eating-6.png'
            ];
            let i = 0, iv = 300;
            const h = setInterval(() => {
                sprite.src = frames[i++];
                if (i >= frames.length) {
                    clearInterval(h);
                    setTimeout(() => {
                        sprite.src = '/images/Noodle idle frame.png';
                        if (componentRef) componentRef.invokeMethodAsync('UpdateHungerAfterAnimation');
                    }, iv);
                }
            }, iv);
        }, 100);
    };

    window.playTwerkingAnimationWithDelay = function(componentRef) {
        const sprite = document.getElementById('noodle-sprite');
        if (!sprite) return;
        setTimeout(() => {
            const frames = [
                '/images/Noodle twerking/noodle-twerking-1.png','/images/Noodle twerking/noodle-twerking-2.png','/images/Noodle twerking/noodle-twerking-3.png',
                '/images/Noodle twerking/noodle-twerking-4.png','/images/Noodle twerking/noodle-twerking-5.png','/images/Noodle twerking/noodle-twerking-6.png',
                '/images/Noodle twerking/noodle-twerking-7.png','/images/Noodle twerking/noodle-twerking-8.png'
            ];
            let i = 0, loops = 0, maxLoops = 3, iv = 62.5;
            const h = setInterval(() => {
                sprite.src = frames[i++];
                if (i >= frames.length) {
                    i = 0;
                    if (++loops >= maxLoops) {
                        clearInterval(h);
                        setTimeout(() => {
                            sprite.src = '/images/Noodle idle frame.png';
                            if (componentRef) componentRef.invokeMethodAsync('UpdateHappinessAfterPlay');
                        }, iv);
                    }
                }
            }, iv);
        }, 100);
    };

    window.playPettingAnimationWithDelay = function(componentRef) {
        const sprite = document.getElementById('noodle-sprite');
        if (!sprite) return;
        setTimeout(() => {
            const frames = [
                '/images/Noodle petting/Noodle-petting-1.png','/images/Noodle petting/Noodle-petting-2.png','/images/Noodle petting/Noodle-petting-3.png',
                '/images/Noodle petting/Noodle-petting-4.png','/images/Noodle petting/Noodle-petting-5.png','/images/Noodle petting/Noodle-petting-6.png',
                '/images/Noodle petting/Noodle-petting-7.png','/images/Noodle petting/Noodle-petting-8.png','/images/Noodle petting/Noodle-petting-9.png'
            ];
            let i = 0, loops = 0, maxLoops = 2, iv = 80;
            const h = setInterval(() => {
                sprite.src = frames[i++];
                if (i >= frames.length) {
                    i = 0;
                    if (++loops >= maxLoops) {
                        clearInterval(h);
                        setTimeout(() => {
                            sprite.src = '/images/Noodle idle frame.png';
                            if (componentRef) componentRef.invokeMethodAsync('UpdateEnergyAfterPetting');
                        }, iv);
                    }
                }
            }, iv);
        }, 100);
    };
</script>

@code {
    [Parameter] public int? id { get; set; }

    private User? currentUser;
    private bool isLoading = true;
    private string activeTab = "profile";

    // Public schedule flag (not on User model)
    private bool isCalendarPublic = false;

    // Noodle stats
    private int happiness = 85;
    private int energy = 70;
    private int hunger = 60;

    private List<string> Interests = new();
    private bool isOwnProfile = false;
    private bool isFollowing = false;
    private bool isTogglingFollow = false;
    private int followersCount = 0;
    private int followingCount = 0;
    private List<Frontend.Services.SubjectVM>? tutorSubjects = null;
    private List<Frontend.Services.BookingSessionVM>? attendedSessions = null;
    private List<Frontend.Services.BookingSessionVM>? filteredSessions = null;
    private string sessionFilter = "all";

    // === Additional Info (matches CreateProfile rules)
    private record LabeledValue(string Label, string Value);
    private List<LabeledValue> AdditionalInfoPairs =>
        currentUser is null ? new() : BuildAdditionalInfo(currentUser);
    private List<LabeledValue> BuildAdditionalInfo(User u)
    {
        var list = new List<LabeledValue>();
        void Add(string label, string? val)
        {
            if (!string.IsNullOrWhiteSpace(val))
                list.Add(new LabeledValue(label, val.Trim()));
        }
        // About/Interests/Contact already have blocks; Year intentionally excluded (read-only).
        Add("Programme", u.Program);
        Add("City/Town", u.City);
        Add("Country", u.Country);
        Add("Timezone", u.Timezone);
        return list;
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            isLoading = true;
            await SupabaseService.InitializeAsync();

            bool isLoggedIn = await AuthService.IsUserLoggedInAsync();
            if (!isLoggedIn) { NavigationManager.NavigateTo("/login"); return; }

            int? loggedInUserId = await AuthService.GetCurrentUserIdAsync();
            if (loggedInUserId == null) { NavigationManager.NavigateTo("/login"); return; }

            int targetId = id ?? loggedInUserId.Value;
            isOwnProfile = targetId == loggedInUserId.Value;

            var response = await Http.GetAsync($"api/Profile/{targetId}");
            if (!response.IsSuccessStatusCode) { Console.WriteLine($"⚠️ Failed to load profile data. Status: {response.StatusCode}"); return; }

            currentUser = await response.Content.ReadFromJsonAsync<User>();

            Console.WriteLine($"[StudentProfile] Loaded user: {currentUser?.FirstName} {currentUser?.LastName}");
            Console.WriteLine($"[StudentProfile] ProfilePicturePath: '{currentUser?.ProfilePicturePath}'");

            if (currentUser != null && !string.IsNullOrWhiteSpace(currentUser.Interests))
                Interests = currentUser.Interests.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(i => i.Trim()).ToList();

            if (!isOwnProfile && currentUser != null)
                await CheckFollowStatus(loggedInUserId.Value, currentUser.Id);

            if (currentUser != null)
            {
                await LoadFollowerCounts(currentUser.Id);
                if (currentUser.RoleString?.ToLower() == "tutor")
                    await LoadTutorSubjects(currentUser.Id);

                await LoadCalendarVisibility(currentUser.Id); // separate flag (robust parser)
            }
        }
        catch (Exception ex) { Console.WriteLine($"⚠️ Failed to load profile: {ex.Message}"); }
        finally { isLoading = false; }
    }

    // === Calendar visibility (robust parse: supports bool or { isPublic })
    private async Task LoadCalendarVisibility(int userId)
    {
        try
        {
            var resp = await Http.GetAsync($"api/Profile/{userId}/calendar-visibility");
            if (!resp.IsSuccessStatusCode) { isCalendarPublic = false; return; }

            var raw = await resp.Content.ReadAsStringAsync();
            // try plain bool
            if (bool.TryParse(raw.Trim().Trim('"'), out var b))
            {
                isCalendarPublic = b; return;
            }
            // try JSON object
            try
            {
                using var doc = System.Text.Json.JsonDocument.Parse(raw);
                if (doc.RootElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                {
                    if (doc.RootElement.TryGetProperty("isPublic", out var lo)) { isCalendarPublic = lo.GetBoolean(); return; }
                    if (doc.RootElement.TryGetProperty("IsPublic", out var up)) { isCalendarPublic = up.GetBoolean(); return; }
                }
            }
            catch { /* ignore parse errors */ }

            isCalendarPublic = false;
        }
        catch { isCalendarPublic = false; }
    }

    private async Task OnCalendarVisibilityChanged(ChangeEventArgs e)
    {
        // Normalize checkbox values ("true"/"on")
        var v = (e?.Value?.ToString() ?? "").Trim().ToLowerInvariant();
        isCalendarPublic = v == "true" || v == "on";

        try
        {
            if (isOwnProfile && (currentUser?.Id ?? 0) > 0)
            {
                var resp = await Http.PutAsJsonAsync($"api/Profile/{currentUser!.Id}/calendar-visibility", new { isPublic = isCalendarPublic });
                if (!resp.IsSuccessStatusCode)
                {
                    Console.WriteLine("⚠️ PUT calendar-visibility failed.");
                }
            }
        }
        catch (Exception ex) { Console.WriteLine($"⚠️ Error saving calendar visibility: {ex.Message}"); }
    }

    private async Task CheckFollowStatus(int followerId, int followingId)
    {
        try
        {
            var response = await Http.GetAsync($"api/Follow/check/{followerId}/{followingId}");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<FollowStatusResponse>();
                isFollowing = result?.IsFollowing ?? false;
            }
        }
        catch (Exception ex) { Console.WriteLine($"⚠️ Error checking follow status: {ex.Message}"); }
    }

    private async Task LoadFollowerCounts(int userId)
    {
        try
        {
            var followersResponse = await Http.GetAsync($"api/Follow/followers-count/{userId}");
            if (followersResponse.IsSuccessStatusCode)
            {
                var followersResult = await followersResponse.Content.ReadFromJsonAsync<CountResponse>();
                followersCount = followersResult?.Count ?? 0;
            }

            var followingResponse = await Http.GetAsync($"api/Follow/following-count/{userId}");
            if (followingResponse.IsSuccessStatusCode)
            {
                var followingResult = await followingResponse.Content.ReadFromJsonAsync<CountResponse>();
                followingCount = followingResult?.Count ?? 0;
            }
        }
        catch (Exception ex) { Console.WriteLine($"⚠️ Error loading follower counts: {ex.Message}"); }
    }

    private async Task ToggleFollow()
    {
        if (currentUser == null || isTogglingFollow) return;

        try
        {
            isTogglingFollow = true;
            int? loggedInUserId = await AuthService.GetCurrentUserIdAsync();
            if (loggedInUserId == null) return;

            var endpoint = isFollowing ? "api/Follow/unfollow" : "api/Follow/follow";
            var payload = new { FollowerId = loggedInUserId.Value, FollowingId = currentUser.Id };

            var response = await Http.PostAsJsonAsync(endpoint, payload);

            if (response.IsSuccessStatusCode)
            {
                isFollowing = !isFollowing;
                await LoadFollowerCounts(currentUser.Id);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"⚠️ Failed to toggle follow: {error}");
                await JS.InvokeVoidAsync("alert", "Failed to update follow status. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ Error toggling follow: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "An error occurred. Please try again.");
        }
        finally { isTogglingFollow = false; }
    }

    private class FollowStatusResponse { public bool IsFollowing { get; set; } }
    private class CalendarVisibilityResponse { public bool IsPublic { get; set; } }
    private class CountResponse { public int Count { get; set; } }

    // ===== Tabs (parameterless wrappers avoid Razor quoting issues)
    private void SetProfileTab() => SetActiveTab("profile");
    private void SetTutorTab() => SetActiveTab("tutor");
    private void SetSessionsTab() { SetActiveTab("sessions"); _ = LoadAttendedSessions(); }
    private void SetSettingsTab() => SetActiveTab("settings");
    private void SetScheduleTab() => SetActiveTab("schedule");
    private void SetNoodleTab() => SetActiveTab("noodle");
    private void SetActiveTab(string tab) { activeTab = tab; StateHasChanged(); }

    private async Task OnPrimaryHeaderButtonClick()
    {
        if (isOwnProfile) { NavigationManager.NavigateTo("/create-profile"); return; }
        if (isFollowing) { NavigationManager.NavigateTo($"/messages?with={currentUser?.Id}"); }
        else { await JS.InvokeVoidAsync("alert", "Please follow this user before sending a message."); }
    }

    // ===== Sessions
    private void SetSessionFilter(string filter) { sessionFilter = filter; ApplySessionFilter(); StateHasChanged(); }
    private void ApplySessionFilter()
    {
        if (attendedSessions == null) { filteredSessions = null; return; }
        filteredSessions = sessionFilter switch
        {
            "created" => attendedSessions.Where(s => s.TutorId == currentUser?.Id).ToList(),
            "invited" => attendedSessions.Where(s => s.StudentId == currentUser?.Id).ToList(),
            _ => attendedSessions.ToList()
        };
    }

    private async Task LoadAttendedSessions()
    {
        try
        {
            if (currentUser?.Id > 0)
            {
                var response = await Http.GetFromJsonAsync<List<Frontend.Services.BookingSessionVM>>($"https://localhost:7228/api/bookingsession/user/{currentUser.Id}");
                attendedSessions = response != null
                    ? response.Where(s => s.Status == "completed").OrderByDescending(s => s.SessionDate).ToList()
                    : new List<Frontend.Services.BookingSessionVM>();
                ApplySessionFilter();
                await InvokeAsync(StateHasChanged);
            }
            else { attendedSessions = new List<Frontend.Services.BookingSessionVM>(); }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ Error loading attended sessions: {ex.Message}");
            attendedSessions = new List<Frontend.Services.BookingSessionVM>();
        }
    }

    private static string FormatSessionDuration(int durationMinutes)
    {
        if (durationMinutes < 60) return $"{durationMinutes} min{(durationMinutes == 1 ? "" : "s")}";
        var hours = durationMinutes / 60; var remaining = durationMinutes % 60;
        return remaining == 0 ? $"{hours} hr{(hours == 1 ? "" : "s")}" : $"{hours}h {remaining}m";
    }

    /* ===== Noodle ===== */
    private async Task FeedNoodle() => await JS.InvokeVoidAsync("playEatingAnimationWithDelay", DotNetObjectReference.Create(this));
    [JSInvokable] public void UpdateHungerAfterAnimation() { hunger = Math.Min(100, hunger + 15); StateHasChanged(); }
    [JSInvokable] public void UpdateHappinessAfterPlay() { happiness = Math.Min(100, happiness + 20); energy = Math.Max(0, energy - 10); StateHasChanged(); }
    [JSInvokable] public void UpdateEnergyAfterPetting() { energy = Math.Min(100, energy + 25); happiness = Math.Min(100, happiness + 10); StateHasChanged(); }
    private async Task PlayWithNoodle() { await JS.InvokeVoidAsync("console.log", "Playing with Noodle..."); await JS.InvokeVoidAsync("playTwerkingAnimationWithDelay", DotNetObjectReference.Create(this)); }
    private async Task PetNoodle() { await JS.InvokeVoidAsync("console.log", "Petting Noodle..."); await JS.InvokeVoidAsync("playPettingAnimationWithDelay", DotNetObjectReference.Create(this)); }

    private async Task LoadTutorSubjects(int userId)
    {
        try { tutorSubjects = await SubjectTutorService.GetSubjectsForTutorAsync(userId); }
        catch (Exception ex) { Console.WriteLine($"⚠️ Failed to load tutor subjects: {ex.Message}"); tutorSubjects = new List<Frontend.Services.SubjectVM>(); }
    }

    private void ViewSubscribers(int subjectId) => NavigationManager.NavigateTo($"/subjects/{subjectId}/subscribers");

    // Session Detail Modal
    private bool showSessionModal = false;
    private BookingSessionVM? selectedSession = null;
    private void ViewSessionDetails(BookingSessionVM session) { selectedSession = session; showSessionModal = true; StateHasChanged(); }
    private async Task CloseSessionModal() { showSessionModal = false; selectedSession = null; StateHasChanged(); }

    // Role helpers
    private static string GetRolePfpClass(string? role) => (role ?? "").ToLowerInvariant() switch
    {
        "admin" => "pfp-admin",
        "tutor" => "pfp-tutor",
        _ => "pfp-student"
    };
    private static string GetRoleBadgeClass(string? role) => (role ?? "").ToLowerInvariant() switch
    {
        "admin" => "badge-admin",
        "tutor" => "badge-tutor",
        _ => "badge-student"
    };
    private static string FormatRole(string? role)
    {
        if (string.IsNullOrWhiteSpace(role)) return "Student";
        var r = role.Trim().ToLowerInvariant();
        return char.ToUpperInvariant(r[0]) + r[1..];
    }
}