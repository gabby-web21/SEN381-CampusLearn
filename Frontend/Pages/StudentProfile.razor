@page "/studentprofile"
@page "/studentprofile/{id:int}"
@using Sen381.Business.Models
@using Sen381.Business.Services
@using Sen381.Data_Access
@using Frontend.Models
@using Frontend.Services
@using Frontend.Shared
@inject SupaBaseAuthService SupabaseService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject Frontend.Services.AuthService AuthService
@inject Frontend.Services.SubjectTutorService SubjectTutorService
@inject HttpClient Http

<PageTitle>Profile | CampusLearn</PageTitle>

<!-- ===== Page Header (kept; restyled to show only a centered avatar) ===== -->
<header class="page-hd">
    <div class="hd-left">
        <img class="avatar-xl"
             src="@(currentUser?.ProfilePicturePath ?? "https://placehold.co/160x160/png")"
             alt="Profile picture of @(currentUser?.FirstName) @(currentUser?.LastName)" />

        <!-- Title/subtitle are intentionally hidden by CSS on this page layout -->
        <div class="title-block">
            <h1 class="title">@($"{currentUser?.FirstName} {currentUser?.LastName}")</h1>
        </div>
        <div class="subtitle">
            @(currentUser?.RoleString)
            @if (!string.IsNullOrWhiteSpace(currentUser?.Program))
            {
                <span> &middot; @currentUser.Program</span>
            }
            @if (!string.IsNullOrWhiteSpace(currentUser?.Year))
            {
                <span> &middot; @currentUser.Year Year</span>
            }
            @if (currentUser?.Id > 0)
            {
                <span class="muted"> &middot; ID: @currentUser.Id</span>
            }
        </div>
    </div>

    <div class="hd-actions">
        @if (isOwnProfile)
        {
            <NavLink class="btn primary" href="/create-profile">Edit profile</NavLink>
        }
        else
        {
            <button class="btn @(isFollowing ? "following" : "primary")" @onclick="ToggleFollow" disabled="@isTogglingFollow">
                @if (isTogglingFollow)
                {
                    <span>...</span>
                }
                else
                {
                    <span>@(isFollowing ? "Unfollow" : "Follow")</span>
                }
            </button>
        }
        <NavLink class="btn" href="/messages">Message</NavLink>
    </div>
</header>

<!-- ===== Tabs ===== -->
<nav class="tabs" aria-label="Profile sections">
    <button class="tab @(activeTab == "profile" ? "active" : "")" @onclick='SetProfileTab'>Profile</button>
    <button class="tab @(activeTab == "tutor" ? "active" : "")" @onclick='SetTutorTab'>Tutor</button>
    <button class="tab @(activeTab == "sessions" ? "active" : "")" @onclick='SetSessionsTab'>Sessions</button>
    <button class="tab @(activeTab == "preferences" ? "active" : "")" @onclick='SetPreferencesTab'>Preferences</button>
    <button class="tab @(activeTab == "noodle" ? "active" : "")" @onclick='SetNoodleTab'>Noodle</button>
</nav>

<!-- ===== Main content area ===== -->
@if (activeTab == "noodle")
{
    <!-- Noodle Full Interface (unchanged) -->
    <main class="noodle-main">
        <section style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 20px; padding: 40px; margin-bottom: 30px; color: white; text-align: center;">
            <div style="display: flex; align-items: center; justify-content: center; gap: 30px; flex-wrap: wrap;">
                <div style="font-size: 5rem; width: 120px; height: 120px; display: flex; align-items: center; justify-content: center; background: rgba(255, 255, 255, 0.2); border: 4px solid rgba(255, 255, 255, 0.3); border-radius: 50%; backdrop-filter: blur(10px); box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);">🐼</div>
                <div>
                    <h1 style="margin: 0 0 20px 0; font-size: 2.5rem; font-weight: 900;">Meet Noodle!</h1>
                    <img id="noodle-sprite" src="/images/Noodle idle frame.png" alt="Noodle the Panda" style="width: 270px; height: 270px; object-fit: contain;" />
                </div>
            </div>
        </section>

        <section class="noodle-content">
            <div style="background: #ffffff; border: 3px solid #4a90e2; border-radius: 20px; padding: 30px; margin: 20px auto; max-width: 800px; box-shadow: 0 8px 32px rgba(74, 144, 226, 0.2); text-align: center;">
                <h2 style="margin: 0 0 25px 0; font-size: 1.8rem; font-weight: 900; color: #2c5aa0; text-align: center;">🐼 Noodle's Current Stats</h2>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-top: 20px;">
                    <div style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 15px; padding: 20px; text-align: center;">
                        <div style="font-size: 2.5rem; margin-bottom: 10px;">😊</div>
                        <div style="font-size: 1.2rem; font-weight: 700; color: #2c5aa0; margin-bottom: 15px;">Happiness</div>
                        <div style="width: 100%; height: 12px; background: #e9ecef; border-radius: 6px; overflow: hidden; margin-bottom: 10px;">
                            <div style="height: 100%; background: linear-gradient(90deg, #4ade80, #22c55e); border-radius: 6px; width: 85%;"></div>
                        </div>
                        <div style="font-size: 1.1rem; font-weight: 800; color: #2c5aa0;">85%</div>
                    </div>
                    <div style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 15px; padding: 20px; text-align: center;">
                        <div style="font-size: 2.5rem; margin-bottom: 10px;">⚡</div>
                        <div style="font-size: 1.2rem; font-weight: 700; color: #2c5aa0; margin-bottom: 15px;">Energy</div>
                        <div style="width: 100%; height: 12px; background: #e9ecef; border-radius: 6px; overflow: hidden; margin-bottom: 10px;">
                            <div style="height: 100%; background: linear-gradient(90deg, #f59e0b, #eab308); border-radius: 6px; width: 70%;"></div>
                        </div>
                        <div style="font-size: 1.1rem; font-weight: 800; color: #2c5aa0;">70%</div>
                    </div>
                    <div style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 15px; padding: 20px; text-align: center;">
                        <div style="font-size: 2.5rem; margin-bottom: 10px;">🍎</div>
                        <div style="font-size: 1.2rem; font-weight: 700; color: #2c5aa0; margin-bottom: 15px;">Hunger</div>
                        <div style="width: 100%; height: 12px; background: #e9ecef; border-radius: 6px; overflow: hidden; margin-bottom: 10px;">
                            <div style="height: 100%; background: linear-gradient(90deg, #ef4444, #dc2626); border-radius: 6px; width: @(hunger)%;"></div>
                        </div>
                        <div style="font-size: 1.1rem; font-weight: 800; color: #2c5aa0;">@(hunger)%</div>
                    </div>
                </div>
            </div>

            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 30px auto; max-width: 800px;">
                <button style="background: #ffffff; border: 2px solid #e0e0e0; border-radius: 16px; padding: 24px; display: flex; flex-direction: column; align-items: center; gap: 12px; cursor: pointer; transition: all 0.3s ease; text-decoration: none; color: #2c5aa0;" @onclick='FeedNoodle'>
                    <span style="font-size: 2.5rem;">🍎</span>
                    <span style="font-size: 1.2rem; font-weight: 800; color: #2c5aa0;">Feed Noodle</span>
                    <span style="font-size: 0.9rem; color: #6b7280; text-align: center; font-weight: 600;">Feed bamboo & increase happiness</span>
                </button>
                <button style="background: #ffffff; border: 2px solid #e0e0e0; border-radius: 16px; padding: 24px; display: flex; flex-direction: column; align-items: center; gap: 12px; cursor: pointer; transition: all 0.3s ease; text-decoration: none; color: #2c5aa0;" @onclick='PlayWithNoodle'>
                    <span style="font-size: 2.5rem;">🎾</span>
                    <span style="font-size: 1.2rem; font-weight: 800; color: #2c5aa0;">Play with Noodle</span>
                    <span style="font-size: 0.9rem; color: #6b7280; text-align: center; font-weight: 600;">Roll around & boost energy</span>
                </button>
                <button style="background: #ffffff; border: 2px solid #e0e0e0; border-radius: 16px; padding: 24px; display: flex; flex-direction: column; align-items: center; gap: 12px; cursor: pointer; transition: all 0.3s ease; text-decoration: none; color: #2c5aa0;" @onclick='PetNoodle'>
                    <span style="font-size: 2.5rem;">💕</span>
                    <span style="font-size: 1.2rem; font-weight: 800; color: #2c5aa0;">Pet Noodle</span>
                    <span style="font-size: 0.9rem; color: #6b7280; text-align: center; font-weight: 600;">Show love & increase happiness</span>
                </button>
            </div>

            <div style="background: #ffffff; border: 1px solid #e0e0e0; border-radius: 16px; padding: 24px; box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1); margin: 30px auto; max-width: 600px; text-align: center;">
                <h3 style="margin: 0 0 16px 0; font-size: 1.3rem; font-weight: 800; color: #2c5aa0;">💡 Daily Care Tips</h3>
                <ul style="margin: 0; padding-left: 20px; list-style: none; text-align: left;">
                    <li style="margin-bottom: 8px; font-weight: 600; color: #2c5aa0; position: relative;">✨ Log in daily to keep Noodle happy</li>
                    <li style="margin-bottom: 8px; font-weight: 600; color: #2c5aa0; position: relative;">✨ Feed bamboo when hunger is low</li>
                    <li style="margin-bottom: 8px; font-weight: 600; color: #2c5aa0; position: relative;">✨ Let Noodle roll around when energy is high</li>
                    <li style="margin-bottom: 8px; font-weight: 600; color: #2c5aa0; position: relative;">✨ Give belly rubs for instant happiness boost</li>
                </ul>
            </div>
        </section>
    </main>
}
else if (activeTab == "tutor")
{
    <!-- Tutor Subjects Interface (unchanged) -->
    <main class="tutor-main">
        <section class="card">
            <h2 class="card-hd">Subjects I Tutor</h2>
            @if (tutorSubjects == null || !tutorSubjects.Any())
            {
                <div class="empty-state">
                    <p class="muted">You are not currently approved to tutor any subjects.</p>
                    <p class="muted">Apply to become a tutor for specific subjects to see them listed here.</p>
                </div>
            }
            else
            {
                <div class="tutor-subjects-grid">
                    @foreach (var subject in tutorSubjects)
                    {
                        <div class="tutor-subject-card" @onclick='() => ViewSubscribers(subject.SubjectId)'>
                            <div class="subject-info">
                                <h3 class="subject-code">@subject.SubjectCode</h3>
                                <p class="subject-name">@subject.Name</p>
                                <p class="subject-year">Year @subject.Year</p>
                            </div>
                        </div>
                    }
                </div>
            }
        </section>
    </main>
}
else if (activeTab == "sessions")
{
    <!-- Sessions Interface (unchanged) -->
    <main class="sessions-main">
        <section class="card">
            <h2 class="card-hd">Tutoring Sessions</h2>
            <div class="session-filter">
                <div class="filter-buttons">
                    <button class="filter-btn @(sessionFilter == "all" ? "active" : "")" @onclick='() => SetSessionFilter("all")'>
                        All Sessions
                    </button>
                    <button class="filter-btn @(sessionFilter == "created" ? "active" : "")" @onclick='() => SetSessionFilter("created")'>
                        Invited
                    </button>
                    <button class="filter-btn @(sessionFilter == "invited" ? "active" : "")" @onclick='() => SetSessionFilter("invited")'>
                        Created
                    </button>
                </div>
            </div>
            @if (filteredSessions == null || !filteredSessions.Any())
            {
                <div class="empty-state">
                    <p class="muted">No tutoring sessions attended yet.</p>
                    <p class="muted">Join tutoring sessions from your calendar to see them listed here.</p>
                    <p class="muted">Debug: attendedSessions is @(attendedSessions == null ? "null" : $"not null with {attendedSessions.Count} items")</p>
                </div>
            }
            else
            {
                <div class="sessions-list">
                    @foreach (var session in filteredSessions)
                    {
                        <div class="session-card clickable" @onclick='() => ViewSessionDetails(session)'>
                            <div class="session-header">
                                <h3 class="session-title">@session.Title</h3>
                                <span class="session-status @session.Status.ToLower()">@session.Status</span>
                            </div>
                            <div class="session-details">
                                <div class="session-info">
                                    <div class="session-date"><strong>Date:</strong> @session.SessionDate.ToString("dddd, MMMM dd, yyyy")</div>
                                    <div class="session-time"><strong>Time:</strong> @session.SessionDate.ToString("HH:mm") - @session.SessionDate.AddMinutes(session.DurationMinutes).ToString("HH:mm")</div>
                                    <div class="session-duration"><strong>Duration:</strong> @FormatSessionDuration(session.DurationMinutes)</div>
                                    @if (!string.IsNullOrEmpty(session.Description))
                                    {
                                        <div class="session-description"><strong>Description:</strong> @session.Description</div>
                                    }
                                </div>
                                <div class="session-participants">
                                    @if (session.TutorId == currentUser?.Id)
                                    {
                                        <div class="participant"><strong>Participant:</strong> @session.StudentFullName</div>
                                    }
                                    else
                                    {
                                        <div class="participant"><strong>Participant:</strong> @session.TutorFullName</div>
                                    }
                                </div>
                            </div>
                            <div class="session-hint"><span class="hint-text">Click to view chat history and resources</span></div>
                        </div>
                    }
                </div>
            }
        </section>
    </main>
    <SessionDetailModal Session="selectedSession" IsVisible="showSessionModal" OnClose="CloseSessionModal" />
}
else
{
    <!-- ===== NEW Profile Pane layout ===== -->
    <main class="sp-shell">
        <!-- Big rounded white pane -->
        <section class="sp-pane">
            <!-- Pane header -->
            <div class="sp-pane-hd">
                <h1 class="sp-name">@($"{currentUser?.FirstName} {currentUser?.LastName}")</h1>
                <div class="sp-role">- @(currentUser?.RoleString ?? "Student") -</div>

                <!-- Floating message button (top-right of pane) -->
                <button class="sp-chat-btn" aria-label="Message" title="Message" @onclick='() => NavigationManager.NavigateTo("/messages")'>
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                        <path d="M4 5h16v10H8l-4 4V5z" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round" />
                        <circle cx="10" cy="10" r="1" fill="currentColor" />
                        <circle cx="14" cy="10" r="1" fill="currentColor" />
                        <circle cx="18" cy="10" r="1" fill="currentColor" />
                    </svg>
                </button>
            </div>

            <!-- Blocks container (add more .sp-block easily) -->
            <div class="sp-blocks">
                <!-- About -->
                <div class="sp-block">
                    <div class="sp-block-hd">About</div>
                    <div class="sp-block-body">
                        <p class="about">
                            @if (string.IsNullOrWhiteSpace(currentUser?.About))
                            {
                                <span class="muted">No description provided.</span>
                            }
                            else
                            {
                                @currentUser.About
                            }
                        </p>
                    </div>
                </div>

                <!-- Contact -->
                <div class="sp-block">
                    <div class="sp-block-hd">Contact</div>
                    <div class="sp-block-body">
                        <dl class="contact-list sp-contact">
                            <div class="contact-item"><dt>Email</dt><dd><a href="mailto:@currentUser?.Email">@currentUser?.Email</a></dd></div>
                            <div class="contact-item"><dt>Phone</dt><dd>@(string.IsNullOrWhiteSpace(currentUser?.PhoneNum) ? "—" : currentUser?.PhoneNum)</dd></div>
                            <div class="contact-item">
                                <dt>Website</dt>
                                <dd>
                                    @if (string.IsNullOrWhiteSpace(currentUser?.Website))
                                    {
                                        <span>—</span>
                                    }
                                    else
                                    {

                                        <a href="@currentUser.Website" target="_blank" rel="noopener">@currentUser.Website</a>
                                    }
                                </dd>
                            </div>
                        </dl>
                    </div>
                </div>

                <!-- Connections -->
                <div class="sp-block">
                    <div class="sp-block-hd">Connections</div>
                    <div class="sp-block-body">
                        <div class="sp-counters">
                            <div class="sp-counter">
                                <div class="sp-counter-num">@followersCount</div>
                                <div class="sp-counter-lbl">followers</div>
                            </div>
                            <div class="sp-counter">
                                <div class="sp-counter-num">@followingCount</div>
                                <div class="sp-counter-lbl">following</div>
                            </div>
                        </div>
                    </div>
                </div>

                @if (Interests?.Count > 0)
                {
                    <div class="sp-block">
                        <div class="sp-block-hd">Interests</div>
                        <div class="sp-block-body">
                            <div class="tags">
                                @foreach (var tag in Interests)
                                {
                                    <span class="tag">@tag</span>
                                }
                            </div>
                        </div>
                    </div>
                }

                @if (isOwnProfile)
                {
                    <div class="sp-block">
                        <div class="sp-block-hd">Preferences</div>
                        <div class="sp-block-body">
                            <ul class="prefs">
                                <li><a href="/create-profile">Edit profile</a></li>
                                <li><a href="/account/password">Change password</a></li>
                                <li><a href="/notifications">Notification preferences</a></li>
                                <li><a href="/privacy">Privacy and policies</a></li>
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </section>
    </main>
}

<style>
    /* ===== Tokens ===== */
    :root {
        --bg: #f5f7fb;
        --panel: #fff;
        --ink: #2D3034;
        --muted: color-mix(in oklab, var(--ink) 55%, white);
        --ring: color-mix(in oklab, var(--ink) 12%, white);
        --primary: #1B998B; /* you changed this to red locally; safe */
        --accent: #3a7bdb;
        --chip: #DBE4EE;
        --radius: 14px;
        --shadow: 0 6px 18px rgba(0,0,0,.06);
        --container: min(1150px,92vw);
        --mist: #eef3f8;
    }

    /* Dark mode overrides (kept) */
    .dark-mode {
        --bg: #1a1a1a;
        --panel: #2d2d2d;
        --ink: #ffffff;
        --muted: #b3b3b3;
        --ring: #404040;
        --primary: #1B998B;
        --accent: #3a7bdb;
        --chip: #404040;
        --shadow: 0 6px 18px rgba(0, 0, 0, .3);
    }

    /* ===== Header → centered avatar only (matches screenshot top area) ===== */
    .page-hd {
        width: var(--container);
        margin: 8px auto 10px;
        background: transparent;
        border: 0;
        box-shadow: none;
        padding: 18px 14px 8px;
        display: grid;
        place-items: center;
    }

        .page-hd .avatar-xl {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            background: #d9d9d9;
            border: 1.5px solid #BFC7D1;
        }
        /* Hide original title/actions in this layout */
        .page-hd .title-block,
        .page-hd .subtitle,
        .hd-actions {
            display: none;
        }

    /* ===== Tabs (kept) ===== */
    .tabs {
        width: var(--container);
        margin: 0 auto 8px;
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }

    .tab {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        height: 36px;
        padding: 0 14px;
        border-radius: 999px;
        font-weight: 800;
        background: #e8eef7;
        color: #1b2b3b;
        border: 1px solid var(--ring);
    }

        .tab.active {
            background: #d9e6ff;
            color: #14315f;
            border-color: #c7d7fb;
        }

    /* ===== NEW Student Profile pane ===== */
    .sp-shell {
        width: var(--container);
        margin: 0 auto 40px;
    }

    .sp-pane {
        position: relative;
        background: var(--panel);
        border: 1px solid var(--ring);
        border-radius: 28px;
        box-shadow: 0 10px 28px rgba(0,0,0,.06);
        padding: 28px 22px 26px;
    }

    .sp-pane-hd {
        text-align: center;
        position: relative;
    }

    .sp-name {
        margin: 10px 0 0;
        font-weight: 900;
        font-size: clamp(22px, 2.6vw, 30px);
    }

    .sp-role {
        color: #9ba3ae;
        font-weight: 700;
        margin-top: 6px;
    }

    /* Floating chat button (top-right of pane) */
    .sp-chat-btn {
        position: absolute;
        right: 18px;
        top: -36px;
        width: 56px;
        height: 56px;
        border-radius: 999px;
        border: 2px solid #5aa0ff;
        background: #fff;
        color: #7c8aa0;
        display: grid;
        place-items: center;
        box-shadow: var(--shadow);
        transition: transform .15s ease;
    }

        .sp-chat-btn:hover {
            transform: translateY(-1px);
        }

    /* Blocks container */
    .sp-blocks {
        display: grid;
        gap: 18px;
        margin-top: 18px;
    }

    .sp-block {
        background: #f1f3f6;
        border: 1px solid #e5e9f0;
        border-radius: 22px;
        padding: 16px;
    }

    .sp-block-hd {
        font-size: 1.05rem;
        font-weight: 800;
        color: #6a717c;
        margin-bottom: 10px;
    }

    .sp-block-body {
        padding: 4px;
    }

    /* Contact inside block */
    .sp-contact .contact-item {
        grid-template-columns: 110px 1fr;
    }

    .sp-contact dt {
        color: #6a717c;
        font-weight: 800;
    }

    .sp-contact dd {
        font-weight: 700;
        color: var(--ink);
        margin: 0;
    }

    /* Connections counters (rounded boxes) */
    .sp-counters {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px,1fr));
        gap: 16px;
    }

    .sp-counter {
        background: #fff;
        border: 1.5px solid #D7DEE8;
        border-radius: 18px;
        padding: 18px 12px;
        text-align: center;
        box-shadow: 0 2px 0 rgba(0,0,0,.03) inset;
    }

    .sp-counter-num {
        font-size: 1.6rem;
        font-weight: 900;
        color: var(--primary);
    }

    .sp-counter-lbl {
        margin-top: 4px;
        font-size: .8rem;
        color: #7f8a98;
        font-weight: 700;
    }

    /* ==== Baseline styles kept (trimmed to what we still use across tabs) ==== */
    * {
        box-sizing: border-box;
    }

    html, body {
        height: 100%;
    }

    body {
        margin: 0;
        background: var(--bg);
        color: var(--ink);
        font-family: system-ui,-apple-system,"Segoe UI",Inter,Roboto,Arial,sans-serif;
        line-height: 1.45;
    }

    a {
        color: var(--accent);
        text-decoration: none;
    }

        a:hover {
            text-decoration: underline;
        }

    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 10px 14px;
        border-radius: 10px;
        border: 1px solid var(--ring);
        background: #eef3f8;
        color: #122;
        font-weight: 800;
        box-shadow: var(--shadow);
        white-space: nowrap;
    }

        .btn.primary {
            background: var(--primary);
            color: #fff;
            border-color: transparent;
        }

        .btn.following {
            background: #6B7280;
            color: #fff;
            border-color: transparent;
        }

    /* ===== Tutor & Sessions existing styles (kept intact) ===== */
    .tutor-main {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .tutor-subjects-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .tutor-subject-card {
        background: var(--panel);
        border: 1px solid var(--ring);
        border-radius: 12px;
        padding: 20px;
        transition: all 0.3s ease;
        box-shadow: var(--shadow);
        cursor: pointer;
    }

        .tutor-subject-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            border-color: var(--accent);
        }

    .subject-info {
        margin-bottom: 15px;
    }

    .subject-code {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--accent);
        margin: 0 0 8px 0;
    }

    .subject-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--ink);
        margin: 0 0 5px 0;
    }

    .subject-year {
        font-size: 0.9rem;
        color: var(--muted);
        margin: 0;
    }

    .sessions-main {
        padding: 20px;
        max-width: var(--container);
        margin: 0 auto;
    }

    .sessions-list {
        display: flex;
        flex-direction: column;
        gap: 16px;
        margin-top: 20px;
    }

    .session-card {
        background: var(--panel);
        border: 1px solid var(--ring);
        border-radius: 12px;
        padding: 20px;
        transition: all 0.3s ease;
        box-shadow: var(--shadow);
    }

        .session-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            border-color: var(--accent);
        }

        .session-card.clickable {
            cursor: pointer;
            position: relative;
        }

            .session-card.clickable:hover {
                background: #f8fafc;
            }

    .session-hint {
        margin-top: 12px;
        padding-top: 12px;
        border-top: 1px solid #e5e7eb;
        text-align: center;
    }

    .hint-text {
        font-size: 0.875rem;
        color: #6b7280;
        font-style: italic;
    }

    .session-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
    }

    .session-title {
        font-size: 1.3rem;
        font-weight: 700;
        color: var(--ink);
        margin: 0;
    }

    .session-status {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        text-transform: uppercase;
    }

        .session-status.pending {
            background: #fef3c7;
            color: #92400e;
        }

        .session-status.confirmed {
            background: #d1fae5;
            color: #065f46;
        }

        .session-status.completed {
            background: #dbeafe;
            color: #1e40af;
        }

        .session-status.cancelled {
            background: #fee2e2;
            color: #991b1b;
        }

    .session-details {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 20px;
        align-items: start;
    }

    .session-info {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

        .session-info > div {
            font-size: 0.95rem;
            color: var(--ink);
        }

        .session-info strong {
            color: var(--muted);
            margin-right: 8px;
        }

    .session-participants {
        text-align: right;
    }

    .participant {
        font-size: 0.95rem;
        color: var(--ink);
    }

        .participant strong {
            color: var(--muted);
            margin-right: 8px;
        }

    .session-filter {
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 1px solid #e0e0e0;
    }

    .filter-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .filter-btn {
        padding: 8px 16px;
        border: 2px solid #e0e0e0;
        background: white;
        color: #666;
        border-radius: 20px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s ease;
    }

        .filter-btn:hover {
            border-color: #007bff;
            color: #007bff;
        }

        .filter-btn.active {
            background: #007bff;
            border-color: #007bff;
            color: white;
        }

    @@media (max-width: 768px) {
        .session-details {
            grid-template-columns: 1fr;
            gap: 12px;
        }

        .session-participants {
            text-align: left;
        }

        .sp-chat-btn {
            right: 12px;
            top: -32px;
            width: 50px;
            height: 50px;
        }
    }

    /* ===== Noodle styles (kept) ===== */
    .noodle-main {
        width: var(--container);
        margin: 0 auto;
        padding: 20px;
    }

    .noodle-content {
        display: flex;
        flex-direction: column;
        gap: 30px;
    }

    .tags {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }

    .tag {
        display: inline-flex;
        align-items: center;
        height: 30px;
        padding: 0 12px;
        border-radius: 999px;
        background: var(--chip);
        border: 1px solid var(--ring);
        font-weight: 800;
        color: #203040;
    }

    /* Dark mode touches for new blocks */
    .dark-mode .sp-pane {
        background: var(--panel);
        border-color: var(--ring);
    }

    .dark-mode .sp-block {
        background: #2b2b2b;
        border-color: #3a3a3a;
    }

    .dark-mode .sp-counter {
        background: #1f1f1f;
        border-color: #3a3a3a;
    }

    .dark-mode .sp-counter-lbl {
        color: #a0a0a0;
    }
</style>

<script>
    window.playEatingAnimationWithDelay = function(componentRef) {
        const sprite = document.getElementById('noodle-sprite');
        if (!sprite) return;
        setTimeout(() => {
            const frames = [
                '/images/Noodle eating/noodle-eating-1.png',
                '/images/Noodle eating/noodle-eating-2.png',
                '/images/Noodle eating/noodle-eating-3.png',
                '/images/Noodle eating/noodle-eating-4.png',
                '/images/Noodle eating/noodle-eating-5.png',
                '/images/Noodle eating/noodle-eating-6.png'
            ];
            let currentFrame = 0; const frameInterval = 300;
            const animation = setInterval(() => {
                sprite.src = frames[currentFrame]; currentFrame++;
                if (currentFrame >= frames.length) {
                    clearInterval(animation);
                    setTimeout(() => {
                        sprite.src = '/images/Noodle idle frame.png';
                        if (componentRef) componentRef.invokeMethodAsync('UpdateHungerAfterAnimation');
                    }, frameInterval);
                }
            }, frameInterval);
        }, 100);
    };

    window.playTwerkingAnimationWithDelay = function(componentRef) {
        const sprite = document.getElementById('noodle-sprite');
        if (!sprite) return;
        setTimeout(() => {
            const frames = [
                '/images/Noodle twerking/noodle-twerking-1.png',
                '/images/Noodle twerking/noodle-twerking-2.png',
                '/images/Noodle twerking/noodle-twerking-3.png',
                '/images/Noodle twerking/noodle-twerking-4.png',
                '/images/Noodle twerking/noodle-twerking-5.png',
                '/images/Noodle twerking/noodle-twerking-6.png',
                '/images/Noodle twerking/noodle-twerking-7.png',
                '/images/Noodle twerking/noodle-twerking-8.png'
            ];
            let currentFrame = 0, loopCount = 0; const maxLoops = 3, frameInterval = 62.5;
            const animation = setInterval(() => {
                sprite.src = frames[currentFrame]; currentFrame++;
                if (currentFrame >= frames.length) {
                    currentFrame = 0; loopCount++;
                    if (loopCount >= maxLoops) {
                        clearInterval(animation);
                        setTimeout(() => {
                            sprite.src = '/images/Noodle idle frame.png';
                            if (componentRef) componentRef.invokeMethodAsync('UpdateHappinessAfterPlay');
                        }, frameInterval);
                    }
                }
            }, frameInterval);
        }, 100);
    };
</script>

@code {
    [Parameter] public int? id { get; set; }

    private User? currentUser;
    private bool isLoading = true;
    private string activeTab = "profile";

    // Noodle stats
    private int happiness = 85;
    private int energy = 70;
    private int hunger = 60;
    private List<string> Interests = new();
    private bool isOwnProfile = false;
    private bool isFollowing = false;
    private bool isTogglingFollow = false;
    private int followersCount = 0;
    private int followingCount = 0;
    private List<Frontend.Services.SubjectVM>? tutorSubjects = null;
    private List<Frontend.Services.BookingSessionVM>? attendedSessions = null;
    private List<Frontend.Services.BookingSessionVM>? filteredSessions = null;
    private string sessionFilter = "all"; // "all", "created", "invited"

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            isLoading = true;
            await SupabaseService.InitializeAsync();

            bool isLoggedIn = await AuthService.IsUserLoggedInAsync();
            if (!isLoggedIn) { NavigationManager.NavigateTo("/login"); return; }

            int? loggedInUserId = await AuthService.GetCurrentUserIdAsync();
            if (loggedInUserId == null) { NavigationManager.NavigateTo("/login"); return; }

            int targetId = id ?? loggedInUserId.Value;
            isOwnProfile = targetId == loggedInUserId.Value;

            var response = await Http.GetAsync($"api/Profile/{targetId}");
            if (!response.IsSuccessStatusCode) { Console.WriteLine($"⚠️ Failed to load profile data. Status: {response.StatusCode}"); return; }

            currentUser = await response.Content.ReadFromJsonAsync<User>();

            if (currentUser != null && !string.IsNullOrWhiteSpace(currentUser.Interests))
            {
                Interests = currentUser.Interests.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(i => i.Trim()).ToList();
            }

            if (!isOwnProfile && currentUser != null)
            {
                await CheckFollowStatus(loggedInUserId.Value, currentUser.Id);
            }

            if (currentUser != null)
            {
                await LoadFollowerCounts(currentUser.Id);
                if (currentUser.RoleString?.ToLower() == "tutor")
                {
                    await LoadTutorSubjects(currentUser.Id);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ Failed to load profile: {ex.Message}");
        }
        finally { isLoading = false; }
    }

    private async Task CheckFollowStatus(int followerId, int followingId)
    {
        try
        {
            var response = await Http.GetAsync($"api/Follow/check/{followerId}/{followingId}");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<FollowStatusResponse>();
                isFollowing = result?.IsFollowing ?? false;
            }
        }
        catch (Exception ex) { Console.WriteLine($"⚠️ Error checking follow status: {ex.Message}"); }
    }

    private async Task LoadFollowerCounts(int userId)
    {
        try
        {
            var followersResponse = await Http.GetAsync($"api/Follow/followers-count/{userId}");
            if (followersResponse.IsSuccessStatusCode)
            {
                var followersResult = await followersResponse.Content.ReadFromJsonAsync<CountResponse>();
                followersCount = followersResult?.Count ?? 0;
            }

            var followingResponse = await Http.GetAsync($"api/Follow/following-count/{userId}");
            if (followingResponse.IsSuccessStatusCode)
            {
                var followingResult = await followingResponse.Content.ReadFromJsonAsync<CountResponse>();
                followingCount = followingResult?.Count ?? 0;
            }
        }
        catch (Exception ex) { Console.WriteLine($"⚠️ Error loading follower counts: {ex.Message}"); }
    }

    private async Task ToggleFollow()
    {
        if (currentUser == null || isTogglingFollow) return;
        try
        {
            isTogglingFollow = true;
            int? loggedInUserId = await AuthService.GetCurrentUserIdAsync();
            if (loggedInUserId == null) return;

            var endpoint = isFollowing ? "api/Follow/unfollow" : "api/Follow/follow";
            var payload = new { FollowerId = loggedInUserId.Value, FollowingId = currentUser.Id };
            var response = await Http.PostAsJsonAsync(endpoint, payload);

            if (response.IsSuccessStatusCode)
            {
                isFollowing = !isFollowing;
                await LoadFollowerCounts(currentUser.Id);
                await JS.InvokeVoidAsync("alert", isFollowing ? "You are now following this user!" : "You have unfollowed this user.");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"⚠️ Failed to toggle follow: {error}");
                await JS.InvokeVoidAsync("alert", "Failed to update follow status. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ Error toggling follow: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "An error occurred. Please try again.");
        }
        finally { isTogglingFollow = false; }
    }

    private class FollowStatusResponse { public bool IsFollowing { get; set; } }

    // Tabs
    private void SetActiveTab(string tab) { activeTab = tab; StateHasChanged(); }
    private void SetProfileTab() => SetActiveTab("profile");
    private void SetTutorTab() => SetActiveTab("tutor");
    private async void SetSessionsTab() { SetActiveTab("sessions"); await LoadAttendedSessions(); }
    private void SetPreferencesTab() => SetActiveTab("preferences");
    private void SetNoodleTab() => SetActiveTab("noodle");

    // Sessions
    private void SetSessionFilter(string filter) { sessionFilter = filter; ApplySessionFilter(); StateHasChanged(); }

    private void ApplySessionFilter()
    {
        if (attendedSessions == null) { filteredSessions = null; return; }
        switch (sessionFilter)
        {
            case "created":
                filteredSessions = attendedSessions.Where(s => s.TutorId == currentUser?.Id).ToList();
                break;
            case "invited":
                filteredSessions = attendedSessions.Where(s => s.StudentId == currentUser?.Id).ToList();
                break;
            case "all":
            default:
                filteredSessions = attendedSessions.ToList();
                break;
        }
    }

    private async Task LoadAttendedSessions()
    {
        try
        {
            if (currentUser?.Id > 0)
            {
                var response = await Http.GetFromJsonAsync<List<Frontend.Services.BookingSessionVM>>($"https://localhost:7228/api/bookingsession/user/{currentUser.Id}");
                attendedSessions = response != null
                    ? response.Where(s => s.Status == "completed").OrderByDescending(s => s.SessionDate).ToList()
                    : new List<Frontend.Services.BookingSessionVM>();
                ApplySessionFilter();
                await InvokeAsync(StateHasChanged);
            }
            else { attendedSessions = new List<Frontend.Services.BookingSessionVM>(); }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ Error loading attended sessions: {ex.Message}");
            attendedSessions = new List<Frontend.Services.BookingSessionVM>();
        }
    }

    private static string FormatSessionDuration(int durationMinutes)
    {
        if (durationMinutes < 60) return $"{durationMinutes} min{(durationMinutes == 1 ? "" : "s")}";
        var hours = durationMinutes / 60; var remaining = durationMinutes % 60;
        return remaining == 0 ? $"{hours} hr{(hours == 1 ? "" : "s")}" : $"{hours}h {remaining}m";
    }

    // Noodle
    private async Task FeedNoodle() => await JS.InvokeVoidAsync("playEatingAnimationWithDelay", DotNetObjectReference.Create(this));
    [JSInvokable] public void UpdateHungerAfterAnimation() { hunger = Math.Min(100, hunger + 15); StateHasChanged(); }
    [JSInvokable] public void UpdateHappinessAfterPlay() { happiness = Math.Min(100, happiness + 20); energy = Math.Max(0, energy - 10); StateHasChanged(); }
    private async Task PlayWithNoodle() { await JS.InvokeVoidAsync("console.log", "Playing with Noodle..."); await JS.InvokeVoidAsync("playTwerkingAnimationWithDelay", DotNetObjectReference.Create(this)); }
    private async Task PetNoodle() { await JS.InvokeVoidAsync("console.log", "Petting Noodle..."); await JS.InvokeVoidAsync("alert", "💕 Noodle chirps happily and loves the belly rubs! Happiness increased!"); }

    private async Task LoadTutorSubjects(int userId)
    {
        try { tutorSubjects = await SubjectTutorService.GetSubjectsForTutorAsync(userId); }
        catch (Exception ex) { Console.WriteLine($"⚠️ Failed to load tutor subjects: {ex.Message}"); tutorSubjects = new List<Frontend.Services.SubjectVM>(); }
    }

    private void ViewSubscribers(int subjectId) => NavigationManager.NavigateTo($"/subjects/{subjectId}/subscribers");

    private class CountResponse { public int Count { get; set; } }

    // Session Detail Modal
    private bool showSessionModal = false;
    private BookingSessionVM? selectedSession = null;
    private void ViewSessionDetails(BookingSessionVM session) { selectedSession = session; showSessionModal = true; StateHasChanged(); }
    private async Task CloseSessionModal() { showSessionModal = false; selectedSession = null; StateHasChanged(); }
}
