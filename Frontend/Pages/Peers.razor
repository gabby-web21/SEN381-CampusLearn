@page "/peers"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject Frontend.Services.AuthService AuthService
<PageTitle>Peers | CampusLearn</PageTitle>

<main class="peers-page">
    <div class="container page-inner">

        <!-- Title + Search (matches Subjects) -->
        <div class="header-row">
            <h1 class="title">Peers</h1>

            <label class="search">
                <svg class="icon" viewBox="0 0 24 24" width="18" height="18" aria-hidden="true">
                    <circle cx="10" cy="10" r="6" stroke="currentColor" stroke-width="2" fill="none" />
                    <line x1="14" y1="14" x2="20" y2="20" stroke="currentColor" stroke-width="2" />
                </svg>
                <input type="text"
                       placeholder="Search peers…"
                       @bind="SearchQuery"
                       @bind:event="oninput" />
            </label>
        </div>

        <!-- Filter Buttons (same items; Subjects style) -->
        <div class="filter-section">
            <div class="filter-buttons">
                <button class="filter-btn @(CurrentFilter == "all" ? "active" : "")" @onclick="SetFilterAll">All</button>
                <button class="filter-btn @(CurrentFilter == "students" ? "active" : "")" @onclick="SetFilterStudents">Students</button>
                <button class="filter-btn @(CurrentFilter == "tutors" ? "active" : "")" @onclick="SetFilterTutors">Tutors</button>
                <button class="filter-btn @(CurrentFilter == "subscribed-students" ? "active" : "")" @onclick="SetFilterSubscribedStudents">Subscribed Students</button>
                <button class="filter-btn @(CurrentFilter == "subscribed-tutors" ? "active" : "")" @onclick="SetFilterSubscribedTutors">Subscribed Tutors</button>
            </div>
        </div>

        <!-- Peers Grid (Subjects layout) -->
        <section class="grid peer-grid">
            @if (FilteredPeers != null && FilteredPeers.Any())
            {
                @foreach (var peer in FilteredPeers)
                {
                    var roleLower = (peer.Role ?? "").ToLower();
                    <div class="peer-card"
                         data-role="@roleLower"
                         @onclick='() => NavigateToPeerProfile(peer)'>
                        <div class="row-top">
                            <div class="avatar">
                                @if (!string.IsNullOrEmpty(peer.ProfilePicturePath))
                                {
                                    <img src="@peer.ProfilePicturePath"
                                         alt="@peer.FirstName @peer.LastName profile photo"
                                         class="avatar-img"
                                         onerror="this.style.display='none'; this.nextElementSibling.style.display='grid';" />
                                    <!-- Fallback icon if image fails -->
                                    <span class="avatar-fallback" style="display:none;">
                                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                            <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                            <circle cx="12" cy="7" r="4"></circle>
                                        </svg>
                                    </span>
                                }
                                else
                                {
                                    <span class="avatar-fallback">
                                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                            <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                            <circle cx="12" cy="7" r="4"></circle>
                                        </svg>
                                    </span>
                                }
                            </div>

                            <div class="id">
                                <div class="name">@peer.FirstName @peer.LastName</div>
                                <div class="meta-line">
                                    <span class="role">@((peer.Role ?? "User"))</span>
                                    @if (!string.IsNullOrWhiteSpace(peer.Program))
                                    {
                                        <span class="sep">•</span>
                                        <span class="prog">@peer.Program</span>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="row-bottom">
                            @if (!string.IsNullOrWhiteSpace(peer.Year))
                            {
                                <span class="pill year">@peer.Year</span>
                            }
                            <span class="pill cluster">@((peer.Subjects ?? "").Split(',', StringSplitOptions.RemoveEmptyEntries).FirstOrDefault() ?? "Peer")</span>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">No peers found.</div>
            }
        </section>
    </div>
</main>

<style>
    /* ===== Tokens (match Subjects page) ===== */
    :root {
        --bg: #F2F3F5;
        --panel: #FFFFFF;
        --ink: #1F2937;
        --muted: #6B7280;
        --ring: rgba(0,0,0,.10);
        --radius: 16px;
        --shadow: 0 8px 22px rgba(0,0,0,.06);
        --container: min(1200px, 92vw);
        --student-blue: #3B82F6; /* students */
        --tutor-orange-1: #F59E0B; /* tutors gradient start */
        --tutor-orange-2: #F97316; /* tutors gradient end */
        --admin-yellow: #FACC15; /* admins */
    }

    *, *::before, *::after {
        box-sizing: border-box
    }

    html, body {
        height: 100%
    }

    body {
        margin: 0;
        background: var(--bg);
        color: var(--ink);
        font-family: system-ui, -apple-system, Segoe UI, Inter, Roboto, Arial, sans-serif;
        line-height: 1.35;
    }

    .container {
        width: var(--container);
        margin-inline: auto;
        padding-inline: clamp(12px,3vw,24px)
    }

    .page-inner {
        padding-block: clamp(16px,3.2vw,28px)
    }

    /* ===== Header row (title + search) ===== */
    .header-row {
        display: grid;
        grid-template-columns: auto 1fr;
        align-items: end;
        gap: clamp(12px, 2vw, 20px);
        margin-bottom: clamp(14px, 2.2vw, 18px);
    }

    .title {
        margin: 0;
        font-size: clamp(32px, 4.2vw, 46px);
        font-weight: 900;
        letter-spacing: .2px;
        line-height: 1.05;
        padding-top: clamp(4px, 0.8vw, 10px);
    }

    .search {
        justify-self: start;
        display: flex;
        align-items: center;
        gap: 10px;
        background: #fff;
        border: 1px solid var(--ring);
        border-radius: 999px;
        padding: 12px 16px;
        color: #9aa0a6;
        min-width: clamp(260px, 40vw, 520px);
        box-shadow: inset 0 0 0 1px rgba(0,0,0,.03);
        transition: box-shadow .18s ease, border-color .18s ease, color .18s ease;
    }

        .search:focus-within {
            border-color: color-mix(in oklab, var(--student-blue) 45%, #fff);
            box-shadow: 0 0 0 8px color-mix(in oklab, var(--student-blue) 14%, transparent);
            color: var(--student-blue);
        }

        .search input {
            border: 0;
            outline: 0;
            background: transparent;
            color: var(--ink);
            font: inherit;
            width: 100%;
        }

    /* ===== Filter buttons (same as Subjects) ===== */
    .filter-section {
        margin-top: clamp(6px, 1vw, 10px);
        margin-bottom: clamp(8px, 1.4vw, 14px);
    }

    .filter-buttons {
        display: flex;
        gap: .5rem;
        background: #f8f9fa;
        padding: .35rem;
        border-radius: .75rem;
        width: fit-content;
        flex-wrap: wrap;
    }

    .filter-btn {
        padding: .55rem 1rem;
        border: none;
        background: transparent;
        color: #6c757d;
        font-weight: 700;
        font-size: .95rem;
        border-radius: .5rem;
        cursor: pointer;
        transition: all .2s ease;
    }

        .filter-btn:hover {
            background: rgba(255,255,255,.6);
            color: #495057;
        }

        .filter-btn.active {
            background: #fff;
            color: #007bff;
            box-shadow: 0 1px 3px rgba(0,0,0,.1);
        }

    /* ===== Grid ===== */
    .grid {
        margin-top: clamp(6px, 1.2vw, 12px);
        display: grid;
        grid-template-columns: repeat(4, minmax(0,1fr));
        gap: clamp(14px, 1.8vw, 22px);
        padding-bottom: 28px;
    }

    /* ===== Peer card (subjects-style panel) ===== */
    .peer-card {
        position: relative;
        display: grid;
        gap: 12px;
        padding: 16px 16px 14px;
        background: var(--panel);
        border: 1px solid var(--ring);
        border-radius: calc(var(--radius) - 2px);
        box-shadow: var(--shadow);
        color: inherit;
        text-decoration: none;
        cursor: pointer;
        transition: transform .14s ease, box-shadow .18s ease;
        will-change: transform, box-shadow;
        overflow: hidden;
    }
        /* super bright glow on hover; color depends on role (via CSS vars set below) */
        .peer-card::after {
            content: "";
            position: absolute;
            inset: -24px;
            background: radial-gradient(40% 40% at 50% 0%, var(--card-glow-strong, rgba(0,0,0,0)) 0%, rgba(0,0,0,0) 70%);
            opacity: 0;
            filter: blur(28px);
            transition: opacity .18s ease;
            z-index: -1;
        }

        .peer-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 16px 44px rgba(0,0,0,.18), 0 14px 60px var(--card-glow-soft, rgba(0,0,0,0));
        }

            .peer-card:hover::after {
                opacity: 1;
            }

        /* role -> variables for glow colors */
        .peer-card[data-role="student"] {
            --card-glow-strong: color-mix(in oklab, var(--student-blue) 72%, transparent);
            --card-glow-soft: color-mix(in oklab, var(--student-blue) 28%, transparent);
            --avatar-ring-outer: color-mix(in oklab, var(--student-blue) 38%, transparent);
            --avatar-ring-inner: var(--student-blue);
        }

        .peer-card[data-role="tutor"] {
            --card-glow-strong: color-mix(in oklab, var(--tutor-orange-2) 72%, transparent);
            --card-glow-soft: color-mix(in oklab, var(--tutor-orange-1) 28%, transparent);
            --avatar-ring-outer: color-mix(in oklab, var(--tutor-orange-2) 38%, transparent);
            --avatar-ring-inner: conic-gradient(from 0deg, var(--tutor-orange-1), var(--tutor-orange-2));
        }

        .peer-card[data-role="admin"] {
            --card-glow-strong: color-mix(in oklab, var(--admin-yellow) 72%, transparent);
            --card-glow-soft: color-mix(in oklab, var(--admin-yellow) 28%, transparent);
            --avatar-ring-outer: color-mix(in oklab, var(--admin-yellow) 38%, transparent);
            --avatar-ring-inner: var(--admin-yellow);
        }

    /* content */
    .row-top {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .row-bottom {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }

    .name {
        font-weight: 900;
        letter-spacing: .2px;
    }

    .meta-line {
        display: flex;
        align-items: center;
        gap: 6px;
        color: var(--muted);
        font-weight: 700;
    }

    .sep {
        opacity: .6
    }

    .pill {
        background: #EEF2FF;
        color: #4338CA;
        font-weight: 800;
        font-size: .8rem;
        padding: 4px 10px;
        border-radius: 999px;
        border: 1px solid color-mix(in oklab, #4338CA 22%, #fff);
    }

        .pill.year {
            background: #111827;
            color: #fff;
            border-color: #111827
        }

    /* avatar + hover ring */
    .avatar {
        position: relative;
        width: 46px;
        height: 46px;
        border-radius: 999px;
        display: grid;
        place-items: center;
        background: #fff;
        border: 1px solid var(--ring);
        overflow: hidden;
        transition: box-shadow .18s ease;
    }

    .avatar-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block
    }

    .avatar-fallback {
        display: grid;
        place-items: center;
        width: 100%;
        height: 100%;
    }

        .avatar-fallback svg {
            width: 22px;
            height: 22px;
            stroke-width: 1.8
        }

    /* ring lights up on hover */
    .peer-card:hover .avatar {
        box-shadow: 0 0 0 3px #fff, 0 0 0 10px var(--avatar-ring-outer, transparent);
        background: var(--avatar-ring-inner, #fff);
    }

    .peer-card:hover .avatar-img {
        border-radius: 999px;
        box-shadow: inset 0 0 0 100vmax #fff; /* mask ring bg behind image */
        mix-blend-mode: multiply; /* keeps image visible */
    }

    .empty-state {
        grid-column: 1 / -1;
        text-align: center;
        color: var(--muted);
        font-weight: 700;
        padding: 20px 0;
    }

    /* ===== Responsive ===== */
    @@media (max-width: 1100px) {
        .grid {
            grid-template-columns: repeat(3, minmax(0,1fr));
        }
    }

    @@media (max-width: 820px) {
        .header-row {
            grid-template-columns: 1fr;
            gap: 10px;
        }

        .search {
            justify-self: start;
            min-width: min(100%, 520px)
        }

        .grid {
            grid-template-columns: repeat(2, minmax(0,1fr));
        }
    }

    @@media (max-width: 520px) {
        .grid {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    private string SearchQuery { get; set; } = "";
    private string CurrentFilter { get; set; } = "all"; // "all", "students", "tutors", "subscribed-students", "subscribed-tutors"

    private List<PeerUser> AllPeers { get; set; } = new();
    private List<long> SubscribedUserIds { get; set; } = new();

    private IEnumerable<PeerUser> FilteredPeers
    {
        get
        {
            var filtered = AllPeers.AsEnumerable();

            // Apply role filter
            if (CurrentFilter == "students")
            {
                filtered = filtered.Where(p => (p.Role ?? "").ToLower() == "student");
            }
            else if (CurrentFilter == "tutors")
            {
                filtered = filtered.Where(p => (p.Role ?? "").ToLower() == "tutor");
            }
            else if (CurrentFilter == "subscribed-students")
            {
                filtered = filtered.Where(p => (p.Role ?? "").ToLower() == "student" && SubscribedUserIds.Contains(p.UserId));
            }
            else if (CurrentFilter == "subscribed-tutors")
            {
                filtered = filtered.Where(p => (p.Role ?? "").ToLower() == "tutor" && SubscribedUserIds.Contains(p.UserId));
            }

            // Apply search filter
            if (!string.IsNullOrWhiteSpace(SearchQuery))
            {
                filtered = filtered.Where(p =>
                    (p.FirstName?.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (p.LastName?.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (p.Program?.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (p.Subjects?.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ?? false));
            }

            return filtered;
        }
    }

    private void SetFilter(string filter)
    {
        CurrentFilter = filter;
        StateHasChanged();
    }

    private void SetFilterAll() => SetFilter("all");
    private void SetFilterStudents() => SetFilter("students");
    private void SetFilterTutors() => SetFilter("tutors");
    private void SetFilterSubscribedStudents() => SetFilter("subscribed-students");
    private void SetFilterSubscribedTutors() => SetFilter("subscribed-tutors");

    protected override async Task OnInitializedAsync()
    {
        await LoadPeersAsync();
        await LoadSubscribedUsersAsync();
    }

    private async Task LoadPeersAsync()
    {
        try
        {
            var queryParam = $"?query={(SearchQuery ?? "").Trim()}";
            var result = await Http.GetFromJsonAsync<List<PeerUser>>(
                $"https://localhost:7228/api/peers/search{queryParam}"
            );
            AllPeers = result ?? new List<PeerUser>();
        }
        catch { AllPeers = new List<PeerUser>(); }
    }

    private async Task LoadSubscribedUsersAsync()
    {
        try
        {
            var currentUserId = await AuthService.GetCurrentUserIdAsync();
            if (currentUserId.HasValue)
            {
                var result = await Http.GetFromJsonAsync<List<FollowedUser>>($"api/follow/following-list/{currentUserId.Value}");
                SubscribedUserIds = result?.Select(u => (long)u.Id).ToList() ?? new List<long>();
            }
        }
        catch { SubscribedUserIds = new List<long>(); }
    }

    private void NavigateToProfile(long userId, bool isTutor)
    {
        string profileType = isTutor ? "tutorprofile" : "studentprofile";
        NavManager.NavigateTo($"/{profileType}/{userId}");
    }

    private void NavigateToPeerProfile(PeerUser peer)
    {
        bool isTutor = (peer.Role ?? "").ToLower() == "tutor";
        NavigateToProfile(peer.UserId, isTutor);
    }

    public class PeerUser
    {
        public long UserId { get; set; }
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string Role { get; set; } = ""; // "student", "tutor", maybe "admin"
        public string? Program { get; set; }
        public string? Year { get; set; }
        public string? Subjects { get; set; } // Interests / clusters / first one shown as pill
        public string? ProfilePicturePath { get; set; }
    }

    public class FollowedUser
    {
        public int Id { get; set; }
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string RoleString { get; set; } = "";
        public string? Email { get; set; }
        public string? PhoneNum { get; set; }
        public string? ProfilePicturePath { get; set; }
        public string? City { get; set; }
        public string? Country { get; set; }
        public string? Timezone { get; set; }
        public string? Website { get; set; }
        public string? Program { get; set; }
        public string? Year { get; set; }
        public string? About { get; set; }
        public string? Interests { get; set; }
    }
}
