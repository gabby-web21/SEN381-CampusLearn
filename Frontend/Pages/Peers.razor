@page "/peers"
@inject HttpClient Http
@inject NavigationManager NavManager
<PageTitle>Peers | CampusLearn</PageTitle>

<main class="layout">
    <div class="peers-container">
        <div class="peers-header">
            <h1 class="peers-title">PEERS</h1>
            <div class="search-box">
                <span class="search-icon"></span>
                <input type="text"
                       class="search-input"
                       placeholder="Search"
                       @bind="SearchQuery"
                       @bind:event="oninput" />
                <span class="voice-icon"></span>
            </div>
        </div>

        <!-- Students Section -->
        <section class="peer-section">
            <h2 class="section-title">Students</h2>
            <div class="peer-grid">
                @if (FilteredStudents != null && FilteredStudents.Any())
                {
                    @foreach (var student in FilteredStudents)
                    {
                        <div class="peer-card student-card" @onclick="() => NavigateToProfile(student.UserId, false)">
                            <div class="card-header">
                                <div class="avatar-circle">
                                    <svg class="avatar-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                        <circle cx="12" cy="7" r="4"></circle>
                                    </svg>
                                </div>
                                <div class="message-icon">
                                    <svg viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z"></path>
                                    </svg>
                                </div>
                            </div>
                            <div class="card-footer">
                                <span class="peer-name">@student.FirstName @student.LastName</span>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>No students found.</p>
                }
            </div>
        </section>

        <!-- Tutors Section -->
        <section class="peer-section">
            <h2 class="section-title">Tutors</h2>
            <div class="peer-grid">
                @if (FilteredTutors != null && FilteredTutors.Any())
                {
                    @foreach (var tutor in FilteredTutors)
                    {
                        <div class="peer-card tutor-card" @onclick="() => NavigateToProfile(tutor.UserId, true)">
                            <div class="card-header">
                                <div class="avatar-circle">
                                    <svg class="avatar-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                        <circle cx="12" cy="7" r="4"></circle>
                                    </svg>
                                </div>
                                <div class="message-icon">
                                    <svg viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z"></path>
                                    </svg>
                                </div>
                            </div>
                            <div class="card-footer">
                                <span class="peer-name">@tutor.FirstName @tutor.LastName</span>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>No tutors found.</p>
                }
            </div>
        </section>
    </div>
</main>

<style>
    /* ========== Color & Spacing Tokens ========== */
    :root {
        --bg: #edf3f6;
        --nav: #3f3f3f;
        --text: #2a2a2a;
        --text-dim: #6b6b6b;
        --accent: #a4103b;
        --accent-soft: #c21c55;
        --student-orange: #f28a1e;
        --tutor-maroon: #a4103b;
        --panel-bg: #ffffff;
        --panel-ring: #d3dde6;
        --search-bg: #e8e8e8;
        --radius: 1.25rem;
        --shadow: 0 4px 14px rgba(0,0,0,0.08);
    }

    /* ========== Base ========== */
    * {
        box-sizing: border-box;
    }

    html, body {
        height: 100%;
        margin: 0;
    }

    body {
        background: var(--bg);
        color: var(--text);
        font-family: "Lexend", sans-serif;
        font-weight: 300;
        line-height: 1.4;
    }

    /* ========== Main Layout ========== */
    .layout {
        padding: 2rem;
        max-width: 80rem;
        margin: 0 auto;
    }

    .peers-container {
        display: grid;
        gap: 2rem;
    }

    /* ========== Header ========== */
    .peers-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 2rem;
        flex-wrap: wrap;
    }

    .peers-title {
        font-size: 2rem;
        font-weight: 600;
        margin: 0;
        color: var(--text);
    }

    /* ========== Search Box ========== */
    .search-box {
        display: flex;
        align-items: center;
        background: var(--search-bg);
        border-radius: 2rem;
        padding: 0.6rem 1.2rem;
        gap: 0.8rem;
        min-width: 20rem;
        flex: 1;
        max-width: 30rem;
    }

    .search-icon,
    .voice-icon {
        font-size: 1.2rem;
        opacity: 0.6;
    }

    .search-input {
        flex: 1;
        border: none;
        background: transparent;
        outline: none;
        font-family: "Lexend", sans-serif;
        font-size: 1rem;
        color: var(--text);
    }

        .search-input::placeholder {
            color: var(--text-dim);
            opacity: 0.7;
        }

    /* ========== Sections ========== */
    .peer-section {
        display: grid;
        gap: 1rem;
    }

    .section-title {
        font-size: 1.2rem;
        font-weight: 600;
        margin: 0;
        color: var(--text);
    }

    /* ========== Peer Grid ========== */
    .peer-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(9rem, 1fr));
        gap: 1.5rem;
        overflow-x: auto;
        padding-bottom: 0.5rem;
    }

    /* ========== Peer Cards ========== */
    .peer-card {
        display: flex;
        flex-direction: column;
        border-radius: var(--radius);
        overflow: hidden;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        box-shadow: var(--shadow);
        min-width: 9rem;
    }

        .peer-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.12);
        }

    .card-header {
        position: relative;
        padding: 2rem 1rem;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .student-card .card-header {
        background: var(--student-orange);
    }

    .tutor-card .card-header {
        background: var(--tutor-maroon);
    }

    /* ========== Avatar ========== */
    .avatar-circle {
        width: 3.5rem;
        height: 3.5rem;
        border-radius: 50%;
        background: white;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .avatar-icon {
        width: 2rem;
        height: 2rem;
        stroke-width: 2;
        color: var(--text);
    }

    /* ========== Icons ========== */
    .message-icon {
        position: absolute;
        top: 0.8rem;
        right: 0.8rem;
        width: 1.5rem;
        height: 1.5rem;
        color: gainsboro;
    }

        .message-icon svg {
            width: 100%;
            height: 100%;
        }

    /* ========== Card Footer ========== */
    .card-footer {
        background: white;
        padding: 0.8rem;
        text-align: center;
        border-top: 2px solid;
    }

    .student-card .card-footer {
        border-top-color: var(--student-orange);
    }

    .tutor-card .card-footer {
        border-top-color: var(--tutor-maroon);
    }

    s

    .peer-name {
        font-weight: 500;
        font-size: 0.9rem;
        color: var(--text);
        display: block;
    }

    /* ========== Responsive ========== */
    @@media (max-width: 48rem) {
        .peers-header {
            flex-direction: column;
            align-items: stretch;
        }

        .search-box {
            max-width: 100%;
        }

        .peer-grid {
            grid-template-columns: repeat(auto-fill, minmax(8rem, 1fr));
        }
    }
</style>

@code {
    private string SearchQuery { get; set; } = "";

    private List<PeerUser> Students { get; set; } = new();
    private List<PeerUser> Tutors { get; set; } = new();

    private IEnumerable<PeerUser> FilteredStudents =>
        Students.Where(s =>
            string.IsNullOrWhiteSpace(SearchQuery) ||
            s.FirstName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
            s.LastName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<PeerUser> FilteredTutors =>
        Tutors.Where(t =>
            string.IsNullOrWhiteSpace(SearchQuery) ||
            t.FirstName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
            t.LastName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        await LoadPeersAsync();
    }

    private async Task LoadPeersAsync()
    {
        try
        {
            var queryParam = $"?query={(SearchQuery ?? "").Trim()}";

            var result = await Http.GetFromJsonAsync<List<PeerUser>>(
                $"https://localhost:7228/api/peers/search{queryParam}"
            );

            if (result != null)
            {
                Students = result.Where(u => u.Role == "student").ToList();
                Tutors = result.Where(u => u.Role == "tutor").ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Failed to load peers: {ex.Message}");
        }
    }

    private void NavigateToProfile(long userId, bool isTutor)
    {
        // 👇 Corrected route paths
        string profileType = isTutor ? "tutorprofile" : "studentprofile";
        NavManager.NavigateTo($"/{profileType}/{userId}");
    }

    public class PeerUser
    {
        public long UserId { get; set; }
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string Role { get; set; } = ""; // "student" or "tutor"
    }
}
