@page "/dashboard"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using System.Net.Http.Json
@using System.Globalization
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<PageTitle>Dashboard | CampusLearn</PageTitle>

<main class="layout container">
    <!-- Left Column -->
    <section class="content">
        <h2 class="greeting">
            Welcome, <span>@StudentName</span> <small>[ @UserRole ]</small>
        </h2>

        <!-- Notifications -->
        <section class="panel">
            <header class="panel-hd">Notifications</header>
            <div class="notif-header-actions">
                @if (Notifications.Count > 0)
                {
                    <button class="btn-mark-read" @onclick="MarkAllAsRead" disabled="@isMarkingRead">
                        @(isMarkingRead ? "Marking..." : "Mark all as read")
                    </button>
                }
            </div>
            <div class="bubble notif-bubble">
                <ul class="notif-list">
                    @foreach (var notification in Notifications)
                    {
                        <li class="notif-item clickable" @onclick='() => HandleNotificationClick(notification)' data-role="@notification.RoleString">
                            <div class="notif-dot" aria-hidden="true">
                                @if (notification.Count > 1)
                                {
                                    <span class="notif-badge">@notification.Count</span>
                                }
                            </div>
                            <p class="notif-text">
                                @((MarkupString)notification.Body)
                                <span class="notif-time">@notification.TimeAgo</span>
                            </p>
                        </li>
                    }
                    @if (Notifications.Count == 0)
                    {
                        <li class="notif-empty">You’re all caught up 🎉</li>
                    }
                </ul>
            </div>
        </section>

        <!-- Upcoming Sessions -->
        <section class="panel">
            <header class="panel-hd">@($"{UpcomingSessions.Count} Upcoming Sessions")</header>
            <div class="bubble sessions-bubble">
                @if (UpcomingSessions.Count == 0)
                {
                    <article class="session-empty">No upcoming sessions yet. Book one from the Tutors page.</article>
                }
                else
                {
                    @foreach (var session in UpcomingSessions)
                    {
                        <article class="session">
                            <div class="session-meta">in @session.TimeUntil</div>
                            <div class="session-card">
                                <div class="session-title">
                                    @session.Title on @session.When.ToString("dddd, dd MMM yyyy")
                                </div>
                                <div class="session-tags">
                                    <span>@session.When.ToString("HH:mm")</span>
                                    <span>@session.Duration</span>
                                </div>
                            </div>
                        </article>
                    }
                }
            </div>
        </section>

        <!-- Quick actions -->
        <section class="panel">
            <header class="panel-hd">Quick actions</header>
            <div class="tiles tiles-qa">
                <NavLink class="tile" href="/peers" match="NavLinkMatch.Prefix">
                    <h3>Peers</h3>
                    <p>Find students and tutors to connect with.</p>
                </NavLink>
                <NavLink class="tile" href="/subjects" match="NavLinkMatch.Prefix">
                    <h3>Explore Subjects</h3>
                    <p>Forums, topics, tutors, and resources.</p>
                </NavLink>
                <NavLink class="tile" href="/create-profile" match="NavLinkMatch.Prefix">
                    <h3>Create/Update Profile</h3>
                    <p>Edit your programme, year, and subjects.</p>
                </NavLink>
            </div>
        </section>
    </section>

    <!-- Full-width Calendar (spans both columns) -->
    <section class="panel calendar-wide">
        <header class="panel-hd">Calendar</header>

        <div class="calendar-wrap">
            <div class="cal-toolbar">
                <div class="cal-left">
                    <button class="cal-nav" @onclick='() => ShiftMonth(-1)' aria-label="Previous month">◀</button>
                </div>

                <div class="cal-mid">
                    <select class="cal-pick" @bind="PickerMonth" @bind:after="OnPickerChanged">
                        @for (int m = 1; m <= 12; m++)
                        {
                            <option value="@m">@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
                        }
                    </select>

                    <select class="cal-pick" @bind="PickerYear" @bind:after="OnPickerChanged">
                        @foreach (var y in YearPickerOptions)
                        {
                            <option value="@y">@y</option>
                        }
                    </select>

                    <button class="cal-today" @onclick="GoToday">Today</button>
                </div>

                <div class="cal-right">
                    <button class="cal-nav" @onclick='() => ShiftMonth(1)' aria-label="Next month">▶</button>
                </div>
            </div>

            <div class="cal-grid @CalAnimClass">
                @foreach (var d in WeekdayNames)
                {
                    <div class="cal-dow">@d</div>
                }

                @foreach (var cell in CalendarCells)
                {
                    var inMonth = cell.InMonth ? "" : "out-month";
                    var today = cell.Date.Date == DateTime.Today ? "today" : "";
                    <button type="button"
                            class="cal-cell @inMonth @today"
                            @onclick='() => OpenNewEvent(cell.Date)'>
                        <div class="cal-num">@cell.Date.Day</div>

                        @if (cell.Events?.Count > 0)
                        {
                            <ul class="cal-events">
                                @foreach (var ev in cell.Events)
                                {
                                    <li class="cal-event" title="@ev.Title" @onclick:stopPropagation="true" @onclick='() => OpenEditEvent(ev)'>
                                        <span class="cal-ico" aria-hidden="true"></span>
                                        <span class="cal-title">@ev.Title</span>
                                    </li>
                                }
                            </ul>
                        }
                    </button>
                }
            </div>

        </div>
    </section>
</main>

<!-- Clara floating bubble (kept as-is) -->
<button class="clara-fab" title="Ask Clara" aria-label="Ask Clara" @onclick='() => NavigationManager.NavigateTo("/messages")'>
    <img src="/svgs/glitter-2-svgrepo-com.svg" alt="" aria-hidden="true" />
</button>

@* ===== New Event Modal (Moodle-style) ===== *@
@if (ShowNewEvent)
{
    <div class="modal-backdrop" @onclick="CloseNewEvent"></div>
    <div role="dialog" aria-modal="true" class="modal">
        <header class="modal-head">
            <h3>New event</h3>
            <button class="modal-x" @onclick="CloseNewEvent" aria-label="Close">×</button>
        </header>

        <div class="modal-body">
            <div class="field-row">
                <label class="label" for="evt-title">Event title <span class="req">*</span></label>
                <input id="evt-title"
                       class="ipt"
                       placeholder="e.g. Class Test 5 – BUM381"
                       @bind="NewEventTitle"
                       @bind:event="oninput" />
            </div>

            <div class="field-row">
                <label class="label">Date</label>
                <div class="date-row">
                    <select class="sel" @bind="NewDay">
                        @foreach (var d in Enumerable.Range(1, DateTime.DaysInMonth(NewYear, NewMonth)))
                        {
                            <option value="@d">@d</option>
                        }
                    </select>
                    <select class="sel" @bind="NewMonth">
                        @for (int m = 1; m <= 12; m++)
                        {
                            <option value="@m">@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
                        }
                    </select>
                    <select class="sel" @bind="NewYear">
                        @foreach (var y in YearOptions)
                        {
                            <option value="@y">@y</option>
                        }
                    </select>
                    <select class="sel" @bind="NewHour">
                        @foreach (var h in HourOptions)
                        {
                            <option value="@h">@h.ToString("D2")</option>
                        }
                    </select>
                    <select class="sel" @bind="NewMinute">
                        @foreach (var m in MinuteOptions)
                        {
                            <option value="@m">@m.ToString("D2")</option>
                        }
                    </select>
                </div>
            </div>

            @if (ShowRequired)
            {
                <div class="req-note"><span aria-hidden="true">!</span> Required</div>
            }
        </div>

        <footer class="modal-foot">
            <button class="btn-plain" @onclick="CloseNewEvent">Cancel</button>
            <button class="btn-save" @onclick="SaveNewEvent">Save</button>
        </footer>
    </div>
}

@* ===== Edit Event Modal ===== *@
@if (ShowEditEvent)
{
    <div class="modal-backdrop" @onclick="CloseEditEvent"></div>
    <div role="dialog" aria-modal="true" class="modal">
        <header class="modal-head">
            <h3>Edit event</h3>
            <button class="modal-x" @onclick="CloseEditEvent" aria-label="Close">×</button>
        </header>

        <div class="modal-body">
            <div class="field-row">
                <label class="label" for="evt-title-edit">Event title <span class="req">*</span></label>
                <input id="evt-title-edit" class="ipt" @bind="EditTitle" @bind:event="oninput" />
            </div>
            <div class="field-row">
                <label class="label">Date</label>
                <div class="date-row">
                    <select class="sel" @bind="EditDay">
                        @foreach (var d in Enumerable.Range(1, DateTime.DaysInMonth(EditYear, EditMonth)))
                        {
                            <option value="@d">@d</option>
                        }
                    </select>
                    <select class="sel" @bind="EditMonth">
                        @for (int m = 1; m <= 12; m++)
                        {
                            <option value="@m">@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
                        }
                    </select>
                    <select class="sel" @bind="EditYear">
                        @foreach (var y in YearOptions)
                        {
                            <option value="@y">@y</option>
                        }
                    </select>
                    <select class="sel" @bind="EditHour">
                        @foreach (var h in HourOptions)
                        {
                            <option value="@h">@h.ToString("D2")</option>
                        }
                    </select>
                    <select class="sel" @bind="EditMinute">
                        @foreach (var m in MinuteOptions)
                        {
                            <option value="@m">@m.ToString("D2")</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <footer class="modal-foot">
            <button class="btn-plain" @onclick="DeleteEditingEvent">Delete</button>
            <button class="btn-plain" @onclick="CloseEditEvent">Cancel</button>
            <button class="btn-save" @onclick="async () => await SaveEditedEvent()">Save</button>
        </footer>
    </div>
}

<style>
    /* ===== Design tokens (greyer baseline; removed blue accents) ===== */
    :root {
        --bg: #F2F3F5;
        --nav: #E6E9EE;
        --ink: #2A2A2A;
        --teal: #1B998B;
        --orange: #F17300;
        --rose: #AD1F54;
        --moodle-maroon: #772953;
        --mist: #EEF1F5;
        --panel-bg: #FFFFFF;
        --panel-ring: color-mix(in oklab, var(--ink) 12%, white);
        --panel-tint: #F7F8FA;
        --radius: 1.25rem;
        --shadow: 0 8px 22px rgba(0,0,0,.06);
        --container: min(1200px,92vw);
        transition: background-color .3s ease,color .3s ease,border-color .3s ease,box-shadow .3s ease;
    }

    *, *::before, *::after {
        box-sizing: border-box;
        transition: background-color .3s ease,color .3s ease,border-color .3s ease,box-shadow .3s ease
    }

    html, body {
        height: 100%
    }

    body {
        margin: 0;
        background: var(--bg);
        color: var(--ink);
        font-family: system-ui,-apple-system,Segoe UI,Inter,Roboto,Arial,sans-serif;
        line-height: 1.45
    }

    .container {
        width: var(--container);
        margin-inline: auto;
        padding-inline: clamp(12px,3vw,24px)
    }

    /* ====== GRID: keep markup; place items by CSS ====== */
    .layout {
        display: grid;
        grid-template-columns: 1fr 320px;
        gap: clamp(8px,2vw,16px); /* Minimal layout gap */
        padding-block: clamp(6px,2vw,12px); /* Minimal padding */
    }

    .content {
        display: contents;
    }
        /* expose children to parent grid */

        /* Title spans both columns on row 1 */
        .content > .greeting {
            grid-column: 1 / -1;
            grid-row: 1;
            margin-bottom: 4px; /* Minimal spacing below greeting */
        }

        /* Row 2: Notifications (col 1) and Quick actions (col 2) start at same height */
        .content > .panel:nth-of-type(1) {
            grid-column: 1;
            grid-row: 2;
        }
        /* Notifications */
        .content > .panel:nth-of-type(3) {
            grid-column: 2;
            grid-row: 2;
            align-self: start;
        }
        /* Quick actions */

        /* Row 3: Upcoming Sessions under notifications (col 1) */
        .content > .panel:nth-of-type(2) {
            grid-column: 1;
            grid-row: 3;
        }


        /* ====== GRID: keep markup; place items by CSS ====== */
.layout { ... }
.content { display: contents; }
.content > .greeting { grid-column: 1 / -1; grid-row: 1; }
.content > .panel:nth-of-type(1) { grid-column: 1; grid-row: 2; }     /* Notifications */
.content > .panel:nth-of-type(3) { grid-column: 2; grid-row: 2; ... }  /* Quick actions */
.content > .panel:nth-of-type(2) { grid-column: 1; grid-row: 3; }      /* Upcoming */


        /* Make "Mark all as read" share the same row as the heading,
       so the notifications list sits immediately under the heading */
        .content > .panel:nth-of-type(1) {
            grid-template-columns: 1fr auto; /* title | button */
            grid-template-rows: min-content;
            align-items: baseline; /* Align to text baseline instead of center */
            gap: 2px; /* Ultra-minimal gap between heading and button */
        }

            .content > .panel:nth-of-type(1) .panel-hd {
                grid-column: 1; /* left */
                grid-row: 1;
                margin: 0;
                align-self: baseline; /* Ensure consistent baseline alignment */
            }

            .content > .panel:nth-of-type(1) .notif-header-actions {
                grid-column: 2; /* right */
                grid-row: 1;
                justify-self: end;
                margin: 0;
                align-self: baseline; /* Ensure consistent baseline alignment */
            }

            .content > .panel:nth-of-type(1) .notif-bubble {
                grid-column: 1 / -1; /* span both columns */
                grid-row: 2; /* sits right under the heading row */
                margin-top: 0px; /* No spacing - notifications directly below header */
            }

    /* optional: stack on narrow screens */
    @@media (max-width:980px) {
        .content > .panel:nth-of-type(1)

    {
        grid-template-columns: 1fr;
    }

    .content > .panel:nth-of-type(1) .notif-header-actions {
        grid-column: 1;
        justify-self: end;
    }

    }

    .calendar-wide {
        grid-column: 1 / -1
    }

    /* greeting */
    .greeting {
        margin: 0;
        font-size: clamp(20px,2.8vw,28px);
        font-weight: 700
    }

        .greeting span {
            font-weight: 800
        }

        .greeting small {
            opacity: .7;
            font-weight: 600
        }

    /* panels & bubbles */
    .panel {
        display: grid;
        gap: 4px; /* Further reduced internal gap within panels */
        margin-bottom: 8px; /* Minimal spacing between major sections */
    }

    .panel-hd {
        font-weight: 800;
        color: color-mix(in oklab,var(--ink) 55%,white)
    }

    .bubble {
        background: var(--panel-bg);
        border: 1px solid var(--panel-ring);
        border-radius: var(--radius);
        box-shadow: var(--shadow);
        padding: clamp(6px,1.5vw,10px); /* Further reduced bubble padding */
        display: grid;
        gap: 4px; /* Minimal gap within bubbles */
    }

    .notif-bubble {
        background: #FFFF;
        padding: 4px; /* Minimal padding for notification bubble specifically */
    }

    .sessions-bubble {
        background: #FFFF
    }

    .notif-header-actions {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 0; /* Remove bottom margin for better alignment */
    }

    .btn-mark-read {
        background: #fff;
        border: 1px solid var(--panel-ring);
        border-radius: 8px;
        padding: 6px 12px;
        font-weight: 700;
        font-size: .85rem;
        cursor: pointer;
        color: var(--ink);
        transition: all .2s ease;
        line-height: 1.2; /* Ensure consistent line height with heading */
        align-self: baseline; /* Align with text baseline */
    }

        .btn-mark-read:hover:not(:disabled) {
            background: color-mix(in oklab,var(--rose) 10%,white);
            border-color: var(--rose);
            color: var(--rose);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,.08)
        }

        .btn-mark-read:disabled {
            opacity: .6;
            cursor: not-allowed
        }

    /* notifications */
    .notif-list {
        list-style: none;
        margin: 0;
        padding: 0;
        display: grid;
        gap: 0.1rem; /* Much smaller gap between notification rows */
    }

    .notif-item {
        color: #fff;
        padding: 0.6rem 0.8rem; /* Further reduced padding on notification items */
        border-radius: var(--radius);
        display: flex;
        align-items: center;
        gap: 0.6rem; /* Further reduced gap within notification items */
        cursor: pointer;
        transition: transform .14s ease, filter .14s ease
    }

        .notif-item[data-role="Tutor"] {
            background: linear-gradient(135deg,#E12929 0% 70%,#F3E17F 100%);
        }

        .notif-item[data-role="Student"] {
            background: linear-gradient(135deg,#2025B8 0% 70%,#78D6FF 100%);
        }

        .notif-item[data-role="Clara"] {
            background: linear-gradient(135deg,#B14CF4 0% 70%,#FFA3F9 100%);
        }

        .notif-item:not([data-role]) {
            background: linear-gradient(135deg,#6B7280 0% 70%,#CBD5E1 100%);
        }

        .notif-item:hover {
            transform: scale(1.012);
            filter: brightness(1.25)
        }

    .notif-empty {
        background: #fff;
        border: 1px dashed var(--panel-ring);
        border-radius: var(--radius);
        padding: .9rem 1.1rem;
        color: #64707c;
        font-weight: 600;
        text-align: center
    }

    .notif-dot {
        width: 1.5rem;
        height: 1.5rem;
        background: #fff;
        border-radius: 50%;
        position: relative;
        flex-shrink: 0
    }

    .notif-badge {
        position: absolute;
        top: -6px;
        right: -6px;
        background: #FF4444;
        color: #fff;
        border-radius: 50%;
        width: 22px;
        height: 22px;
        display: grid;
        place-items: center;
        font-size: .72rem;
        font-weight: 900;
        border: 2px solid rgba(255,255,255,.6)
    }

    .notif-text {
        margin: 0;
        font-size: 1rem
    }

    .notif-time {
        font-size: .85rem;
        opacity: .95;
        margin-left: .4rem
    }

    /* quick actions tiles — neutralized */
    .tiles {
        display: grid;
        grid-template-columns: repeat(auto-fill,minmax(220px,1fr));
        gap: clamp(12px,2.2vw,18px)
    }

    .tiles-qa .tile {
        display: block;
        text-decoration: none;
        color: var(--ink);
        background: white;
        border: 1px solid var(--panel-ring);
        border-radius: calc(var(--radius) - 4px);
        padding: 16px 18px;
        box-shadow: var(--shadow);
        transition: transform .15s ease, box-shadow .15s ease
    }

        .tiles-qa .tile:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 28px rgba(0,0,0,.08)
        }

        .tiles-qa .tile h3 {
            font-weight: 700;
            margin-bottom: 6px
        }

        .tiles-qa .tile p {
            margin: 0;
            color: color-mix(in oklab,var(--ink) 55%,white);
            font-size: .95rem
        }

    /* calendar */
    .calendar-wrap {
        background: var(--panel-bg);
        border: 1px solid var(--panel-ring);
        border-radius: var(--radius);
        box-shadow: var(--shadow);
        padding: 10px 10px 16px
    }

    .cal-toolbar {
        display: grid;
        grid-template-columns: 1fr auto 1fr;
        align-items: center;
        gap: 10px;
        padding: 8px 6px 6px;
        background: var(--mist);
        border-radius: calc(var(--radius) - 6px);
        border-bottom: 1px solid var(--panel-ring)
    }

    .cal-left {
        justify-self: start
    }

    .cal-mid {
        justify-self: center;
        display: flex;
        align-items: center;
        gap: 8px;
        flex-wrap: wrap
    }

    .cal-right {
        justify-self: end
    }

    .cal-pick, .cal-today {
        border: 1px solid var(--panel-ring);
        background: #fff;
        border-radius: 10px;
        padding: 6px 10px;
        font: inherit
    }

    .cal-today {
        font-weight: 800
    }

    .cal-month {
        font-weight: 800;
        letter-spacing: .3px
    }

    .cal-nav {
        border: 1px solid var(--panel-ring);
        background: #fff;
        width: 36px;
        height: 36px;
        border-radius: 8px;
        cursor: pointer
    }

    .cal-grid {
        margin-top: 12px;
        display: grid;
        grid-template-columns: repeat(7,1fr);
        gap: 0
    }

    .cal-dow {
        background: #E8EBF1;
        padding: 12px 10px;
        border: 1px solid var(--panel-ring);
        font-weight: 800
    }

    .cal-cell {
        min-height: 120px;
        border: 1px solid var(--panel-ring);
        background: #fff;
        display: flex;
        flex-direction: column;
        gap: 6px;
        padding: 8px;
        text-align: left;
        border-radius: 0;
        cursor: pointer;
        transition: background .08s ease, transform .08s ease
    }

        .cal-cell:hover {
            background: #fbfcfe;
            transform: translateY(-1px)
        }

        .cal-cell.out-month {
            background: #fff;
            opacity: .55
        }

        .cal-cell.today .cal-num {
            background: var(--moodle-maroon);
            color: #fff;
            border-radius: 8px;
            padding: 2px 6px;
            display: inline-block
        }

    .cal-num {
        font-weight: 700;
        color: var(--moodle-maroon)
    }

    .cal-events {
        list-style: none;
        margin: 0;
        padding: 0;
        display: grid;
        gap: 6px
    }

    .cal-event {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        padding: 4px 8px;
        background: #fff;
        border-radius: 8px;
        font-size: .9rem;
        box-shadow: 0 1px 0 rgba(0,0,0,.02);
        max-width: 100%;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        transition: transform .08s ease;
        border: 1px solid color-mix(in oklab,var(--moodle-maroon) 40%, white)
    }

        .cal-event:hover {
            transform: translateX(2px)
        }

        .cal-event .cal-ico {
            width: 14px;
            height: 14px;
            border-radius: 3px;
            background: var(--moodle-maroon)
        }

    .cal-ghost {
        border: 1px solid var(--panel-ring);
        background: #fff;
        padding: 6px 10px;
        border-radius: 10px;
        font-weight: 700;
        cursor: pointer
    }

    /* Modal styles */
    .modal-backdrop {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,.4);
        z-index: 1000;
    }

    .modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: var(--panel-bg);
        border: 1px solid var(--panel-ring);
        border-radius: var(--radius);
        box-shadow: 0 20px 60px rgba(0,0,0,.3);
        z-index: 1001;
        width: min(500px, 90vw);
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-head {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px 20px;
        border-bottom: 1px solid var(--panel-ring);
        background: var(--mist);
    }

    .modal-head h3 {
        margin: 0;
        font-weight: 800;
        color: var(--ink);
    }

    .modal-x {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: var(--ink);
        padding: 4px;
        border-radius: 4px;
    }

    .modal-x:hover {
        background: rgba(0,0,0,.1);
    }

    .modal-body {
        padding: 20px;
    }

    .field-row {
        margin-bottom: 16px;
    }

    .label {
        display: block;
        font-weight: 700;
        margin-bottom: 6px;
        color: var(--ink);
    }

    .req {
        color: var(--rose);
    }

    .ipt, .sel {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid var(--panel-ring);
        border-radius: 8px;
        font: inherit;
        background: var(--panel-bg);
        color: var(--ink);
    }

    .ipt:focus, .sel:focus {
        outline: none;
        border-color: var(--teal);
        box-shadow: 0 0 0 3px rgba(27, 153, 139, 0.1);
    }

    .date-row {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 8px;
    }

    .btn-row {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
        margin-top: 20px;
    }

    .btn {
        padding: 10px 16px;
        border: 1px solid var(--panel-ring);
        border-radius: 8px;
        font-weight: 700;
        cursor: pointer;
        transition: all .2s ease;
    }

    .btn-primary {
        background: var(--teal);
        color: white;
        border-color: var(--teal);
    }

    .btn-primary:hover {
        background: color-mix(in oklab, var(--teal) 85%, black);
    }

    .btn-secondary {
        background: var(--panel-bg);
        color: var(--ink);
        border-color: var(--panel-ring);
    }

    .btn-secondary:hover {
        background: var(--mist);
    }

    .btn-danger {
        background: var(--rose);
        color: white;
        border-color: var(--rose);
    }

    .btn-danger:hover {
        background: color-mix(in oklab, var(--rose) 85%, black);
    }

    /* Clara floating bubble */
    .clara-fab {
        position: fixed;
        right: 20px;
        bottom: 20px;
        z-index: 70;
        width: 56px;
        height: 56px;
        border-radius: 50%;
        border: 1px solid var(--panel-ring);
        background: #FFFFFF;
        display: grid;
        place-items: center;
        box-shadow: 0 10px 24px rgba(0,0,0,.12);
        cursor: pointer;
        transition: transform .15s ease, filter .15s ease, box-shadow .15s ease
    }

        .clara-fab img {
            width: 26px;
            height: 26px;
            display: block
        }

        .clara-fab:hover {
            transform: translateY(-2px);
            filter: brightness(1.06);
            box-shadow: 0 14px 32px rgba(0,0,0,.16)
        }

    /* responsive */
    @@media (max-width:980px) {
        .layout {
            grid-template-columns: 1fr
        }

        .content {
            display: grid;
            gap: clamp(16px,3vw,22px);
        }

            .content > .greeting,
            .content > .panel:nth-of-type(1),
            .content > .panel:nth-of-type(2),
            .content > .panel:nth-of-type(3) {
                grid-column: 1;
                grid-row: auto;
            }

        .cal-cell {
            min-height: 88px
        }

        .cal-event {
            font-size: .86rem
        }
    }
</style>

@code {
    private string StudentName = "Loading...";
    private string UserRole = "";
    private int CurrentUserId;
    private bool isMarkingRead = false;

    private List<NotificationItem> Notifications = new();

    // UpcomingSessions is computed from AllEvents in ComputeUpcoming()

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uid = await JS.InvokeAsync<string>("localStorage.getItem", "userId");
            if (string.IsNullOrEmpty(uid) || !int.TryParse(uid, out int userId))
            { NavigationManager.NavigateTo("/login"); return; }

            CurrentUserId = userId; // Store for later use

            var response = await Http.GetAsync($"https://localhost:7228/api/User/by-id/{userId}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();
                if (json != null)
                {
                    StudentName = json.ContainsKey("fullName") ? json["fullName"]?.ToString() ?? "User" : "User";
                    UserRole = json.ContainsKey("role") ? json["role"]?.ToString() ?? "Student" : "Student";
                }
            }
            else { StudentName = "User"; UserRole = "Student"; }

            // Load events for this user
            await LoadEvents(userId);

            // Load notifications
            await LoadNotifications(userId);
        }
        catch { StudentName = "User"; UserRole = "Student"; }
    }

    private async Task LoadNotifications(int userId)
    {
        try
        {
            var response = await Http.GetAsync($"https://localhost:7228/api/Notifications/user/{userId}");
            if (response.IsSuccessStatusCode)
            {
                var notificationDtos = await response.Content.ReadFromJsonAsync<List<NotificationDto>>();
                if (notificationDtos != null)
                {
                    // Only show unread notifications on dashboard
                    var unreadNotifications = notificationDtos
                        .Where(n => !n.IsRead)
                        .OrderByDescending(n => n.SentAt)
                        .ToList();

                    var grouped = unreadNotifications
                        .GroupBy(n => new { n.Type, SenderName = ExtractSenderName(n.Body) })
                        .Select(g =>
                        {
                            var latest = g.First();
                            var sender = g.Key.SenderName;
                            var inferredRole =
                                (!string.IsNullOrWhiteSpace(sender) && sender.Trim().Equals("ClaraTea", StringComparison.OrdinalIgnoreCase)) ? "Clara"
                                : (UserRole?.Equals("Tutor", StringComparison.OrdinalIgnoreCase) == true ? "Student" : "Tutor");

                            return new NotificationItem
                            {
                                NotificationId = latest.NotificationId,
                                SenderName = sender,
                                Body = g.Count() > 1
                                    ? $"<strong>{sender}</strong> sent you {g.Count()} messages"
                                    : latest.Body,
                                TimeAgo = FormatTimeAgo(latest.SentAt),
                                IsRead = false,
                                Type = latest.Type,
                                Count = g.Count(),
                                NotificationIds = g.Select(n => n.NotificationId).ToList(),
                                RoleString = inferredRole
                            };
                        })
                        .Take(5)
                        .ToList();

                    Notifications = grouped;

                    // ==== MOCK NOTIFICATIONS (DELETE AFTER TESTING) ====
                    if (Notifications.Count == 0)
                    {
                        Notifications = new List<NotificationItem>
                        {
                            new NotificationItem {
                                SenderName = "ClaraTea",
                                Body = "<strong>ClaraTea</strong> found 2 new tutors for you to message.",
                                TimeAgo = "just now",
                                RoleString = "Clara",
                                Type = "system"
                            },
                            new NotificationItem {
                                SenderName = "Taylor Smith",
                                Body = "<strong>Taylor Smith</strong> accepted your session request.",
                                TimeAgo = "5 mins ago",
                                RoleString = "Tutor",
                                Type = "chat_message"
                            },
                            new NotificationItem {
                                SenderName = "OliveOil Rodriguez",
                                Body = "<strong>OliveOil Rodriguez</strong> replied to your post in BUM381 forum.",
                                TimeAgo = "1 hr ago",
                                RoleString = "Student",
                                Type = "forum_reply"
                            }
                        };
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ Error loading notifications: {ex.Message}");
            // ==== MOCK NOTIFICATIONS (DELETE AFTER TESTING) ====
            Notifications = new List<NotificationItem>
            {
                new NotificationItem {
                    SenderName = "ClaraTea",
                    Body = "<strong>ClaraTea</strong> found 2 new tutors for you to message.",
                    TimeAgo = "just now",
                    RoleString = "Clara",
                    Type = "system"
                },
                new NotificationItem {
                    SenderName = "Taylor Smith",
                    Body = "<strong>Taylor Smith</strong> accepted your session request.",
                    TimeAgo = "5 mins ago",
                    RoleString = "Tutor",
                    Type = "chat_message"
                },
                new NotificationItem {
                    SenderName = "OliveOil Rodriguez",
                    Body = "<strong>OliveOil Rodriguez</strong> replied to your post in BUM381 forum.",
                    TimeAgo = "1 hr ago",
                    RoleString = "Student",
                    Type = "forum_reply"
                }
            };
        }
    }

    private static string ExtractSenderName(string body)
    {
        if (body.Contains("sent you a message"))
        {
            var parts = body.Split(" sent you a message");
            var nameWithTags = parts[0];
            return nameWithTags.Replace("<strong>", "").Replace("</strong>", "").Trim();
        }
        return "";
    }

    private static string FormatTimeAgo(DateTime sentAt)
    {
        var utcSentAt = DateTime.SpecifyKind(sentAt, DateTimeKind.Utc);
        var span = DateTime.UtcNow - utcSentAt;
        if (span.TotalMinutes < 1) return "just now";
        if (span.TotalMinutes < 60) return $"{Math.Floor(span.TotalMinutes)} minute{(Math.Floor(span.TotalMinutes) == 1 ? "" : "s")} ago";
        if (span.TotalHours < 24) return $"{Math.Floor(span.TotalHours)} hour{(Math.Floor(span.TotalHours) == 1 ? "" : "s")} ago";
        if (span.TotalDays < 7) return $"{Math.Floor(span.TotalDays)} day{(Math.Floor(span.TotalDays) == 1 ? "" : "s")} ago";
        return utcSentAt.ToLocalTime().ToString("MMM dd");
    }

    private void HandleNotificationClick(NotificationItem notification)
    {
        switch (notification.Type)
        {
            case "direct_message":
            case "chat_message":
                NavigationManager.NavigateTo("/messages");
                break;
            default:
                Console.WriteLine($"Notification clicked: {notification.Type}");
                break;
        }
    }

    private async Task MarkAllAsRead()
    {
        if (isMarkingRead || CurrentUserId == 0) return;

        try
        {
            isMarkingRead = true;
            var response = await Http.PutAsync($"https://localhost:7228/api/Notifications/mark-all-read/{CurrentUserId}", null);

            if (response.IsSuccessStatusCode)
            {
                Notifications.Clear();
                StateHasChanged();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"⚠️ Error marking notifications as read: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ Exception marking notifications as read: {ex.Message}");
        }
        finally
        {
            isMarkingRead = false;
        }
    }

    public class NotificationItem
    {
        public int NotificationId { get; set; }
        public string SenderName { get; set; } = "";
        public string Body { get; set; } = "";
        public string TimeAgo { get; set; } = "";
        public bool IsRead { get; set; }
        public string Type { get; set; } = "";
        public int Count { get; set; } = 1;
        public List<int> NotificationIds { get; set; } = new();
        public string RoleString { get; set; } = "Student"; // used by data-role for color
    }

    public class NotificationDto
    {
        public int NotificationId { get; set; }
        public int UserId { get; set; }
        public string Type { get; set; }
        public int? SubjectId { get; set; }
        public string Title { get; set; }
        public string Body { get; set; }
        public DateTime SentAt { get; set; }
        public string Priority { get; set; }
        public bool IsRead { get; set; }
    }
    public class SessionItem { public string Title { get; set; } = ""; public DateTime When { get; set; } public string Duration { get; set; } = "1 hr"; public string TimeUntil { get; set; } = ""; }

    /* ===== Calendar data ===== */
    private DateTime CurrentMonth = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    private readonly string[] WeekdayNames = new[] { "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" };
    private List<CalCell> CalendarCells = new();

    public class CalEvent { public int? Id { get; set; } public string Title { get; set; } = ""; public DateTime Date { get; set; } }
    public class CalCell { public DateTime Date { get; set; } public bool InMonth { get; set; } public List<CalEvent> Events { get; set; } = new(); }

    private List<CalEvent> AllEvents = new()
    {
        new CalEvent{ Title="Project Task 2", Date=new DateTime(DateTime.Today.Year, DateTime.Today.Month, 6) },
        new CalEvent{ Title="Assignment 5",  Date=new DateTime(DateTime.Today.Year, DateTime.Today.Month, 2) },
        new CalEvent{ Title="Class Test 4",  Date=new DateTime(DateTime.Today.Year, DateTime.Today.Month, 3) },
        new CalEvent{ Title="Class Test 5",  Date=new DateTime(DateTime.Today.Year, DateTime.Today.Month, 10) },
        new CalEvent{ Title="Project Task 4", Date=new DateTime(DateTime.Today.Year, DateTime.Today.Month, 22) },
        new CalEvent{ Title="Final Project Submission", Date=new DateTime(DateTime.Today.Year, DateTime.Today.Month, 24) },
        new CalEvent{ Title="Project Milestone", Date=new DateTime(DateTime.Today.Year, DateTime.Today.Month, 31) },
    };

    /* Picker values + options for jumping across years (past & future) */
    private int PickerMonth;
    private int PickerYear;
    private int[] YearPickerOptions = Enumerable.Range(DateTime.Today.Year - 1, 7).ToArray(); // last year to +5 years

    protected override void OnInitialized()
    {
        SyncPickers();
        BuildCalendar();
    }

    private void SyncPickers()
    {
        PickerMonth = CurrentMonth.Month;
        PickerYear = CurrentMonth.Year;
    }

    private int _slideDir = 0; // -1 prev, +1 next
    private string CalAnimClass => _slideDir == 0 ? "" : (_slideDir > 0 ? "slide-next" : "slide-prev");

    private void ShiftMonth(int delta)
    {
        _slideDir = Math.Sign(delta);
        CurrentMonth = CurrentMonth.AddMonths(delta);
        SyncPickers();
        BuildCalendar();
        _ = Task.Run(async () => { await Task.Delay(300); _slideDir = 0; StateHasChanged(); });
    }

    private void GoToday()
    {
        var target = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
        var diff = ((target.Year - CurrentMonth.Year) * 12) + (target.Month - CurrentMonth.Month);
        _slideDir = Math.Sign(diff);
        CurrentMonth = target;
        SyncPickers();
        BuildCalendar();
        _ = Task.Run(async () => { await Task.Delay(300); _slideDir = 0; StateHasChanged(); });
    }

    private void OnPickerChanged()
    {
        var target = new DateTime(PickerYear, PickerMonth, 1);
        var diff = ((target.Year - CurrentMonth.Year) * 12) + (target.Month - CurrentMonth.Month);
        _slideDir = Math.Sign(diff);
        CurrentMonth = target;
        BuildCalendar();

        _ = Task.Run(async () =>
        {
            await Task.Delay(300);
            _slideDir = 0;
            InvokeAsync(StateHasChanged);
        });
    }

    private void BuildCalendar()
    {
        CalendarCells.Clear();
        var first = CurrentMonth;
        int firstDayIndex = ((int)first.DayOfWeek + 6) % 7; // Monday-based week
        var start = first.AddDays(-firstDayIndex);

        for (int i = 0; i < 42; i++)
        {
            var date = start.AddDays(i);
            var cell = new CalCell { Date = date, InMonth = date.Month == CurrentMonth.Month };
            cell.Events = AllEvents.Where(e => e.Date.Date == date.Date).ToList();
            CalendarCells.Add(cell);

        }

        ComputeUpcoming();
    }

    /* ===== Modal state & handlers ===== */
    private bool ShowNewEvent = false;
    private string NewEventTitle = string.Empty;
    private int NewDay, NewMonth, NewYear, NewHour, NewMinute;
    private bool ShowRequired = false;

    private readonly int[] HourOptions = Enumerable.Range(0, 24).ToArray();
    private readonly int[] MinuteOptions = new[] { 0, 5, 10, 15, 20, 30, 40, 45, 50, 55 };
    private readonly int[] YearOptions = Enumerable.Range(DateTime.Today.Year - 1, 5).ToArray();

    private void OpenNewEvent(DateTime date)
    {
        NewDay = date.Day; NewMonth = date.Month; NewYear = date.Year;
        NewHour = 12; NewMinute = 0; NewEventTitle = string.Empty; ShowRequired = false;
        ShowNewEvent = true;
    }
    private void CloseNewEvent() => ShowNewEvent = false;

    private async Task SaveNewEvent()
    {
        if (string.IsNullOrWhiteSpace(NewEventTitle)) { ShowRequired = true; return; }
        var days = DateTime.DaysInMonth(NewYear, NewMonth);
        var day = Math.Min(NewDay, days);
        var when = new DateTime(NewYear, NewMonth, day, NewHour, NewMinute, 0);

        try
        {
            var uidStr = await JS.InvokeAsync<string>("localStorage.getItem", "userId");
            if (!int.TryParse(uidStr, out int userId)) { return; }

            var payload = new { UserId = userId, Title = NewEventTitle.Trim(), WhenAt = when, DurationMinutes = 60 };
            var resp = await Http.PostAsJsonAsync("https://localhost:7228/api/Events", payload);
            if (resp.IsSuccessStatusCode)
            {
                var created = await resp.Content.ReadFromJsonAsync<UserEventDto>();
                if (created != null)
                {
                    AllEvents.Add(new CalEvent { Id = created.Id, Title = created.Title, Date = created.WhenAt });
                }
                ShowNewEvent = false;
                BuildCalendar();
            }
            else
            {
                var msg = await resp.Content.ReadAsStringAsync();
                ShowRequired = true;
                Console.WriteLine($"Create failed: {msg}");
            }
        }
        catch { }
    }

    private async Task LoadEvents(int userId)
    {
        try
        {
            var resp = await Http.GetAsync($"https://localhost:7228/api/Events/user/{userId}");
            if (resp.IsSuccessStatusCode)
            {
                var models = await resp.Content.ReadFromJsonAsync<List<UserEventDto>>();
                if (models != null)
                {
                    AllEvents = models.Select(m => new CalEvent { Id = m.Id, Title = m.Title, Date = m.WhenAt }).ToList();
                    BuildCalendar();
                }
            }
        }
        catch { }
    }

    private class UserEventDto { public int Id { get; set; } public int UserId { get; set; } public string Title { get; set; } = string.Empty; public DateTime WhenAt { get; set; } public int DurationMinutes { get; set; } }

    private List<SessionItem> UpcomingSessions = new();

    private void ComputeUpcoming()
    {
        var now = DateTime.Now;
        UpcomingSessions = AllEvents
            .Where(e => e.Date >= now)
            .OrderBy(e => e.Date)
            .Take(5)
            .Select(e => new SessionItem
            {
                Title = e.Title,
                When = e.Date,
                Duration = "1 hr",
                TimeUntil = FormatTimeUntil(e.Date)
            })
            .ToList();
    }

    private static string FormatTimeUntil(DateTime target)
    {
        var span = target - DateTime.Now;
        if (span.TotalMinutes < 1) return "now";
        if (span.TotalHours < 1) return $"{Math.Floor(span.TotalMinutes)} mins";
        if (span.TotalDays < 1) return $"{Math.Floor(span.TotalHours)} hrs";
        return $"{Math.Floor(span.TotalDays)} days";
    }

    // Edit/Delete state & handlers
    private bool ShowEditEvent = false;
    private CalEvent? EditingEvent;
    private string EditTitle = string.Empty;
    private int EditDay, EditMonth, EditYear, EditHour, EditMinute;

    private void OpenEditEvent(CalEvent ev)
    {
        EditingEvent = ev;
        EditTitle = ev.Title;
        EditDay = ev.Date.Day; EditMonth = ev.Date.Month; EditYear = ev.Date.Year;
        EditHour = ev.Date.Hour; EditMinute = ev.Date.Minute;
        ShowEditEvent = true;
    }

    private void CloseEditEvent() => ShowEditEvent = false;

    private async Task SaveEditedEvent()
    {
        if (EditingEvent?.Id == null) { ShowEditEvent = false; return; }
        var days = DateTime.DaysInMonth(EditYear, EditMonth);
        var day = Math.Min(EditDay, days);
        var when = new DateTime(EditYear, EditMonth, day, EditHour, EditMinute, 0);
        var dto = new UserEventDto { Id = EditingEvent.Id.Value, UserId = 0, Title = EditTitle.Trim(), WhenAt = when, DurationMinutes = 60 };
        var resp = await Http.PutAsJsonAsync($"https://localhost:7228/api/Events/{EditingEvent.Id}", dto);
        if (resp.IsSuccessStatusCode)
        {
            EditingEvent.Title = EditTitle.Trim();
            EditingEvent.Date = when;
            ShowEditEvent = false;
            BuildCalendar();
        }
        else
        {
            var msg = await resp.Content.ReadAsStringAsync();
            Console.WriteLine($"Update failed: {msg}");
        }
    }

    private async Task DeleteEditingEvent()
    {
        if (EditingEvent?.Id == null) { ShowEditEvent = false; return; }
        var resp = await Http.DeleteAsync($"https://localhost:7228/api/Events/{EditingEvent.Id}");
        if (resp.IsSuccessStatusCode || resp.StatusCode == System.Net.HttpStatusCode.NoContent)
        {
            AllEvents.RemoveAll(e => e.Id == EditingEvent.Id);
            ShowEditEvent = false;
            BuildCalendar();
        }
    }
}
