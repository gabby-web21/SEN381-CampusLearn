@using Frontend.Services
@inherits LayoutComponentBase
@inject NavigationManager Nav
@inject HttpClient Http
@inject AuthService AuthService

@code {
    private bool menuOpen;
    private string? currentSubjectCode;

    protected override async Task OnInitializedAsync()
    {
        await LoadSubjectCode();
    }

    private async Task LoadSubjectCode()
    {
        try
        {
            var uri = Nav.ToAbsoluteUri(Nav.Uri);
            var queryString = uri.Query;
            
            if (!string.IsNullOrEmpty(queryString) && queryString.Contains("subjectId="))
            {
                var cleanQuery = queryString.TrimStart('?');
                var subjectIdParam = cleanQuery.Split('&')
                    .FirstOrDefault(p => p.StartsWith("subjectId="))
                    ?.Split('=')[1];
                
                if (!string.IsNullOrEmpty(subjectIdParam) && int.TryParse(subjectIdParam, out int subjectId))
                {
                    try
                    {
                        var subject = await Http.GetFromJsonAsync<SubjectInfo>($"https://localhost:7228/api/subject/{subjectId}");
                        if (subject != null)
                        {
                            currentSubjectCode = subject.SubjectCode;
                        }
                    }
                    catch
                    {
                        // Fall back to mapping if API call fails
                        currentSubjectCode = subjectId switch
                        {
                            1 => "BUM 281",
                            2 => "FUH181",
                            3 => "FUH182",
                            _ => $"SUB {subjectId}"
                        };
                    }
                }
            }
        }
        catch
        {
            // Fall back to default if parsing fails
        }
    }

    private void ToggleMenu() => menuOpen = !menuOpen;
    private void Go(string path) { menuOpen = false; Nav.NavigateTo(path); }
    
    private async Task HandleLogout()
    {
        try
        {
            // Clear session storage
            await AuthService.LogoutAsync();
            
            // Close the menu
            menuOpen = false;
            
            // Navigate to landing page
            Nav.NavigateTo("/");
            
            Console.WriteLine("[TopicHubLayout] User logged out successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[TopicHubLayout] Error during logout: {ex.Message}");
        }
    }
    
    private int GetTopicId() 
    { 
        var topicId = CascadedTopicId ?? TopicId;
        Console.WriteLine($"[TopicHubLayout] GetTopicId() - CascadedTopicId: {CascadedTopicId}, TopicId: {TopicId}, Returning: {topicId}");
        return topicId;
    }
    
    private string GetSubjectCode() => currentSubjectCode ?? SubjectCode;
    
    private string GetCurrentQueryString()
    {
        try
        {
            var uri = Nav.ToAbsoluteUri(Nav.Uri);
            var queryString = uri.Query;
            
            if (!string.IsNullOrEmpty(queryString))
            {
                // Return the query string with ? prefix if it exists
                return queryString;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[TopicHubLayout] Error getting query string: {ex.Message}");
        }
        
        return "";
    }

    // Left-card links
    [Parameter] public string SubjectCode { get; set; } = "BUM 281";
    [Parameter] public int TopicId { get; set; } = 1;
    [CascadingParameter] public int? CascadedTopicId { get; set; }

    public class SubjectInfo
    {
        public int SubjectId { get; set; }
        public string SubjectCode { get; set; } = "";
        public string Name { get; set; } = "";
        public string? Description { get; set; }
        public int Year { get; set; }
        public bool IsActive { get; set; }
    }
}

<!-- Top navigation (same structure/styles as the app’s main nav) -->
<nav class="cl-nav">
    <div class="container nav-row">
        <a class="brand" href="/dashboard">
            <h1 id="mainTitle">Campus<span>Learn</span></h1>
        </a>

        <div class="nav-actions">
            <button class="hamburger @(menuOpen ? "active" : "")"
                    aria-label="Menu"
                    aria-expanded="@menuOpen.ToString().ToLowerInvariant()"
                    @onclick="ToggleMenu" type="button">
                <span></span><span></span><span></span>
            </button>
        </div>
    </div>
</nav>

<!-- Drawer -->
<button class="backdrop" type="button" data-open="@menuOpen.ToString().ToLowerInvariant()" @onclick="ToggleMenu"></button>
<aside class="drawer" data-open="@menuOpen.ToString().ToLowerInvariant()">
    <nav class="drawer-nav">
        <a @onclick='() => Go("/dashboard")'>Dashboard</a>
        <a @onclick='() => Go("/subjects")'>Subjects</a>
        <a @onclick='() => Go("/peers")'>Peers</a>
        <a @onclick='() => Go("/messages")'>Messages</a>
        <a @onclick='() => Go("/claratea")'>Ask Clara</a>
        <a @onclick='HandleLogout'>Log out</a>
    </nav>
</aside>

<!-- Hub grid -->
<main class="hub-shell">
    <div class="container hub-grid">
        <!-- left menu card -->
        <aside class="menu-card">
            <div class="menu-head">
                <div class="code">@GetSubjectCode()</div>
                <div class="sub">TOPIC CHOICE</div>
            </div>

            <nav class="menu-links">
                <a href="@($"/topichub/tutors{GetCurrentQueryString()}")" class="link">Tutors</a>
                <a href="@($"/topichub/forum/{GetTopicId()}{GetCurrentQueryString()}")" class="link">Forum</a>
                <a href="@($"/topichub/resources/{GetTopicId()}{GetCurrentQueryString()}")" class="link">Resources</a>
            </nav>

            <div class="menu-foot"><span class="chev">^</span></div>
        </aside>

        <!-- right side content -->
        <section class="hub-content">
            @Body
        </section>
    </div>
</main>

<style>
    :root {
        --nav-bg: #3f3f3f;
        --ink: #2a2a2a;
        --ink-on: #fff;
        --ring: rgba(0,0,0,.15);
        --container: min(1200px,92vw);
        --nav-h: 88px;
        --panel: #fff;
        --bg: #eef2f6;
        --radius: 18px;
        --shadow: 0 12px 32px rgba(0,0,0,.10);
        --ring-soft: color-mix(in oklab,var(--ink) 12%, white);
    }

    /* ===== Top nav (copied style footprint of your main nav) ===== */
    .container {
        width: var(--container);
        margin-inline: auto;
        padding-inline: clamp(12px,3vw,24px)
    }

    .cl-nav {
        position: sticky;
        top: 0;
        z-index: 1000;
        background: var(--nav-bg);
        border-bottom: 1px solid rgba(255,255,255,.12);
        box-shadow: 0 8px 28px rgba(0,0,0,.25)
    }

    .nav-row {
        height: var(--nav-h);
        display: grid;
        grid-template-columns: 1fr auto;
        align-items: center;
        gap: 16px
    }

    #mainTitle {
        margin: 0;
        color: var(--ink-on);
        font-weight: 900;
        font-size: clamp(24px,3vw,32px)
    }

        #mainTitle span {
            font-weight: 300;
            color: var(--ink-on)
        }

    .nav-actions {
        display: flex;
        align-items: center;
        gap: .8rem
    }

    .hamburger {
        background: none;
        border: 0;
        cursor: pointer;
        width: 36px;
        height: 28px;
        display: grid;
        place-items: center;
        padding: 0
    }

        .hamburger span {
            width: 26px;
            height: 3px;
            background: #fff;
            border-radius: 6px;
            display: block;
            transition: transform .25s,opacity .25s
        }

            .hamburger span + span {
                margin-top: 5px
            }

        .hamburger.active span:nth-child(1) {
            transform: translateY(8px) rotate(45deg)
        }

        .hamburger.active span:nth-child(2) {
            opacity: 0
        }

        .hamburger.active span:nth-child(3) {
            transform: translateY(-8px) rotate(-45deg)
        }

    .backdrop {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,.28);
        border: 0;
        opacity: 0;
        pointer-events: none;
        transition: opacity .22s ease;
        z-index: 1200
    }

        .backdrop[data-open="true"] {
            opacity: 1;
            pointer-events: auto
        }

    .drawer {
        position: fixed;
        inset: 0 0 0 auto;
        width: min(78vw,360px);
        translate: 100% 0;
        transition: translate .22s ease;
        background: #fff;
        border-left: 1px solid var(--ring);
        box-shadow: 0 12px 24px rgba(0,0,0,.30);
        z-index: 1300;
        padding: 18px 16px
    }

        .drawer[data-open="true"] {
            translate: 0 0
        }

    .drawer-nav {
        display: grid;
        gap: 10px;
        margin-top: 6px
    }

        .drawer-nav a {
            display: block;
            padding: 12px 14px;
            border-radius: 12px;
            font-weight: 800;
            text-decoration: none;
            color: var(--ink);
        }

            .drawer-nav a:hover {
                background: rgba(0,0,0,.06);
            }

    /* ===== Hub grid ===== */
    .hub-shell {
        background: var(--bg)
    }

    .hub-grid {
        display: grid;
        grid-template-columns: 280px 1fr;
        gap: 22px;
        padding-block: 16px;
        overflow-x: hidden
    }

    .menu-card {
        background: #dbe4ee;
        border: 1px solid var(--ring-soft);
        border-radius: 22px;
        box-shadow: 0 10px 26px rgba(0,0,0,.08);
        padding: 18px;
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .menu-head .code {
        font-weight: 900;
        font-size: 22px;
    }

    .menu-head .sub {
        letter-spacing: .12em;
        font-size: .78rem;
        font-weight: 900;
        opacity: .75;
    }

    .menu-links {
        display: grid;
        gap: 10px;
        margin-top: 8px;
    }

        .menu-links .link {
            display: block;
            padding: 10px 12px;
            border-radius: 12px;
            font-weight: 800;
            color: #111;
            text-decoration: none;
            border: 1px solid var(--ring-soft);
            background: #fff;
        }

            .menu-links .link:hover {
                box-shadow: 0 8px 18px rgba(0,0,0,.08);
            }

    .menu-foot {
        display: grid;
        place-items: center;
        color: #111;
        opacity: .55;
    }

    .hub-content {
        min-width: 0;
    }

    @@media (max-width: 900px) {
        .hub-grid {
            grid-template-columns: 1fr;
        }

        .menu-card {
            position: sticky;
            top: calc(var(--nav-h) + 8px);
        }
    }
</style>
