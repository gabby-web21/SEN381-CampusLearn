@using System.Net.Http.Json
@using Frontend.Models
@inject HttpClient Http
@inject IJSRuntime JS
@inject Frontend.Services.AuthService AuthService

<div class="modal-overlay @(IsVisible ? "visible" : "")" @onclick="CloseModal">
    <div class="modal-content" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h3>Report Message</h3>
            <button class="close-btn" @onclick="CloseModal">Ã—</button>
        </div>
        
        <div class="modal-body">
            @if (ShowStatusMessage)
            {
                <div class="status-message @(IsSuccess ? "success" : "error")">
                    @StatusMessage
                </div>
            }
            else
            {
                <div class="reported-message">
                    <strong>Message:</strong>
                    <div class="message-preview">@ReportData?.MessageContent</div>
                    <small>From: @ReportData?.SenderName</small>
                </div>

                <div class="form-group">
                    <label for="reason">Reason for reporting:</label>
                    <select id="reason" @bind="SelectedReason" class="form-control">
                        <option value="">Select a reason</option>
                        <option value="nsfw">NSFW Content</option>
                        <option value="harassment">Harassment</option>
                        <option value="foul_language">Foul Language</option>
                        <option value="spam">Spam</option>
                        <option value="other">Other</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="details">Additional details (optional):</label>
                    <textarea id="details" @bind="Details" class="form-control" rows="3" 
                              placeholder="Provide additional context about why you're reporting this message..."></textarea>
                </div>
            }
        </div>

        <div class="modal-footer">
            <button class="btn btn-secondary" @onclick="CloseModal">@(ShowStatusMessage ? "Close" : "Cancel")</button>
            @if (!ShowStatusMessage)
            {
                <button class="btn btn-danger" @onclick="SubmitReport" disabled="@(string.IsNullOrEmpty(SelectedReason) || IsSubmitting)">
                    @(IsSubmitting ? "Submitting..." : "Submit Report")
                </button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public MessageReportData? ReportData { get; set; }
    [Parameter] public EventCallback OnReportSubmitted { get; set; }

    private string SelectedReason = "";
    private string Details = "";
    private bool IsSubmitting = false;
    private bool ShowStatusMessage = false;
    private string StatusMessage = "";
    private bool IsSuccess = false;

    private async Task CloseModal()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(false);
        ResetForm();
    }

    private void ResetForm()
    {
        SelectedReason = "";
        Details = "";
        IsSubmitting = false;
        ShowStatusMessage = false;
        StatusMessage = "";
        IsSuccess = false;
    }

    private async Task SubmitReport()
    {
        if (string.IsNullOrEmpty(SelectedReason) || ReportData == null)
            return;

        IsSubmitting = true;
        StateHasChanged();

        try
        {
            var currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                await JS.InvokeVoidAsync("alert", "You must be logged in to report messages.");
                return;
            }

            var request = new
            {
                ReporterId = currentUser.UserId,
                ReportedUserId = ReportData.ReportedUserId,
                MessageId = ReportData.MessageId,
                MessageContent = ReportData.MessageContent,
                MessageType = ReportData.MessageType,
                Reason = SelectedReason,
                Details = string.IsNullOrWhiteSpace(Details) ? null : Details,
                ContextUrl = ReportData.ContextUrl,
                SenderName = ReportData.SenderName,
                ReporterName = currentUser.StudentNo ?? $"User {currentUser.UserId}" // Using student number as name
            };

            var response = await Http.PostAsJsonAsync("https://localhost:7228/api/MessageReport/report", request);

            if (response.IsSuccessStatusCode)
            {
                ShowStatusMessage = true;
                StatusMessage = "Report submitted successfully! Thank you for helping keep our community safe.";
                IsSuccess = true;
                
                // Auto-close after 2 seconds
                _ = Task.Delay(2000).ContinueWith(_ => InvokeAsync(async () => {
                    await CloseModal();
                    await OnReportSubmitted.InvokeAsync();
                }));
            }
            else
            {
                ShowStatusMessage = true;
                StatusMessage = "Failed to submit report. Please try again.";
                IsSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting report: {ex.Message}");
            ShowStatusMessage = true;
            StatusMessage = "An error occurred while submitting the report.";
            IsSuccess = false;
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }
}

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
    }

    .modal-overlay.visible {
        opacity: 1;
        visibility: visible;
    }

    .modal-content {
        background: white;
        border-radius: 12px;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        max-width: 500px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 24px 0;
        border-bottom: 1px solid #e5e7eb;
        margin-bottom: 20px;
    }

    .modal-header h3 {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
        color: #1f2937;
    }

    .close-btn {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #6b7280;
        padding: 0;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .close-btn:hover {
        color: #374151;
    }

    .modal-body {
        padding: 0 24px;
    }

    .reported-message {
        background: #f9fafb;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 20px;
    }

    .message-preview {
        background: white;
        border: 1px solid #d1d5db;
        border-radius: 6px;
        padding: 12px;
        margin: 8px 0;
        font-family: inherit;
        max-height: 100px;
        overflow-y: auto;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 6px;
        font-weight: 500;
        color: #374151;
    }

    .form-control {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #d1d5db;
        border-radius: 6px;
        font-size: 14px;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    .form-control:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        padding: 20px 24px 24px;
        border-top: 1px solid #e5e7eb;
        margin-top: 20px;
    }

    .btn {
        padding: 8px 16px;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.15s ease-in-out;
        border: none;
    }

    .btn-secondary {
        background: #f3f4f6;
        color: #374151;
        border: 1px solid #d1d5db;
    }

    .btn-secondary:hover {
        background: #e5e7eb;
    }

    .btn-danger {
        background: #dc2626;
        color: white;
    }

    .btn-danger:hover:not(:disabled) {
        background: #b91c1c;
    }

    .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .status-message {
        padding: 16px;
        border-radius: 8px;
        margin-bottom: 20px;
        font-weight: 500;
        text-align: center;
    }

    .status-message.success {
        background-color: #d1fae5;
        color: #065f46;
        border: 1px solid #a7f3d0;
    }

    .status-message.error {
        background-color: #fee2e2;
        color: #991b1b;
        border: 1px solid #fca5a5;
    }
</style>
